package com.scrapper.service;

import com.scrapper.util.ScrapingSelectors;
import com.scrapper.validation.Validation;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.time.Duration;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * –°–µ—Ä–≤—ñ—Å –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∞–º–∏
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ Load More –∫–Ω–æ–ø–∫–∏, –ø—Ä–æ–∫—Ä—É—Ç–∫—É, –ø–æ—à—É–∫ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —Ç–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ —Å–µ–ª–µ–∫—Ç–æ—Ä–∏
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class PageInteractionService {

    @Value("${scraping.selenium.scroll.delay:1000}")
    private long scrollDelay;

    @Value("${scraping.selenium.scroll.max-attempts:8}")
    private int maxScrollAttempts;

    @Value("${scraping.selenium.scroll.max-no-new-jobs:2}")
    private int maxNoNewJobsAttempts;

    private static final String LOAD_MORE_SELECTOR = ScrapingSelectors.LOAD_MORE_BUTTON[0];
    private static final String JOB_CARD_SELECTOR = ScrapingSelectors.JOB_CARD[0];

    /**
     * –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –∫–Ω–æ–ø–∫—É Load More
     */
    private WebElement findLoadMoreButton(WebDriver driver) {
        String[] loadMoreSelectors = {
            LOAD_MORE_SELECTOR,
            "button:contains('Load More')",
            "button:contains('Show More')",
            "button:contains('Load')",
            "a:contains('Load More')",
            "a:contains('Show More')",
            "[data-testid*='load-more']",
            "[data-testid*='show-more']",
            ".load-more",
            ".show-more",
            "button[class*='load']",
            "button[class*='more']",
            "a[class*='load']",
            "a[class*='more']"
        };

        for (String selector : loadMoreSelectors) {
            try {
                List<WebElement> buttons = driver.findElements(By.cssSelector(selector));
                if (!buttons.isEmpty()) {
                    WebElement button = buttons.get(0);
                    if (button.isDisplayed() && button.isEnabled()) {
                        log.debug("‚úÖ Load More button found with selector: '{}'", selector);
                        return button;
                    }
                }
            } catch (Exception e) {
                log.debug("‚ö†Ô∏è Selector '{}' failed: {}", selector, e.getMessage());
            }
        }
        return null;
    }

    /**
     * –ó–∞–∫—Ä–∏–≤–∞—î –≤–∏–ø–∞–¥–∞—é—á–µ –º–µ–Ω—é job function
     */
    public void closeJobFunctionDropdown(WebDriver driver) {
        log.info("üîç Attempting to close job function dropdown...");
        try {
            // –ö–ª—ñ–∫–∞—î–º–æ –ø–æ–∑–∞ –º–µ–∂–∞–º–∏ –≤–∏–ø–∞–¥–∞—é—á–æ–≥–æ –º–µ–Ω—é, —â–æ–± –∑–∞–∫—Ä–∏—Ç–∏ –π–æ–≥–æ
            WebElement body = driver.findElement(By.tagName("body"));
            ((JavascriptExecutor) driver).executeScript("arguments[0].click();", body);
            sleep(1000);
            log.info("‚úÖ Job function dropdown closed successfully");
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Could not close job function dropdown: {}", e.getMessage());
        }
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –º–æ–∂–Ω–∞ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ –∫–Ω–æ–ø–∫—É
     */
    private boolean isButtonClickable(WebElement button) {
        try {
            return button.isDisplayed() && button.isEnabled();
        } catch (Exception e) {
            return false;
        }
    }

    /**
     * –ù–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É
     */
    private boolean scrollToLoadMore(WebDriver driver, List<String> jobFunctions) {
        log.info("üìú Starting scroll for content loading...");

        int previousJobCount = countJobCardsWithFilter(driver, jobFunctions);
        int noNewJobsCount = 0;
        int scrollAttempts = 0;

        while (scrollAttempts < maxScrollAttempts && noNewJobsCount < maxNoNewJobsAttempts) {
            try {
                // –°–∫—Ä–æ–ª–∏–º–æ –≤–Ω–∏–∑
                ((JavascriptExecutor) driver).executeScript("window.scrollTo(0, document.body"
                    + ".scrollHeight);");
                sleep(scrollDelay);

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–æ–≤—ñ –∫–∞—Ä—Ç–∫–∏ –∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é
                int currentJobCount = countJobCardsWithFilter(driver, jobFunctions);

                if (currentJobCount > previousJobCount) {
                    log.info("üîÑ Jobs loaded: {} -> {} (attempt {})",
                        previousJobCount, currentJobCount, scrollAttempts + 1);
                    previousJobCount = currentJobCount;
                    noNewJobsCount = 0;
                } else {
                    noNewJobsCount++;
                }

                scrollAttempts++;

            } catch (Exception e) {
                log.warn("‚ö†Ô∏è Error during scroll attempt {}: {}", scrollAttempts + 1,
                    e.getMessage());
                noNewJobsCount++;
            }
        }

        log.info("‚úÖ Scroll completed. Attempts: {}, Final count: {}", scrollAttempts,
            previousJobCount);
        return previousJobCount > 0;
    }


    /**
     * –†–∞—Ö—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞—Ä—Ç–æ–∫ –≤–∞–∫–∞–Ω—Å—ñ–π –∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é –∑–∞ job functions
     */
    private int countJobCardsWithFilter(WebDriver driver, List<String> jobFunctions) {
        try {
            List<WebElement> cards = driver.findElements(By.cssSelector(JOB_CARD_SELECTOR));

            if (jobFunctions == null || jobFunctions.isEmpty()) {
                return cards.size();
            }

            int filteredCount = 0;
            for (WebElement card : cards) {
                String cardText = card.getText().toLowerCase();
                boolean hasMatchingFunction = jobFunctions.stream()
                    .anyMatch(function -> cardText.contains(function.toLowerCase()));

                if (hasMatchingFunction) {
                    filteredCount++;
                }
            }

            return filteredCount;
        } catch (Exception e) {
            return 0;
        }
    }


    /**
     * –ü–æ—à—É–∫ –∫–∞—Ä—Ç–æ–∫ –≤–∞–∫–∞–Ω—Å—ñ–π –∑ –∫—ñ–ª—å–∫–æ–º–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è–º–∏
     */
    public List<WebElement> findJobCardsWithMultipleStrategies(WebDriver driver) {
        log.info("üîç Finding job cards with multiple strategies...");

        // –°–ø–æ—á–∞—Ç–∫—É —Ç–µ—Å—Ç—É—î–º–æ –Ω–∞–π–±—ñ–ª—å—à –π–º–æ–≤—ñ—Ä–Ω–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä
        String primarySelector = "[class*='job-card']";
        try {
            List<WebElement> elements = driver.findElements(By.cssSelector(primarySelector));
            log.info("üîç Primary selector '{}' -> found {} elements", primarySelector,
                elements.size());

            if (!elements.isEmpty()) {
                // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ - —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ
                List<WebElement> validElements = Validation.filterValidJobCards(elements);
                log.info("üîç After validation: {} valid elements out of {} total",
                    validElements.size(), elements.size());

                if (!validElements.isEmpty()) {
                    log.info("‚úÖ Found {} valid job cards with primary selector: '{}'",
                        validElements.size(), primarySelector);
                    return validElements;
                }
            }
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Primary selector '{}' failed: {}", primarySelector, e.getMessage());
        }

        // –°–ø—Ä–æ–±—É—î–º–æ —ñ–Ω—à—ñ —Å–µ–ª–µ–∫—Ç–æ—Ä–∏ –∑ ScrapingSelectors.JOB_CARD
        for (int i = 0; i < ScrapingSelectors.JOB_CARD.length; i++) {
            String selector = ScrapingSelectors.JOB_CARD[i];

            // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä, —è–∫–∏–π –≤–∂–µ –ø–µ—Ä–µ–≤—ñ—Ä–∏–ª–∏
            if (selector.equals(primarySelector)) {
                continue;
            }

            try {
                List<WebElement> elements = driver.findElements(By.cssSelector(selector));
                log.info("üîç Selector {}: '{}' -> found {} elements", i + 1, selector,
                    elements.size());

                if (!elements.isEmpty()) {
                    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ - —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ
                    List<WebElement> validElements = Validation.filterValidJobCards(elements);
                    log.info("üîç After validation: {} valid elements out of {} total",
                        validElements.size(), elements.size());

                    if (!validElements.isEmpty()) {
                        log.info("‚úÖ Found {} valid job cards with selector: '{}'",
                            validElements.size(), selector);
                        return validElements;
                    }
                }
            } catch (Exception e) {
                log.warn("‚ö†Ô∏è Selector '{}' failed: {}", selector, e.getMessage());
            }
        }

        // –ê–Ω–∞–ª—ñ–∑ –≤—Å—ñ—Ö div –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        List<WebElement> allDivs = driver.findElements(By.tagName("div"));
        int sampleSize = Math.min(10, allDivs.size());
        for (int i = 0; i < sampleSize; i++) {
            try {
                WebElement div = allDivs.get(i);
                String className = div.getAttribute("class");
                String dataTestId = div.getAttribute("data-testid");
                String tagName = div.getTagName();
                String text = div.getText();
                log.info("üîç Div {}: tag='{}', class='{}', data-testid='{}', text='{}'",
                    i + 1, tagName, className, dataTestId,
                    text.length() > 50 ? text.substring(0, 50) + "..." : text);
            } catch (Exception e) {
                log.warn("‚ö†Ô∏è Error analyzing div {}: {}", i + 1, e.getMessage());
            }
        }

        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–µ—Ä—à—ñ 50 div –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        return allDivs.subList(0, Math.min(50, allDivs.size()));
    }

    /**
     * –ü–æ—à—É–∫ –∫–∞—Ä—Ç–æ–∫ –≤–∞–∫–∞–Ω—Å—ñ–π –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –∫–æ–º–ø–∞–Ω—ñ—ó
     */


    /**
     * –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –ø—Ä—è–º–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤–∞–∫–∞–Ω—Å—ñ—é –≤ –∫–∞—Ä—Ç—Ü—ñ
     */
    public String findDirectJobUrl(WebElement jobCard) {
        try {
            // –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 1: –®—É–∫–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º –∞—Ç—Ä–∏–±—É—Ç–æ–º data-testid
            try {
                WebElement specificLink = jobCard.findElement(By.cssSelector("a[data-testid='job"
                    + "-card-link']"));
                String url = specificLink.getAttribute("href");
                if (url != null && !url.isBlank()) {
                    log.debug("üîç –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 1: –ó–Ω–∞–π–¥–µ–Ω–æ URL –∑–∞ data-testid: {}", url);
                    return url;
                }
            } catch (Exception e) {
                // –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 1 –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∞
            }

            // –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 2: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π –µ–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç–∫–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º
            try {
                WebElement parent = jobCard.findElement(By.xpath(".."));
                if (parent != null && "a".equals(parent.getTagName())) {
                    String url = parent.getAttribute("href");
                    if (url != null && !url.isBlank()) {
                        log.debug("üîç –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 2: –ó–Ω–∞–π–¥–µ–Ω–æ URL —É –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞: {}", url);
                        return url;
                    }
                }
            } catch (Exception e) {
                // –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 2 –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∞
            }

            // –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 3: –®—É–∫–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤ –¥–æ—á—ñ—Ä–Ω—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç–∞—Ö
            try {
                List<WebElement> links = jobCard.findElements(By.tagName("a"));
                for (WebElement link : links) {
                    String url = link.getAttribute("href");
                    if (url != null && !url.isBlank() && url.contains("jobs.techstars.com")) {
                        log.debug("üîç –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 3: –ó–Ω–∞–π–¥–µ–Ω–æ URL —É –¥–æ—á—ñ—Ä–Ω—å–æ–º—É –ø–æ—Å–∏–ª–∞–Ω–Ω—ñ: {}", url);
                        return url;
                    }
                }
            } catch (Exception e) {
                // –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 3 –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∞
            }

            // –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 4: –®—É–∫–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑–∞ –∫–ª–∞—Å–æ–º
            try {
                List<WebElement> links = jobCard.findElements(By.cssSelector("a[class*='job'], "
                    + "a[class*='card'], a[class*='link']"));
                for (WebElement link : links) {
                    String url = link.getAttribute("href");
                    if (url != null && !url.isBlank()) {
                        log.debug("üîç –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 4: –ó–Ω–∞–π–¥–µ–Ω–æ URL –∑–∞ –∫–ª–∞—Å–æ–º: {}", url);
                        return url;
                    }
                }
            } catch (Exception e) {
                // –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 4 –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∞
            }

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Error finding direct job URL: {}", e.getMessage());
        }

        log.warn("‚ö†Ô∏è No direct job URL found in job card");
        return null;
    }

    /**
     * –ù–∞—Ç–∏—Å–∫–∞—î –Ω–∞ —Ñ—ñ–ª—å—Ç—Ä job function (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, IT)
     * –ö—Ä–æ–∫ 1: –ù–∞—Ç–∏—Å–∫–∞—î –Ω–∞ –∫–Ω–æ–ø–∫—É "Job function" —â–æ–± –≤—ñ–¥–∫—Ä–∏—Ç–∏ dropdown
     * –ö—Ä–æ–∫ 2: –í–∏–±–∏—Ä–∞—î –ø–æ—Ç—Ä—ñ–±–Ω—É –æ–ø—Ü—ñ—é –∑ dropdown
     */
    public boolean clickJobFunctionFilter(WebDriver driver, String jobFunction) {
        log.debug("üîç Attempting to click job function filter: '{}'", jobFunction);

        try {
            // –ö–†–û–ö 1: –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–∞ –Ω–∞—Ç–∏—Å–∫–∞—î–º–æ –Ω–∞ –∫–Ω–æ–ø–∫—É "Job function"
            WebElement jobFunctionButton = findJobFunctionButton(driver);
            if (jobFunctionButton == null) {
                log.warn("‚ö†Ô∏è Could not find 'Job function' button");
                return false;
            }

            log.debug("‚úÖ Found 'Job function' button, clicking to open dropdown...");
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);",
                jobFunctionButton);
            Thread.sleep(500);

            // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–Ω–æ–ø–∫–∞ –∫–ª—ñ–∫–∞–±–µ–ª—å–Ω–∞
            if (!jobFunctionButton.isEnabled() || !jobFunctionButton.isDisplayed()) {
                log.warn("‚ö†Ô∏è Job function button is not clickable, waiting...");
                Thread.sleep(2000);
            }

            // –°–ø—Ä–æ–±—É—î–º–æ –∫–ª—ñ–∫–Ω—É—Ç–∏ –∫—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            boolean dropdownOpened = false;
            for (int attempt = 1; attempt <= 3; attempt++) {
                log.debug("üîç Attempt {} to click job function button...", attempt);
                try {
                    jobFunctionButton.click();
                    Thread.sleep(2000); // –ß–µ–∫–∞—î–º–æ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è dropdown

                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ dropdown –¥—ñ–π—Å–Ω–æ –≤—ñ–¥–∫—Ä–∏–≤—Å—è
                    List<WebElement> dropdownOptions = driver.findElements(By.cssSelector("div"
                        + ".sc-beqWaB.dfbUjw"));
                    if (!dropdownOptions.isEmpty()) {
                        log.debug("‚úÖ Dropdown opened successfully on attempt {}", attempt);
                        dropdownOpened = true;
                        break;
                    } else {
                        log.debug("‚ö†Ô∏è Dropdown not opened on attempt {}, trying again...", attempt);
                        Thread.sleep(1000);
                    }
                } catch (Exception e) {
                    log.warn("‚ö†Ô∏è Error clicking job function button on attempt {}: {}", attempt,
                        e.getMessage());
                    Thread.sleep(1000);
                }
            }

            if (!dropdownOpened) {
                log.error("‚ùå Failed to open dropdown after 3 attempts");
                return false;
            }

            // –ö–†–û–ö 2: –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–∞ –Ω–∞—Ç–∏—Å–∫–∞—î–º–æ –Ω–∞ –ø–æ—Ç—Ä—ñ–±–Ω—É –æ–ø—Ü—ñ—é –≤ dropdown
            WebElement jobFunctionOption = findJobFunctionOption(driver, jobFunction);
            if (jobFunctionOption == null) {
                log.warn("‚ö†Ô∏è Could not find job function option: '{}'", jobFunction);
                return false;
            }

            log.debug("‚úÖ Found job function option: '{}', clicking...",
                jobFunctionOption.getText());
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);",
                jobFunctionOption);
            Thread.sleep(500);
            jobFunctionOption.click();
            Thread.sleep(2000); // –ß–µ–∫–∞—î–º–æ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä–∞

            // –ö–†–û–ö 3: –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –≤–∏–ø–∞–¥–∞—é—á–µ –º–µ–Ω—é –ø—ñ—Å–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä–∞
            log.debug("üîç Closing dropdown after applying filter '{}'...", jobFunction);
            closeJobFunctionDropdown(driver);

            // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–∞—É–∑–∞ –ø—ñ—Å–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –º–µ–Ω—é
            log.debug("üîç Waiting after closing dropdown...");
            Thread.sleep(2000);

            log.debug("‚úÖ Successfully applied job function filter: '{}'", jobFunction);
            return true;

        } catch (Exception e) {
            log.error("‚ùå Error clicking job function filter '{}': {}", jobFunction, e.getMessage());
            return false;
        }
    }

    /**
     * –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –∫–Ω–æ–ø–∫—É "Job function"
     */
    private WebElement findJobFunctionButton(WebDriver driver) {
        // 1. –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ —Ç–æ—á–Ω–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä
        try {
            List<WebElement> elements = driver.findElements(By.cssSelector("div.sc-beqWaB.fmYNJF"));
            for (WebElement element : elements) {
                if (element.getText().contains("Job function") && element.isDisplayed()) {
                    return element;
                }
            }
        } catch (Exception e) {
            log.debug("‚ö†Ô∏è Exact selector failed: {}", e.getMessage());
        }

        // 2. –°–ø—Ä–æ–±—É—î–º–æ XPath
        try {
            List<WebElement> elements = driver.findElements(By.xpath("//div[contains(text(), 'Job"
                + " function')]"));
            for (WebElement element : elements) {
                if (element.isDisplayed()) {
                    return element;
                }
            }
        } catch (Exception e) {
            log.debug("‚ö†Ô∏è XPath selector failed: {}", e.getMessage());
        }

        // 3. –°–ø—Ä–æ–±—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—ñ —Å–µ–ª–µ–∫—Ç–æ—Ä–∏
        for (String selector : ScrapingSelectors.JOB_FUNCTION_BUTTON) {
            try {
                List<WebElement> elements = driver.findElements(By.cssSelector(selector));
                for (WebElement element : elements) {
                    if (element.getText().contains("Job function") && element.isDisplayed()) {
                        return element;
                    }
                }
            } catch (Exception e) {
                log.debug("‚ö†Ô∏è Selector '{}' failed: {}", selector, e.getMessage());
            }
        }

        return null;
    }

    /**
     * –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –æ–ø—Ü—ñ—é job function –≤ dropdown
     */
    private WebElement findJobFunctionOption(WebDriver driver, String jobFunction) {
        // –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –≤–∏–≤–æ–¥–∏–º–æ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –æ–ø—Ü—ñ—ó
        log.info("üîç Looking for job function option: '{}'", jobFunction);

        // 1. –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ —Ç–æ—á–Ω–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä
        try {
            List<WebElement> elements = driver.findElements(By.cssSelector("div.sc-beqWaB.dfbUjw"));
            log.info("üîç Found {} elements with selector 'div.sc-beqWaB.dfbUjw'", elements.size());

            for (WebElement element : elements) {
                String elementText = element.getText();
                log.info("üîç Available option: '{}'", elementText);
                if (elementText.equalsIgnoreCase(jobFunction) && element.isDisplayed()) {
                    return element;
                }
            }
        } catch (Exception e) {
            log.debug("‚ö†Ô∏è Exact selector failed: {}", e.getMessage());
        }

        // 2. –°–ø—Ä–æ–±—É—î–º–æ data-testid —Å–µ–ª–µ–∫—Ç–æ—Ä
        try {
            String testIdSelector = String.format("[data-testid*='job_functions-%s']",
                jobFunction.replace(" ", "%20"));
            List<WebElement> elements = driver.findElements(By.cssSelector(testIdSelector));
            for (WebElement element : elements) {
                if (element.isDisplayed()) {
                    return element;
                }
            }
        } catch (Exception e) {
            log.debug("‚ö†Ô∏è Data-testid selector failed: {}", e.getMessage());
        }

        // 3. –°–ø—Ä–æ–±—É—î–º–æ XPath
        try {
            String xpathSelector = String.format("//div[contains(text(), '%s')]", jobFunction);
            List<WebElement> elements = driver.findElements(By.xpath(xpathSelector));
            for (WebElement element : elements) {
                if (element.isDisplayed()) {
                    return element;
                }
            }
        } catch (Exception e) {
            log.debug("‚ö†Ô∏è XPath selector failed: {}", e.getMessage());
        }

        // 4. –°–ø—Ä–æ–±—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—ñ —Å–µ–ª–µ–∫—Ç–æ—Ä–∏
        for (String selector : ScrapingSelectors.JOB_FUNCTION_OPTIONS) {
            try {
                List<WebElement> elements = driver.findElements(By.cssSelector(selector));
                for (WebElement element : elements) {
                    String elementText = element.getText();
                    if (elementText.equalsIgnoreCase(jobFunction) && element.isDisplayed()) {
                        return element;
                    }
                }
            } catch (Exception e) {
                log.debug("‚ö†Ô∏è Selector '{}' failed: {}", selector, e.getMessage());
            }
        }

        // 5. –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å–ø—Ä–æ–±—É—î–º–æ –ø—Ä–æ–∫—Ä—É—Ç–∏—Ç–∏ dropdown
        log.info("üîç Option '{}' not found, attempting to scroll dropdown...", jobFunction);
        try {
            // –ó–Ω–∞—Ö–æ–¥–∏–º–æ dropdown –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä (—Å–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Å–µ–ª–µ–∫—Ç–æ—Ä–∏)
            WebElement dropdownContainer = null;
            String[] containerSelectors = {
                "div[role='listbox']",
                "div[class*='dropdown']",
                "div[class*='menu']",
                "div[class*='list']",
                "div.sc-beqWaB",
                "ul[role='listbox']",
                "ul[class*='dropdown']"
            };

            for (String selector : containerSelectors) {
                try {
                    List<WebElement> containers = driver.findElements(By.cssSelector(selector));
                    for (WebElement container : containers) {
                        if (container.isDisplayed() && container.getSize().height > 100) {
                            dropdownContainer = container;
                            log.info("üîç Found dropdown container with selector: {}", selector);
                            break;
                        }
                    }
                    if (dropdownContainer != null) break;
                } catch (Exception e) {
                    log.debug("‚ö†Ô∏è Container selector '{}' failed: {}", selector, e.getMessage());
                }
            }

            if (dropdownContainer != null) {
                log.info("üîç Found dropdown container, scrolling down...");
                // –ü—Ä–æ–∫—Ä—É—á—É—î–º–æ dropdown –≤–Ω–∏–∑
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollTop = "
                    + "arguments[0].scrollHeight;", dropdownContainer);
                Thread.sleep(1000);

                // –ó–Ω–æ–≤—É —à—É–∫–∞—î–º–æ –æ–ø—Ü—ñ—é –ø—ñ—Å–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
                List<WebElement> elements = driver.findElements(By.cssSelector("div.sc-beqWaB"
                    + ".dfbUjw"));
                log.info("üîç After scrolling, found {} elements", elements.size());

                for (WebElement element : elements) {
                    String elementText = element.getText();
                    log.info("üîç Checking element after scroll: '{}'", elementText);
                    if (elementText.equalsIgnoreCase(jobFunction) && element.isDisplayed()) {
                        log.info("‚úÖ Found job function option after scrolling: '{}'", elementText);
                        return element;
                    }
                }
            } else {
                log.info("üîç Could not find dropdown container for scrolling");
            }
        } catch (Exception e) {
            log.debug("‚ö†Ô∏è Scrolling dropdown failed: {}", e.getMessage());
        }

        return null;
    }


    /**
     * –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ —Ç–µ–∫—Å—Ç "Showing X jobs" —ñ –≤–∏—Ç—è–≥—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å X.
     * –¶–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —â–æ–± –∑–Ω–∞—Ç–∏, —Å–∫—ñ–ª—å–∫–∏ –≤—Å—å–æ–≥–æ –≤–∞–∫–∞–Ω—Å—ñ–π –æ—á—ñ–∫—É–≤–∞—Ç–∏ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.
     */
    public int getTotalJobCountFromTextAfterFiltering(WebDriver driver) {
        log.info("üìä Attempting to extract total job count from page text...");
        try {
            // –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ —Ç–æ—á–Ω–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä –∑ –∫–ª–∞—Å–æ–º
            WebElement countElement = driver.findElement(By.cssSelector("div.sc-beqWaB.eJrfpP"));
            String text = countElement.getText(); // –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "Showing 225 jobs"
            log.info("üìä Found element with text: '{}'", text);

            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ –¥–ª—è –≤–∏—Ç—è–≥–Ω–µ–Ω–Ω—è –ø–µ—Ä—à–æ–≥–æ —á–∏—Å–ª–∞ –∑ —Ç–µ–∫—Å—Ç—É
            Pattern pattern = Pattern.compile("\\d+");
            Matcher matcher = pattern.matcher(text);

            if (matcher.find()) {
                int totalJobs = Integer.parseInt(matcher.group(0));
                log.info("‚úÖ Found total declared jobs: {}", totalJobs);
                return totalJobs;
            } else {
                log.warn("‚ö†Ô∏è Could not find a number in the text: '{}'", text);
            }
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Could not find element with CSS selector, trying XPath...");
            try {
                // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π XPath —Å–µ–ª–µ–∫—Ç–æ—Ä
                WebElement countElement = driver.findElement(By.xpath("//div[contains(text(), "
                    + "'Showing') and contains(text(), 'jobs')]"));
                String text = countElement.getText();
                log.info("üìä Found element with XPath, text: '{}'", text);

                Pattern pattern = Pattern.compile("\\d+");
                Matcher matcher = pattern.matcher(text);

                if (matcher.find()) {
                    int totalJobs = Integer.parseInt(matcher.group(0));
                    log.info("‚úÖ Found total declared jobs: {}", totalJobs);
                    return totalJobs;
                }
            } catch (Exception e2) {
                log.warn("‚ö†Ô∏è Could not find or parse the total job count element. CSS Error: {}, "
                    + "XPath Error: {}", e.getMessage(), e2.getMessage());
            }
        }
        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ 0, —è–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∞–±–æ —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏
        return 0;
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É.
     * –î–∏–Ω–∞–º—ñ—á–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î –≤—Å—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó, –æ—Ä—ñ—î–Ω—Ç—É—é—á–∏—Å—å –Ω–∞ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å,
     * –∑–∞—è–≤–ª–µ–Ω—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –ø—ñ—Å–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤.
     *
     * @param driver            WebDriver
     * @param totalJobsExpected –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∞–∫–∞–Ω—Å—ñ–π, —è–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏.
     */
    public void loadAllAvailableJobs(WebDriver driver, int totalJobsExpected) {
        log.info("üîÑ Loading jobs: expected {}", totalJobsExpected);
        if (totalJobsExpected == 0) {
            log.warn("‚ö†Ô∏è Expected job count is 0, skipping dynamic loading.");
            // –ú–æ–∂–Ω–∞ –≤–∏–∫–æ–Ω–∞—Ç–∏ –æ–¥–∏–Ω —Å–∫—Ä–æ–ª –ø—Ä–æ –≤—Å—è–∫ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –Ω–µ –∑–Ω–∞–π—à–æ–≤—Å—è
            ((JavascriptExecutor) driver).executeScript("window.scrollTo(0, document.body"
                + ".scrollHeight);");
            sleep(scrollDelay);
            return;
        }

        int currentJobCount = 0;
        int attemptsWithNoNewJobs = 0;
        final int MAX_ATTEMPTS_WITH_NO_NEW_JOBS = 3; // –ó–∞–ø–æ–±—ñ–∂–Ω–∏–∫ –≤—ñ–¥ –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª—É

        // –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ –∫–Ω–æ–ø–∫—É "Load More" –æ–¥–∏–Ω —Ä–∞–∑
        WebElement loadMoreButton = findLoadMoreButton(driver);
        if (loadMoreButton != null && isButtonClickable(loadMoreButton)) {
            log.debug("üîò Found 'Load More' button, clicking once...");
            try {
                ((JavascriptExecutor) driver).executeScript("arguments[0].click();",
                    loadMoreButton);
                sleep(scrollDelay);
            } catch (Exception e) {
                log.warn("‚ö†Ô∏è Could not click 'Load More' button: {}", e.getMessage());
            }
        } else {
            log.debug("üìú 'Load More' button not found, will use scrolling only.");
        }

        // –¢–µ–ø–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —Å–∫—Ä–æ–ª—ñ–Ω–≥ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ—à—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É
        while (currentJobCount < totalJobsExpected && attemptsWithNoNewJobs < MAX_ATTEMPTS_WITH_NO_NEW_JOBS) {
            currentJobCount = driver.findElements(By.cssSelector(JOB_CARD_SELECTOR)).size();

            // –õ–æ–≥—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –∫–æ–∂–Ω—ñ 50 –≤–∞–∫–∞–Ω—Å—ñ–π, —â–æ–± –∑–º–µ–Ω—à–∏—Ç–∏ —Å–ø–∞–º
            if (currentJobCount % 50 == 0 || currentJobCount >= totalJobsExpected) {
                log.info("... Current job count: {} / {}", currentJobCount, totalJobsExpected);
            }

            if (currentJobCount >= totalJobsExpected) {
                log.debug("‚úÖ All expected jobs seem to be loaded.");
                break;
            }

            // –ü—Ä–æ—Å—Ç–æ —Å–∫—Ä–æ–ª–∏–º–æ –≤–Ω–∏–∑
            ((JavascriptExecutor) driver).executeScript("window.scrollTo(0, document.body"
                + ".scrollHeight);");
            sleep(scrollDelay);

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∑'—è–≤–∏–ª–∏—Å—è –Ω–æ–≤—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó
            int newJobCount = driver.findElements(By.cssSelector(JOB_CARD_SELECTOR)).size();
            if (newJobCount == currentJobCount) {
                attemptsWithNoNewJobs++;
                if (attemptsWithNoNewJobs == 1) {
                    log.debug("‚ö†Ô∏è No new jobs loaded. Attempt {} of {}.", attemptsWithNoNewJobs,
                        MAX_ATTEMPTS_WITH_NO_NEW_JOBS);
                }
            } else {
                attemptsWithNoNewJobs = 0; // –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫, —è–∫—â–æ –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–≤—Å—è
            }
        }

        log.info("‚úÖ Loading finished. Final count: {}",
            driver.findElements(By.cssSelector(JOB_CARD_SELECTOR)).size());
    }


    public void sleep(long milliseconds) {
        try {
            Thread.sleep(milliseconds);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }
}
