package com.scrapper.service;

import com.scrapper.util.ScrapingSelectors;
import com.scrapper.validation.Validation;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;

/**
 * –°–µ—Ä–≤—ñ—Å –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∞–º–∏
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ Load More –∫–Ω–æ–ø–∫–∏, –ø—Ä–æ–∫—Ä—É—Ç–∫—É, –ø–æ—à—É–∫ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —Ç–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ —Å–µ–ª–µ–∫—Ç–æ—Ä–∏
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class PageInteractionService {

    @Value("${scraping.selenium.scroll.delay:3000}")
    private long scrollDelay;

    @Value("${scraping.selenium.scroll.max-attempts:8}")
    private int maxScrollAttempts;

    @Value("${scraping.selenium.scroll.max-no-new-jobs:2}")
    private int maxNoNewJobsAttempts;

    private static final String LOAD_MORE_SELECTOR = ScrapingSelectors.LOAD_MORE_BUTTON[0];
    private static final String JOB_CARD_SELECTOR = ScrapingSelectors.JOB_CARD[0];

    /**
     * –ì—ñ–±—Ä–∏–¥–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥: Load More + –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
     */
    public boolean loadContentWithHybridApproach(WebDriver driver, List<String> jobFunctions) {
        log.info("üîÑ Starting content loading...");
        
        try {
            // –ö—Ä–æ–∫ 1: Load More –∫–Ω–æ–ø–∫–∞ (–æ–¥–∏–Ω —Ä–∞–∑)
            clickLoadMoreButtonOnce(driver);
            
            // –ö—Ä–æ–∫ 2: –ü—Ä–æ–∫—Ä—É—Ç–∫–∞
            scrollToLoadMore(driver, jobFunctions);
            
            return true;
            
        } catch (Exception e) {
            log.error("‚ùå Error during content loading: {}", e.getMessage());
            return false;
        }
    }

    /**
     * –ù–∞—Ç–∏—Å–∫–∞—î –∫–Ω–æ–ø–∫—É Load More –æ–¥–∏–Ω —Ä–∞–∑
     */
    private boolean clickLoadMoreButtonOnce(WebDriver driver) {
        log.info("üîò Attempting to click Load More button...");
        
        try {
            WebElement loadMoreButton = findLoadMoreButton(driver);
            
            if (loadMoreButton == null) {
                log.info("‚ÑπÔ∏è Load More button not found, skipping");
                return false;
            }
            
            loadMoreButton.click();
            sleep(2000); // –ó–º–µ–Ω—à–µ–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ Load More
            
            log.info("‚úÖ Load More button clicked");
            return true;
            
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Error clicking Load More button: {}", e.getMessage());
            return false;
        }
    }

    /**
     * –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –∫–Ω–æ–ø–∫—É Load More
     */
    private WebElement findLoadMoreButton(WebDriver driver) {
        String[] loadMoreSelectors = {
            LOAD_MORE_SELECTOR,
            "button:contains('Load More')",
            "button:contains('Show More')",
            "button:contains('Load')",
            "a:contains('Load More')",
            "a:contains('Show More')",
            "[data-testid*='load-more']",
            "[data-testid*='show-more']",
            ".load-more",
            ".show-more",
            "button[class*='load']",
            "button[class*='more']",
            "a[class*='load']",
            "a[class*='more']"
        };
        
        for (String selector : loadMoreSelectors) {
            try {
                List<WebElement> buttons = driver.findElements(By.cssSelector(selector));
                if (!buttons.isEmpty()) {
                    WebElement button = buttons.get(0);
                    if (button.isDisplayed() && button.isEnabled()) {
                        log.info("‚úÖ Load More button found with selector: '{}'", selector);
                        return button;
                    }
                }
            } catch (Exception e) {
                log.debug("‚ö†Ô∏è Selector '{}' failed: {}", selector, e.getMessage());
            }
        }
        return null;
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –º–æ–∂–Ω–∞ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ –∫–Ω–æ–ø–∫—É
     */
    private boolean isButtonClickable(WebElement button) {
        try {
            return button.isDisplayed() && button.isEnabled();
        } catch (Exception e) {
            return false;
        }
    }

    /**
     * –ù–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É
     */
    private boolean scrollToLoadMore(WebDriver driver, List<String> jobFunctions) {
        log.info("üìú Starting scroll for content loading...");
        
        int previousJobCount = countJobCardsWithFilter(driver, jobFunctions);
        int noNewJobsCount = 0;
        int scrollAttempts = 0;
        
        while (scrollAttempts < maxScrollAttempts && noNewJobsCount < maxNoNewJobsAttempts) {
            try {
                // –°–∫—Ä–æ–ª–∏–º–æ –≤–Ω–∏–∑
                ((JavascriptExecutor) driver).executeScript("window.scrollTo(0, document.body.scrollHeight);");
                sleep(scrollDelay);
                
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–æ–≤—ñ –∫–∞—Ä—Ç–∫–∏ –∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é
                int currentJobCount = countJobCardsWithFilter(driver, jobFunctions);
                
                if (currentJobCount > previousJobCount) {
                    log.info("üîÑ Jobs loaded: {} -> {} (attempt {})", 
                        previousJobCount, currentJobCount, scrollAttempts + 1);
                    previousJobCount = currentJobCount;
                    noNewJobsCount = 0;
                } else {
                    noNewJobsCount++;
                }
                
                scrollAttempts++;
                
            } catch (Exception e) {
                log.warn("‚ö†Ô∏è Error during scroll attempt {}: {}", scrollAttempts + 1, e.getMessage());
                noNewJobsCount++;
            }
        }
        
        log.info("‚úÖ Scroll completed. Attempts: {}, Final count: {}", scrollAttempts, previousJobCount);
        return previousJobCount > 0;
    }

    /**
     * –†–∞—Ö—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞—Ä—Ç–æ–∫ –≤–∞–∫–∞–Ω—Å—ñ–π –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
     */
    private int countJobCards(WebDriver driver) {
        try {
            List<WebElement> cards = driver.findElements(By.cssSelector(JOB_CARD_SELECTOR));
            return cards.size();
        } catch (Exception e) {
            return 0;
        }
    }

    /**
     * –†–∞—Ö—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞—Ä—Ç–æ–∫ –≤–∞–∫–∞–Ω—Å—ñ–π –∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é –∑–∞ job functions
     */
    private int countJobCardsWithFilter(WebDriver driver, List<String> jobFunctions) {
        try {
            List<WebElement> cards = driver.findElements(By.cssSelector(JOB_CARD_SELECTOR));
            
            if (jobFunctions == null || jobFunctions.isEmpty()) {
                return cards.size();
            }
            
            int filteredCount = 0;
            for (WebElement card : cards) {
                String cardText = card.getText().toLowerCase();
                boolean hasMatchingFunction = jobFunctions.stream()
                    .anyMatch(function -> cardText.contains(function.toLowerCase()));
                
                if (hasMatchingFunction) {
                    filteredCount++;
                }
            }
            
            return filteredCount;
        } catch (Exception e) {
            return 0;
        }
    }

    /**
     * –°–ø—Ä–æ–±—É—î–º–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ —Å–µ–ª–µ–∫—Ç–æ—Ä–∏
     */
    public void tryAlternativeSelectors(WebDriver driver) {
        log.info("üîç Testing alternative selectors...");
        
        // –û—Ç—Ä–∏–º—É—î–º–æ HTML —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        String pageSource = driver.getPageSource();
        log.info("üìÑ Page source length: {} characters", pageSource.length());
        
        // –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–û: –ó–∞–ª–∏—à–µ–Ω–æ —Ç—ñ–ª—å–∫–∏ –ø—Ä–∞—Ü—é—é—á—ñ —Å–µ–ª–µ–∫—Ç–æ—Ä–∏
        String[] alternativeSelectors = {
            "div[class*='job']",
            "div[class*='position']", 
            "div[class*='vacancy']",
            "div[class*='card']",
            "div[class*='item']",
            "div[class*='listing']",
            "div[class*='posting']",
            ".job-card",
            ".position-card",
            ".vacancy-card",
            ".job-item",
            ".position-item"
        };
        
        for (String selector : alternativeSelectors) {
            try {
                List<WebElement> elements = driver.findElements(By.cssSelector(selector));
                if (!elements.isEmpty()) {
                    log.info("‚úÖ Alternative selector '{}' found {} elements", selector, elements.size());
                }
            } catch (Exception e) {
                log.debug("‚ö†Ô∏è Alternative selector '{}' failed: {}", selector, e.getMessage());
            }
        }
    }

    /**
     * –ü–æ—à—É–∫ –∫–∞—Ä—Ç–æ–∫ –≤–∞–∫–∞–Ω—Å—ñ–π –∑ –∫—ñ–ª—å–∫–æ–º–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è–º–∏
     */
    public List<WebElement> findJobCardsWithMultipleStrategies(WebDriver driver) {
        log.info("üîç Finding job cards with multiple strategies...");
        
        // –°–ø–æ—á–∞—Ç–∫—É —Ç–µ—Å—Ç—É—î–º–æ –Ω–∞–π–±—ñ–ª—å—à –π–º–æ–≤—ñ—Ä–Ω–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä
        String primarySelector = "[class*='job-card']";
        try {
            List<WebElement> elements = driver.findElements(By.cssSelector(primarySelector));
            log.info("üîç Primary selector '{}' -> found {} elements", primarySelector, elements.size());
            
            if (!elements.isEmpty()) {
                // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ - —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ
                List<WebElement> validElements = Validation.filterValidJobCards(elements);
                log.info("üîç After validation: {} valid elements out of {} total", validElements.size(), elements.size());
                
                if (!validElements.isEmpty()) {
                    log.info("‚úÖ Found {} valid job cards with primary selector: '{}'", validElements.size(), primarySelector);
                    return validElements;
                }
            }
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Primary selector '{}' failed: {}", primarySelector, e.getMessage());
        }
        
        // –°–ø—Ä–æ–±—É—î–º–æ —ñ–Ω—à—ñ —Å–µ–ª–µ–∫—Ç–æ—Ä–∏ –∑ ScrapingSelectors.JOB_CARD
        for (int i = 0; i < ScrapingSelectors.JOB_CARD.length; i++) {
            String selector = ScrapingSelectors.JOB_CARD[i];
            
            // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä, —è–∫–∏–π –≤–∂–µ –ø–µ—Ä–µ–≤—ñ—Ä–∏–ª–∏
            if (selector.equals(primarySelector)) {
                continue;
            }
            
            try {
                List<WebElement> elements = driver.findElements(By.cssSelector(selector));
                log.info("üîç Selector {}: '{}' -> found {} elements", i + 1, selector, elements.size());
                
                if (!elements.isEmpty()) {
                    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ - —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ
                    List<WebElement> validElements = Validation.filterValidJobCards(elements);
                    log.info("üîç After validation: {} valid elements out of {} total", validElements.size(), elements.size());
                    
                    if (!validElements.isEmpty()) {
                        log.info("‚úÖ Found {} valid job cards with selector: '{}'", validElements.size(), selector);
                        return validElements;
                    }
                }
            } catch (Exception e) {
                log.warn("‚ö†Ô∏è Selector '{}' failed: {}", selector, e.getMessage());
            }
        }
        
        // –ê–Ω–∞–ª—ñ–∑ –≤—Å—ñ—Ö div –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        List<WebElement> allDivs = driver.findElements(By.tagName("div"));
        int sampleSize = Math.min(10, allDivs.size());
        for (int i = 0; i < sampleSize; i++) {
            try {
                WebElement div = allDivs.get(i);
                String className = div.getAttribute("class");
                String dataTestId = div.getAttribute("data-testid");
                String tagName = div.getTagName();
                String text = div.getText();
                log.info("üîç Div {}: tag='{}', class='{}', data-testid='{}', text='{}'",
                    i + 1, tagName, className, dataTestId,
                    text.length() > 50 ? text.substring(0, 50) + "..." : text);
            } catch (Exception e) {
                log.warn("‚ö†Ô∏è Error analyzing div {}: {}", i + 1, e.getMessage());
            }
        }
        
        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–µ—Ä—à—ñ 50 div –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        return allDivs.subList(0, Math.min(50, allDivs.size()));
    }

    /**
     * –ü–æ—à—É–∫ –∫–∞—Ä—Ç–æ–∫ –≤–∞–∫–∞–Ω—Å—ñ–π –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –∫–æ–º–ø–∞–Ω—ñ—ó
     */
    public List<WebElement> findJobCardsOnCompanyPage(WebDriver driver) {
        List<WebElement> jobCards = new ArrayList<>();

        try {
            for (String selector : ScrapingSelectors.COMPANY_PAGE_JOBS) {
                List<WebElement> elements = driver.findElements(By.cssSelector(selector));
                if (!elements.isEmpty()) {
                    jobCards.addAll(elements);
                    log.info("‚úÖ Found {} job cards with selector: {}", elements.size(), selector);
                }
            }

            // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
            jobCards = Validation.filterValidJobCards(jobCards);

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Error finding job cards on company page: {}", e.getMessage());
        }

        return jobCards;
    }

    /**
     * –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –ø—Ä—è–º–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤–∞–∫–∞–Ω—Å—ñ—é –≤ –∫–∞—Ä—Ç—Ü—ñ
     */
    public String findDirectJobUrl(WebElement jobCard) {
        try {
            // –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 1: –®—É–∫–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º –∞—Ç—Ä–∏–±—É—Ç–æ–º data-testid
            try {
                WebElement specificLink = jobCard.findElement(By.cssSelector("a[data-testid='job-card-link']"));
                String url = specificLink.getAttribute("href");
                if (url != null && !url.isBlank()) {
                    log.debug("üîç –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 1: –ó–Ω–∞–π–¥–µ–Ω–æ URL –∑–∞ data-testid: {}", url);
                    return url;
                }
            } catch (Exception e) {
                // –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 1 –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∞
            }

            // –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 2: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π –µ–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç–∫–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º
            try {
                WebElement parent = jobCard.findElement(By.xpath(".."));
                if (parent != null && "a".equals(parent.getTagName())) {
                    String url = parent.getAttribute("href");
                    if (url != null && !url.isBlank()) {
                        log.debug("üîç –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 2: –ó–Ω–∞–π–¥–µ–Ω–æ URL —É –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞: {}", url);
                        return url;
                    }
                }
            } catch (Exception e) {
                // –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 2 –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∞
            }

            // –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 3: –®—É–∫–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤ –¥–æ—á—ñ—Ä–Ω—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç–∞—Ö
            try {
                List<WebElement> links = jobCard.findElements(By.tagName("a"));
                for (WebElement link : links) {
                    String url = link.getAttribute("href");
                    if (url != null && !url.isBlank() && url.contains("jobs.techstars.com")) {
                        log.debug("üîç –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 3: –ó–Ω–∞–π–¥–µ–Ω–æ URL —É –¥–æ—á—ñ—Ä–Ω—å–æ–º—É –ø–æ—Å–∏–ª–∞–Ω–Ω—ñ: {}", url);
                        return url;
                    }
                }
            } catch (Exception e) {
                // –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 3 –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∞
            }

            // –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 4: –®—É–∫–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑–∞ –∫–ª–∞—Å–æ–º
            try {
                List<WebElement> links = jobCard.findElements(By.cssSelector("a[class*='job'], a[class*='card'], a[class*='link']"));
                for (WebElement link : links) {
                    String url = link.getAttribute("href");
                    if (url != null && !url.isBlank()) {
                        log.debug("üîç –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 4: –ó–Ω–∞–π–¥–µ–Ω–æ URL –∑–∞ –∫–ª–∞—Å–æ–º: {}", url);
                        return url;
                    }
                }
            } catch (Exception e) {
                // –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 4 –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∞
            }

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Error finding direct job URL: {}", e.getMessage());
        }

        log.warn("‚ö†Ô∏è No direct job URL found in job card");
        return null;
    }

    /**
     * –ù–∞—Ç–∏—Å–∫–∞—î –∫–Ω–æ–ø–∫—É Load More (–ø–æ–≤–Ω–∞ –≤–µ—Ä—Å—ñ—è)
     */
    public void clickLoadMoreButton(WebDriver driver) {
        log.info("üîÑ Looking for Load More button...");
        
        // –†—ñ–∑–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –∫–Ω–æ–ø–∫–∏ "Load More"
        String[] loadMoreSelectors = {
            LOAD_MORE_SELECTOR,
            "button:contains('Load More')",
            "button:contains('Show More')",
            "button:contains('Load')",
            "a:contains('Load More')",
            "a:contains('Show More')",
            "[data-testid*='load-more']",
            "[data-testid*='show-more']",
            ".load-more",
            ".show-more",
            "button[class*='load']",
            "button[class*='more']",
            "a[class*='load']",
            "a[class*='more']"
        };
        
        for (String selector : loadMoreSelectors) {
            try {
                List<WebElement> buttons = driver.findElements(By.cssSelector(selector));
                if (!buttons.isEmpty()) {
                    WebElement button = buttons.get(0);
                    if (button.isDisplayed() && button.isEnabled()) {
                        log.info("‚úÖ Load More button found with selector: '{}'", selector);
                        
                        // –°–∫—Ä–æ–ª–∏–º–æ –¥–æ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–¥ –∫–ª—ñ–∫–æ–º
                        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", button);
                        sleep(1000);
                        
                        button.click();
                        sleep(scrollDelay);
                        log.info("‚úÖ Load More button clicked successfully");
                        return;
                    }
                }
            } catch (Exception e) {
                log.debug("‚ö†Ô∏è Selector '{}' failed: {}", selector, e.getMessage());
            }
        }
        
        // –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –∑–∞ —Ç–µ–∫—Å—Ç–æ–º
        try {
            List<WebElement> allButtons = driver.findElements(By.cssSelector("button, a"));
            for (WebElement button : allButtons) {
                String buttonText = button.getText().toLowerCase();
                if (buttonText.contains("load") || buttonText.contains("more") || buttonText.contains("show")) {
                    if (button.isDisplayed() && button.isEnabled()) {
                        log.info("‚úÖ Load More button found by text: '{}'", buttonText);
                        
                        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", button);
                        sleep(1000);
                        
                        button.click();
                        sleep(scrollDelay);
                        log.info("‚úÖ Load More button clicked successfully");
                        return;
                    }
                }
            }
        } catch (Exception e) {
            log.debug("‚ö†Ô∏è Text-based button search failed: {}", e.getMessage());
        }
        
        log.warn("‚ö†Ô∏è No Load More button found");
    }

    /**
     * –°–∫—Ä–æ–ª–∏—Ç—å –¥–æ –Ω–∏–∑—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏
     */
    public void scrollToBottom(WebDriver driver) {
        log.info("üìú Starting scroll to bottom process...");
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞—Ä—Ç–æ–∫
        int initialJobCount = driver.findElements(By.cssSelector(JOB_CARD_SELECTOR)).size();
        log.info("üîç Initial job cards found: {}", initialJobCount);
        
        // –°–ø—Ä–æ–±—É—î–º–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ —Å–µ–ª–µ–∫—Ç–æ—Ä–∏
        if (initialJobCount == 0) {
            log.warn("‚ö†Ô∏è Primary selector found 0 cards, trying alternatives...");
            tryAlternativeSelectors(driver);
        }
        
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≥—ñ–±—Ä–∏–¥–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ (–±–µ–∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –≤–∏–ø–∞–¥–∫—É)
        loadContentWithHybridApproach(driver, null);
    }

    /**
     * –£—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è –∑–∞—Ç—Ä–∏–º–∫–∏
     */
    public void sleep(long milliseconds) {
        try {
            Thread.sleep(milliseconds);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            log.warn("‚ö†Ô∏è Sleep interrupted");
        }
    }
}
