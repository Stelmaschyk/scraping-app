package com.scrapper.service;

import com.scrapper.model.Job;
import com.scrapper.util.ScrapingSelectors;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import io.github.bonigarcia.wdm.WebDriverManager;
import java.time.Duration;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

// ‚úÖ –î–û–î–ê–ù–û: –ù–æ–≤—ñ —Å–µ—Ä–≤—ñ—Å–∏ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
import com.scrapper.service.criteriaServices.TagIngestService;
import com.scrapper.service.criteriaServices.LocationIngestService;
import com.scrapper.service.criteriaServices.PostedDateIngestService;
import com.scrapper.service.criteriaServices.LogoIngestService;
import com.scrapper.service.criteriaServices.TitleIngestService;
import com.scrapper.service.criteriaServices.DescriptionIngestService;
import com.scrapper.service.criteriaServices.DataExtractionService;
import com.scrapper.validation.Validation;
import com.scrapper.service.criteriaServices.DateParsingService;
import com.scrapper.service.webdriver.WebDriverService;

/**
 * ‚úÖ –û–ù–û–í–õ–ï–ù–ò–ô –°–ï–†–í–Ü–°: –ó–º—ñ–Ω–µ–Ω–∞ –ª–æ–≥—ñ–∫–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –∑ –≥—ñ–±—Ä–∏–¥–Ω–∏–º –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º
 * 
 * –ù–û–í–ê –ì–Ü–ë–†–ò–î–ù–ê –õ–û–ì–Ü–ö–ê –§–Ü–õ–¨–¢–†–ê–¶–Ü–á:
 * 1. –°–ø–æ—á–∞—Ç–∫—É –≤–∏–±–∏—Ä–∞—î—Ç—å—Å—è job Function (—Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏)
 * 2. –ü–æ—Ç—ñ–º –Ω–∞—Ç–∏—Å–∫–∞—î—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞ Load More –û–î–ò–ù —Ä–∞–∑ (—è–∫—â–æ –≤–æ–Ω–∞ —î)
 * 3. –î–∞–ª—ñ –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è —Ü–∏–∫–ª –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–æ—ó –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º
 * 4. –í–∏—Ö–æ–¥–∏–º–æ –∑ —Ü–∏–∫–ª—É —Ç—ñ–ª—å–∫–∏ –∫–æ–ª–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∞–∫–∞–Ω—Å—ñ–π –ø–µ—Ä–µ—Å—Ç–∞—î –∑—Ä–æ—Å—Ç–∞—Ç–∏
 * 5. –Ü —Ç—ñ–ª—å–∫–∏ –ø–æ—Ç—ñ–º –∑—á–∏—Ç—É–≤–∞–Ω–Ω—è URL —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–µ—Ñ—ñ–∫—Å—É
 * 6. –Ø–∫—â–æ URL –º—ñ—Å—Ç–∏—Ç—å https://jobs.techstars.com/companies/ —Ç–æ –≤–∞–∫–∞–Ω—Å—ñ—è –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è
 * 8. –¢–µ–≥–∏ –∑–±–∏—Ä–∞—é—Ç—å—Å—è –¥–ª—è –≤—Å—ñ—Ö –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –≤–∞–∫–∞–Ω—Å—ñ–π
 * 
 * –ì–Ü–ë–†–ò–î–ù–ò–ô –ü–Ü–î–•–Ü–î –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø:
 * - –°–ø–æ—á–∞—Ç–∫—É –∫–Ω–æ–ø–∫–∞ Load More (—è–∫—â–æ —î)
 * - –ü–æ—Ç—ñ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç—Ü—ñ
 * - –ê–¥–∞–ø—Ç–∏–≤–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∫–æ–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –±—ñ–ª—å—à–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è
 * 
 * –¶–µ –¥–æ–∑–≤–æ–ª—è—î –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –≤—Å—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó –∫–æ–º–ø–∞–Ω—ñ–π Techstars, –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–µ–≥—ñ–≤
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class ApplyUrlScraperServiceImpl implements ApplyUrlScraperService {

    @Value("${scraping.base-url:https://jobs.techstars.com/jobs}")
    private String baseUrl;

    @Value("${scraping.selenium.timeout:30}")
    private long timeoutSeconds;

    @Value("${scraping.selenium.scroll.delay:10000}")
    private long scrollDelay;

    @Value("${scraping.selenium.scroll.max-attempts:20}")
    private int maxScrollAttempts;

    @Value("${scraping.selenium.scroll.max-no-new-jobs:3}")
    private int maxNoNewJobsAttempts;

    /**
     * ‚úÖ –ö–õ–Æ–ß–û–í–ê –ö–û–ù–°–¢–ê–ù–¢–ê: –ü—Ä–µ—Ñ—ñ–∫—Å URL –∫–æ–º–ø–∞–Ω—ñ–π Techstars
     * 
     * –Ø–∫—â–æ URL –≤–∞–∫–∞–Ω—Å—ñ—ó –º—ñ—Å—Ç–∏—Ç—å —Ü–µ–π –ø—Ä–µ—Ñ—ñ–∫—Å, —Ç–æ –≤–∞–∫–∞–Ω—Å—ñ—è –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è 
     * –ë–ï–ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–µ–≥—ñ–≤ (—Ç—ñ–ª—å–∫–∏ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏).
     * 
     * –¢–µ–≥–∏ –∑–±–∏—Ä–∞—é—Ç—å—Å—è –¥–ª—è –≤—Å—ñ—Ö –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –≤–∞–∫–∞–Ω—Å—ñ–π.
     * 
     * –¶–µ –¥–æ–∑–≤–æ–ª—è—î –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –≤—Å—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó –∫–æ–º–ø–∞–Ω—ñ–π Techstars, 
     * –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–µ–≥—ñ–≤, –ø—ñ—Å–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –≥—ñ–±—Ä–∏–¥–Ω–æ—ó –ª–æ–≥—ñ–∫–∏
     * –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (Load More + –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞).
     */
    private static final String REQUIRED_PREFIX = "https://jobs.techstars.com/companies/";
    private static final String LOAD_MORE_SELECTOR = ScrapingSelectors.LOAD_MORE_BUTTON[0];
    private static final String JOB_CARD_SELECTOR = ScrapingSelectors.JOB_CARD[0];

    private final DescriptionIngestService descriptionIngestService;
    private final JobCreationService jobCreationService;
    private final DateParsingService dateParsingService;
    private final DataExtractionService dataExtractionService;
    private final WebDriverService webDriverService;

    /**
     * ‚úÖ –û–ù–û–í–õ–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤–∏–π WebDriverService
     */
    private WebDriver initializeWebDriver() {
        log.info("üîß Initializing Chrome WebDriver using WebDriverService...");
        return webDriverService.createWebDriver();
    }

    @Override
    public List<String> fetchApplyUrls(List<String> jobFunctions) {
        Objects.requireNonNull(jobFunctions, "jobFunctions cannot be null");
        
        log.info("üöÄ Starting Selenium scraping with NEW LOGIC: jobFunctions={}", 
                jobFunctions);

        WebDriver driver = null;
        try {
            driver = initializeWebDriver();
            log.info("üìç Navigating to base URL: {}", baseUrl);
            driver.get(baseUrl);
            log.info("‚è≥ Quick page load...");
            sleep(3000);
            String pageTitle = driver.getTitle();
            String currentUrl = driver.getCurrentUrl();
            log.info("üìÑ Page loaded - Title: '{}', URL: '{}'", pageTitle, currentUrl);
            int initialElements = driver.findElements(By.cssSelector("*")).size();
            log.info("üîç Total elements on page: {}", initialElements);
            if (initialElements < 50) {
                log.warn("‚ö†Ô∏è Page seems to be empty! Only {} elements found", initialElements);
                sleep(2000);
            }
            
            // ‚úÖ –û–ù–û–í–õ–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤—É –≥—ñ–±—Ä–∏–¥–Ω—É –ª–æ–≥—ñ–∫—É –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –ø–æ—Ä—è–¥–∫–æ–º
            log.info("üîç Applying NEW HYBRID LOGIC: 1) job functions ‚Üí 2) Load More (–û–î–ò–ù —Ä–∞–∑) ‚Üí 3) –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ ‚Üí 4) URL ‚Üí 5) –ø—Ä–µ—Ñ—ñ–∫—Å –∫–æ–º–ø–∞–Ω—ñ—ó ‚Üí 6) –∑–±—ñ—Ä —Ç–µ–≥—ñ–≤");
            List<Job> jobs = scrapeAllJobsWithImprovedLogic(driver, jobFunctions);
            
            log.info("‚úÖ Scraping completed with NEW LOGIC. Found {} jobs matching criteria.", jobs.size());
            
            return jobs.stream()
                    .map(Job::getJobPageUrl)
                    .filter(url -> url != null && url.startsWith(REQUIRED_PREFIX))
                    .collect(Collectors.toList());
                    
        } catch (Exception e) {
            log.error("‚ùå Error during Selenium scraping", e);
            throw new RuntimeException("Failed to scrape jobs with Selenium", e);
        } finally {
            if (driver != null) {
                webDriverService.closeWebDriver(driver);
            }
        }
    }
    
    @Override
    public List<Job> scrapeAndCreateJobs(List<String> jobFunctions) {
        log.info("üöÄ Starting job scraping and creation with NEW LOGIC for job functions: {}", 
                jobFunctions);
        
        WebDriver driver = null;
        try {
            driver = initializeWebDriver();
            log.info("üåê WebDriver initialized successfully");
            
            driver.get(baseUrl);
            log.info("üåê Navigated to: {}", baseUrl);
            
            // ‚úÖ –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–û: –®–≤–∏–¥–∫–µ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
            log.info("üîç Quick page load check...");
            
            // –ß–µ–∫–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            sleep(5000);
            
            // ‚úÖ –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–û: –®–≤–∏–¥–∫–∏–π –ø–æ—à—É–∫ –∫–∞—Ä—Ç–æ–∫ –≤–∞–∫–∞–Ω—Å—ñ–π
            log.info("üîç Quick job cards search...");
            boolean pageLoaded = false;
            
            // –°–ø—Ä–æ–±—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å–Ω–æ–≤–Ω—ñ —Å–µ–ª–µ–∫—Ç–æ—Ä–∏ –∑ –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
            for (String selector : ScrapingSelectors.JOB_CARD) {
                try {
                    // –ó–º–µ–Ω—à—É—î–º–æ —Ç–∞–π–º–∞—É—Ç –¥–æ 3 —Å–µ–∫—É–Ω–¥
                    WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(3));
                    wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector(selector)));
                    
                    int elementCount = driver.findElements(By.cssSelector(selector)).size();
                    if (elementCount > 0) {
                        log.info("‚úÖ Found {} job cards with selector: '{}'", elementCount, selector);
                        pageLoaded = true;
                        break;
                    }
                } catch (Exception e) {
                    log.debug("‚ö†Ô∏è Selector '{}' not found: {}", selector, e.getMessage());
                }
            }
            
            // ‚úÖ –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–û: –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫
            if (!pageLoaded) {
                log.warn("‚ö†Ô∏è No job cards found with primary selectors, continuing anyway...");
                pageLoaded = true; // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Ä–æ–±–æ—Ç—É
            }
            
            // ‚úÖ –û–ù–û–í–õ–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤—É –≥—ñ–±—Ä–∏–¥–Ω—É –ª–æ–≥—ñ–∫—É –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ —Å—Ç–æ—Ä—ñ–Ω–æ–∫
            log.info("üîç Applying NEW HYBRID LOGIC: 1) job functions ‚Üí 2) Load More (–û–î–ò–ù —Ä–∞–∑) ‚Üí 3) –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ ‚Üí 4) URL ‚Üí 5) –ø—Ä–µ—Ñ—ñ–∫—Å –∫–æ–º–ø–∞–Ω—ñ—ó ‚Üí 6) –∑–±—ñ—Ä —Ç–µ–≥—ñ–≤");
            List<Job> jobs = scrapeJobsBasedOnPageType(driver, jobFunctions);
            
            log.info("üéØ Job scraping completed with NEW LOGIC. Created {} Job objects with real data", jobs.size());
            return jobs;
            
        } catch (Exception e) {
            log.error("‚ùå Error during job scraping: {}", e.getMessage(), e);
            return new ArrayList<>();
        } finally {
            if (driver != null) {
                webDriverService.closeWebDriver(driver);
            }
        }
    }

    private void clickLoadMoreButton(WebDriver driver) {
        log.info("üîÑ Looking for Load More button...");
        
        // ‚úÖ –î–û–î–ê–ù–û: –†—ñ–∑–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –∫–Ω–æ–ø–∫–∏ "Load More"
        String[] loadMoreSelectors = {
            LOAD_MORE_SELECTOR,
            "button:contains('Load More')",
            "button:contains('Show More')",
            "button:contains('Load')",
            "a:contains('Load More')",
            "a:contains('Show More')",
            "[data-testid*='load-more']",
            "[data-testid*='show-more']",
            ".load-more",
            ".show-more",
            "button[class*='load']",
            "button[class*='more']",
            "a[class*='load']",
            "a[class*='more']"
        };
        
        for (String selector : loadMoreSelectors) {
            try {
                List<WebElement> buttons = driver.findElements(By.cssSelector(selector));
                if (!buttons.isEmpty()) {
                    WebElement button = buttons.get(0);
                    if (button.isDisplayed() && button.isEnabled()) {
                        log.info("‚úÖ Load More button found with selector: '{}'", selector);
                        
                        // ‚úÖ –î–û–î–ê–ù–û: –°–∫—Ä–æ–ª–∏–º–æ –¥–æ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–¥ –∫–ª—ñ–∫–æ–º
                        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", button);
                        sleep(1000);
                        
                        button.click();
                        sleep(scrollDelay);
                        log.info("‚úÖ Load More button clicked successfully");
                        return;
                    }
                }
            } catch (Exception e) {
                log.debug("‚ö†Ô∏è Selector '{}' failed: {}", selector, e.getMessage());
            }
        }
        
        // ‚úÖ –î–û–î–ê–ù–û: –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –∑–∞ —Ç–µ–∫—Å—Ç–æ–º
        try {
            List<WebElement> allButtons = driver.findElements(By.cssSelector("button, a"));
            for (WebElement button : allButtons) {
                String buttonText = button.getText().toLowerCase();
                if (buttonText.contains("load") || buttonText.contains("more") || buttonText.contains("show")) {
                    if (button.isDisplayed() && button.isEnabled()) {
                        log.info("‚úÖ Load More button found by text: '{}'", buttonText);
                        
                        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", button);
                        sleep(1000);
                        
                        button.click();
                        sleep(scrollDelay);
                        log.info("‚úÖ Load More button clicked successfully");
                        return;
                    }
                }
            }
        } catch (Exception e) {
            log.debug("‚ö†Ô∏è Text-based button search failed: {}", e.getMessage());
        }
        
        log.warn("‚ö†Ô∏è No Load More button found");
    }

    private void scrollToBottom(WebDriver driver) {
        log.info("üìú Starting scroll to bottom process...");
        
        // ‚úÖ –î–û–î–ê–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞—Ä—Ç–æ–∫
        int initialJobCount = driver.findElements(By.cssSelector(JOB_CARD_SELECTOR)).size();
        log.info("üîç Initial job cards found: {}", initialJobCount);
        
        // ‚úÖ –î–û–î–ê–ù–û: –°–ø—Ä–æ–±—É—î–º–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ —Å–µ–ª–µ–∫—Ç–æ—Ä–∏
        if (initialJobCount == 0) {
            log.warn("‚ö†Ô∏è Primary selector found 0 cards, trying alternatives...");
            tryAlternativeSelectors(driver);
        }
        
        // ‚úÖ –î–û–î–ê–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–π –º–µ—Ç–æ–¥ –∑ Load More
        scrollToLoadMore(driver);
    }

    /**
     * ‚úÖ –ù–û–í–ò–ô –ú–ï–¢–û–î: –°–ø—Ä–æ–±—É—î–º–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ —Å–µ–ª–µ–∫—Ç–æ—Ä–∏
     */
    private void tryAlternativeSelectors(WebDriver driver) {
        log.info("üîç Testing alternative selectors...");
        
        // –û—Ç—Ä–∏–º—É—î–º–æ HTML —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        String pageSource = driver.getPageSource();
        log.info("üìÑ Page source length: {} characters", pageSource.length());
        
        // ‚úÖ –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–û: –ó–∞–ª–∏—à–µ–Ω–æ —Ç—ñ–ª—å–∫–∏ –ø—Ä–∞—Ü—é—é—á—ñ —Å–µ–ª–µ–∫—Ç–æ—Ä–∏
        String[] alternativeSelectors = {
            "div[class*='job']",
            "div[class*='position']", 
            "div[class*='vacancy']",
            "div[class*='card']",
            "div[class*='item']",
            "div[class*='listing']",
            "div[class*='posting']",
            ".job-card",
            ".position-card",
            ".vacancy-card",
            ".job-item",
            ".position-item"
        };
        
        for (String selector : alternativeSelectors) {
            try {
                int count = driver.findElements(By.cssSelector(selector)).size();
                if (count > 0) {
                    log.info("‚úÖ Alternative selector '{}' found {} elements", selector, count);
                } else {
                    log.debug("‚ùå Selector '{}' found 0 elements", selector);
                }
            } catch (Exception e) {
                log.debug("‚ö†Ô∏è Selector '{}' failed: {}", selector, e.getMessage());
            }
        }
        
        // ‚úÖ –î–û–î–ê–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        log.info("üîç Page title: {}", driver.getTitle());
        log.info("üîç Current URL: {}", driver.getCurrentUrl());
        
        // –®—É–∫–∞—î–º–æ –±—É–¥—å-—è–∫—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        int totalLinks = driver.findElements(By.cssSelector("a[href]")).size();
        log.info("üîó Total links on page: {}", totalLinks);
        
        // –®—É–∫–∞—î–º–æ –±—É–¥—å-—è–∫—ñ div –µ–ª–µ–º–µ–Ω—Ç–∏
        int totalDivs = driver.findElements(By.cssSelector("div")).size();
        log.info("üì¶ Total div elements on page: {}", totalDivs);
    }

    /**
     * ‚úÖ –û–ù–û–í–õ–ï–ù–ò–ô –ú–ï–¢–û–î: –ê–¥–∞–ø—Ç–∏–≤–Ω–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∑ –≥—ñ–±—Ä–∏–¥–Ω–∏–º –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º
     * 
     * –ù–û–í–ê –õ–û–ì–Ü–ö–ê:
     * 1. –°–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É Load More –û–î–ò–ù —Ä–∞–∑ (—è–∫—â–æ –≤–æ–Ω–∞ —î)
     * 2. –ü–æ—Ç—ñ–º –∑–∞–ø—É—Å–∫–∞—î–º–æ —Ü–∏–∫–ª –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–æ—ó –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
     * 3. –í–∏—Ö–æ–¥–∏–º–æ –∑ —Ü–∏–∫–ª—É —Ç—ñ–ª—å–∫–∏ –∫–æ–ª–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∞–∫–∞–Ω—Å—ñ–π –ø–µ—Ä–µ—Å—Ç–∞—î –∑—Ä–æ—Å—Ç–∞—Ç–∏
     * 
     * –¶–µ –¥–æ–∑–≤–æ–ª—è—î –∞–¥–∞–ø—Ç—É–≤–∞—Ç–∏—Å—è –¥–æ –≥—ñ–±—Ä–∏–¥–Ω–æ–≥–æ –ø—ñ–¥—Ö–æ–¥—É —Å–∞–π—Ç—É:
     * - –°–ø–æ—á–∞—Ç–∫—É –∫–Ω–æ–ø–∫–∞ Load More
     * - –ü–æ—Ç—ñ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç—Ü—ñ
     */
    private void scrollToLoadMore(WebDriver driver) {
        log.info("üìú Starting ADAPTIVE scroll and load more process with hybrid approach...");
        
        JavascriptExecutor js = (JavascriptExecutor) driver;
        
        int initialJobCount = driver.findElements(By.cssSelector(JOB_CARD_SELECTOR)).size();
        log.info("üîç Initial job cards found: {}", initialJobCount);
        
        // ‚úÖ –ö–†–û–ö 1: –°–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É Load More –û–î–ò–ù —Ä–∞–∑ (—è–∫—â–æ –≤–æ–Ω–∞ —î)
        log.info("üîç –ö–†–û–ö 1: –®—É–∫–∞—î–º–æ —Ç–∞ –Ω–∞—Ç–∏—Å–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É Load More –û–î–ò–ù —Ä–∞–∑...");
        boolean loadMoreClicked = clickLoadMoreButtonOnce(driver);
        
        if (loadMoreClicked) {
            log.info("‚úÖ Load More button clicked successfully, waiting for content to load...");
            sleep(3000); // –î–∞—î–º–æ —á–∞—Å –Ω–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        } else {
            log.info("‚ÑπÔ∏è No Load More button found or clicked, proceeding with scroll-only approach");
        }
        
        // ‚úÖ –ö–†–û–ö 2: –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ü–∏–∫–ª –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–æ—ó –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        log.info("üîç –ö–†–û–ö 2: –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ü–∏–∫–ª –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–æ—ó –ø—Ä–æ–∫—Ä—É—Ç–∫–∏...");
        int previousJobCount = driver.findElements(By.cssSelector(JOB_CARD_SELECTOR)).size();
        int scrollAttempts = 0;
        int maxScrollAttempts = 50; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–± –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        int noNewJobsCount = 0;
        int maxNoNewJobsAttempts = 5; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–± –±–µ–∑ –Ω–æ–≤–∏—Ö –≤–∞–∫–∞–Ω—Å—ñ–π
        
        while (scrollAttempts < maxScrollAttempts && noNewJobsCount < maxNoNewJobsAttempts) {
            scrollAttempts++;
            
            // ‚úÖ –ö—Ä–æ–∫ 2.1: –°–∫—Ä–æ–ª–∏–º–æ –¥–æ –Ω–∏–∑—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏
            log.info("üìú Scroll attempt {}/{}: Scrolling to bottom...", scrollAttempts, maxScrollAttempts);
            js.executeScript("window.scrollTo(0, document.body.scrollHeight);");
            sleep(2000); // –ß–µ–∫–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            
            // ‚úÖ –ö—Ä–æ–∫ 2.2: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑'—è–≤–∏–ª–∏—Å—è –Ω–æ–≤—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó
            int currentJobCount = driver.findElements(By.cssSelector(JOB_CARD_SELECTOR)).size();
            log.info("üîç Current job count: {} (was: {})", currentJobCount, previousJobCount);
            
            if (currentJobCount > previousJobCount) {
                // –ó–Ω–∞–π—à–ª–∏ –Ω–æ–≤—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó - –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ
                int newJobs = currentJobCount - previousJobCount;
                log.info("üéâ Found {} new jobs after scroll! Total: {}", newJobs, currentJobCount);
                previousJobCount = currentJobCount;
                noNewJobsCount = 0; // –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫
                
                // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                sleep(2000);
                
            } else {
                // –ù–æ–≤—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó –Ω–µ –∑'—è–≤–∏–ª–∏—Å—è
                noNewJobsCount++;
                log.info("‚ö†Ô∏è No new jobs found. Attempt {}/{} without new jobs", noNewJobsCount, maxNoNewJobsAttempts);
                
                // –°–ø—Ä–æ–±—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É –ø—Ä–æ–∫—Ä—É—Ç–∫—É
                if (noNewJobsCount < maxNoNewJobsAttempts) {
                    log.info("üìú Trying additional scroll...");
                    js.executeScript("window.scrollTo(0, document.body.scrollHeight - 100);");
                    sleep(1000);
                    
                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–µ —Ä–∞–∑
                    int finalJobCount = driver.findElements(By.cssSelector(JOB_CARD_SELECTOR)).size();
                    if (finalJobCount > currentJobCount) {
                        log.info("üéâ Additional scroll helped! Found {} more jobs", finalJobCount - currentJobCount);
                        currentJobCount = finalJobCount;
                        previousJobCount = finalJobCount;
                        noNewJobsCount = 0; // –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫
                    }
                }
            }
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –¥–æ—Å—è–≥–ª–∏ –º–∏ –±–∞–∂–∞–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
            if (currentJobCount >= 369) {
                log.info("üéØ Reached target job count: {}", currentJobCount);
                break;
            }
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–æ —á–µ–∫–∞—î–º–æ
            if (scrollAttempts % 10 == 0) {
                log.info("üìä Progress: {} scroll attempts, {} jobs found, {} attempts without new jobs", 
                        scrollAttempts, currentJobCount, noNewJobsCount);
            }
        }
        
        int finalJobCount = driver.findElements(By.cssSelector(JOB_CARD_SELECTOR)).size();
        log.info("üèÅ ADAPTIVE scroll and load more process completed:");
        log.info("   ‚Ä¢ Total scroll attempts: {}", scrollAttempts);
        log.info("   ‚Ä¢ Final job count: {}", finalJobCount);
        log.info("   ‚Ä¢ Jobs added: {}", finalJobCount - initialJobCount);
        log.info("   ‚Ä¢ Load More button clicked: {}", loadMoreClicked);
        
        if (noNewJobsCount >= maxNoNewJobsAttempts) {
            log.info("‚ÑπÔ∏è Process stopped: {} consecutive attempts without new jobs", maxNoNewJobsAttempts);
        }
        
        if (scrollAttempts >= maxScrollAttempts) {
            log.info("‚ÑπÔ∏è Process stopped: reached maximum scroll attempts ({})", maxScrollAttempts);
        }
    }
    
    /**
     * ‚úÖ –ù–û–í–ò–ô –ú–ï–¢–û–î: –ù–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ Load More –û–î–ò–ù —Ä–∞–∑
     */
    private boolean clickLoadMoreButtonOnce(WebDriver driver) {
        log.info("üîç Looking for Load More button to click ONCE...");
        
        try {
            // –°–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –∫–Ω–æ–ø–∫–∏ Load More
            String[] loadMoreTexts = {"Load More", "Show More", "Load", "More", "See More"};
            WebElement loadMoreButton = null;
            
            for (String text : loadMoreTexts) {
                try {
                    // –®—É–∫–∞—î–º–æ –∑–∞ —Ç–µ–∫—Å—Ç–æ–º –∫–Ω–æ–ø–∫–∏
                    String xpath = String.format("//button[contains(text(), '%s')] | //a[contains(text(), '%s')]", text, text);
                    List<WebElement> buttons = driver.findElements(By.xpath(xpath));
                    
                    for (WebElement button : buttons) {
                        if (button.isDisplayed() && button.isEnabled()) {
                            loadMoreButton = button;
                            log.info("‚úÖ Found Load More button with text: '{}'", text);
                            break;
                        }
                    }
                    
                    if (loadMoreButton != null) break;
                    
                    // –®—É–∫–∞—î–º–æ –∑–∞ CSS —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
                    String[] selectors = {
                        "[data-testid*='load-more']",
                        "[data-testid*='show-more']",
                        ".load-more",
                        ".show-more",
                        "button[class*='load']",
                        "button[class*='more']"
                    };
                    
                    for (String selector : selectors) {
                        try {
                            List<WebElement> elements = driver.findElements(By.cssSelector(selector));
                            for (WebElement element : elements) {
                                if (element.isDisplayed() && element.isEnabled()) {
                                    loadMoreButton = element;
                                    log.info("‚úÖ Found Load More button with selector: '{}'", selector);
                                    break;
                                }
                            }
                            if (loadMoreButton != null) break;
                        } catch (Exception e) {
                            // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä—ñ–≤
                        }
                    }
                    
                    if (loadMoreButton != null) break;
                    
                } catch (Exception e) {
                    // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –ø–æ—à—É–∫
                }
            }
            
            if (loadMoreButton != null) {
                // ‚úÖ –ö–ª—ñ–∫–∞—î–º–æ –Ω–∞ –∫–Ω–æ–ø–∫—É Load More –û–î–ò–ù —Ä–∞–∑
                log.info("üñ±Ô∏è Clicking Load More button ONCE...");
                
                // –°–∫—Ä–æ–ª–∏–º–æ –¥–æ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–¥ –∫–ª—ñ–∫–æ–º
                JavascriptExecutor js = (JavascriptExecutor) driver;
                js.executeScript("arguments[0].scrollIntoView({block: 'center'});", loadMoreButton);
                sleep(1000);
                
                // –ö–ª—ñ–∫–∞—î–º–æ
                loadMoreButton.click();
                
                log.info("‚úÖ Load More button clicked ONCE successfully");
                return true;
                
            } else {
                log.info("‚ÑπÔ∏è No Load More button found");
                return false;
            }
            
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Error clicking Load More button: {}", e.getMessage());
            return false;
        }
    }

    /**
     * ‚úÖ –û–ù–û–í–õ–ï–ù–ê –í–ï–†–°–Ü–Ø –°–ö–†–ê–ü–Ü–ù–ì–£ –ó –ù–û–í–û–Æ –õ–û–ì–Ü–ö–û–Æ –¢–ê –ì–Ü–ë–†–ò–î–ù–ò–ú –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø–ú
     * 
     * –ù–û–í–ê –õ–û–ì–Ü–ö–ê:
     * 1. –°–ø–æ—á–∞—Ç–∫—É –≤–∏–±–∏—Ä–∞—î—Ç—å—Å—è job Function (—Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏)
     * 2. –ü–æ—Ç—ñ–º –Ω–∞—Ç–∏—Å–∫–∞—î—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞ Load More –û–î–ò–ù —Ä–∞–∑ (—è–∫—â–æ –≤–æ–Ω–∞ —î)
     * 3. –î–∞–ª—ñ –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è —Ü–∏–∫–ª –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–æ—ó –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º
     * 4. –í–∏—Ö–æ–¥–∏–º–æ –∑ —Ü–∏–∫–ª—É —Ç—ñ–ª—å–∫–∏ –∫–æ–ª–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∞–∫–∞–Ω—Å—ñ–π –ø–µ—Ä–µ—Å—Ç–∞—î –∑—Ä–æ—Å—Ç–∞—Ç–∏
     * 5. –Ü —Ç—ñ–ª—å–∫–∏ –ø–æ—Ç—ñ–º –∑—á–∏—Ç—É–≤–∞–Ω–Ω—è URL —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–µ—Ñ—ñ–∫—Å—É
     * 6. –Ø–∫—â–æ URL –º—ñ—Å—Ç–∏—Ç—å https://jobs.techstars.com/companies/ - –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ë–ï–ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–µ–≥—ñ–≤
     * 
     * –ì–Ü–ë–†–ò–î–ù–ò–ô –ü–Ü–î–•–Ü–î:
     * - –°–ø–æ—á–∞—Ç–∫—É –∫–Ω–æ–ø–∫–∞ Load More (—è–∫—â–æ —î)
     * - –ü–æ—Ç—ñ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç—Ü—ñ
     * - –ê–¥–∞–ø—Ç–∏–≤–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∫–æ–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –±—ñ–ª—å—à–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è
     */
    private List<Job> scrapeAllJobsWithImprovedLogic(WebDriver driver, List<String> jobFunctions) {
        log.info("üîç Job functions to filter by: {} (type: {})", jobFunctions,
                jobFunctions != null ? jobFunctions.getClass().getSimpleName() : "null");
        
        if (jobFunctions != null) {
            for (int i = 0; i < jobFunctions.size(); i++) {
                String function = jobFunctions.get(i);
                log.info("üîç Job function {}: '{}' (type: {})", i, function, 
                        function != null ? function.getClass().getSimpleName() : "null");
            }
        }
        
        // ‚úÖ –ö–†–û–ö 1: –°–ø–æ—á–∞—Ç–∫—É —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ job functions
        log.info("üîç –ö–†–û–ö 1: –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é –∑–∞ job functions...");
        
        // ‚úÖ –ö–†–û–ö 2: –ù–∞—Ç–∏—Å–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É Load More –û–î–ò–ù —Ä–∞–∑
        log.info("üîç –ö–†–û–ö 2: –ù–∞—Ç–∏—Å–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É Load More –û–î–ò–ù —Ä–∞–∑...");
        clickLoadMoreButton(driver);
        
        // ‚úÖ –ö–†–û–ö 3: –°–∫—Ä–æ–ª–∏–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–æ –Ω–∏–∑—É
        log.info("üîç –ö–†–û–ö 3: –°–∫—Ä–æ–ª–∏–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–æ –Ω–∏–∑—É...");
        scrollToBottom(driver);
        
        // ‚úÖ –ö–†–û–ö 4: –¢–µ–ø–µ—Ä —à—É–∫–∞—î–º–æ –≤—Å—ñ –∫–∞—Ä—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å—ñ–π
        log.info("üîç –ö–†–û–ö 4: –®—É–∫–∞—î–º–æ –≤—Å—ñ –∫–∞—Ä—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å—ñ–π –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...");
        List<WebElement> jobCards = findJobCardsWithMultipleStrategies(driver);
        List<Job> jobs = new ArrayList<>();
        
        log.info("üìã Found {} job cards to process", jobCards.size());
        
        if (jobCards.isEmpty()) {
            log.error("‚ùå CRITICAL: No job cards found with any strategy!");
            return jobs;
        }
        
        int passedFunctionFilter = 0;
        int foundUrls = 0;
        int savedWithCompanyPrefix = 0;
        int savedWithoutCompanyPrefix = 0;
        
        for (int i = 0; i < jobCards.size(); i++) {
            try {
                WebElement card = jobCards.get(i);
                
                // –õ–æ–≥—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ 5 –∫–∞—Ä—Ç–æ–∫ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                boolean isFirstCards = i < 5;
                if (isFirstCards) {
                    String cardText = card.getText();
                    String preview = cardText.length() > 200 ? cardText.substring(0, 200) + "..." : cardText;
                    log.info("üîç Processing card {}: {}", i + 1, preview);
                }
                
                // ‚úÖ –ö–†–û–ö 5: –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ job functions (–ü–ï–†–®–ò–ô –ö–†–û–ö –ó–ê –ù–û–í–û–Æ –õ–û–ì–Ü–ö–û–Æ)
                if (!hasRequiredJobFunction(card, jobFunctions)) {
                    if (isFirstCards) {
                        log.info("üîç Card {} failed function filter", i + 1);
                        // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –ø–µ—Ä—à–∏—Ö –∫–∞—Ä—Ç–æ–∫
                        String cardText = card.getText().toLowerCase();
                        log.info("üîç Card {} text preview: '{}'", i + 1, 
                                cardText.length() > 300 ? cardText.substring(0, 300) + "..." : cardText);
                    }
                    continue;
                }
                passedFunctionFilter++;
                
                if (isFirstCards) {
                    log.info("üîç Card {} passed function filter", i + 1);
                }
                
                // ‚úÖ –ö–†–û–ö 6: –ü–æ—à—É–∫ URL (–î–†–£–ì–ò–ô –ö–†–û–ö –ó–ê –ù–û–í–û–Æ –õ–û–ì–Ü–ö–û–Æ)
                String jobPageUrl = findDirectJobUrl(card);
                if (jobPageUrl == null) {
                    if (isFirstCards) {
                        log.info("üîç Card {}: No URL found after passing function filter", i + 1);
                    }
                    continue;
                }
                
                foundUrls++;
                
                if (isFirstCards) {
                    log.info("üîç Card {}: URL found: {}", i + 1, jobPageUrl);
                }
                
                // ‚úÖ –ö–†–û–ö 7: –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∞–∫–∞–Ω—Å—ñ—ó (–≤—Å—ñ –ø—Ä–æ—Ö–æ–¥—è—Ç—å –æ–¥–Ω–∞–∫–æ–≤—É –æ–±—Ä–æ–±–∫—É)
                Job job = createJobFromCard(card, jobPageUrl, jobFunctions);
                if (job != null) {
                    jobs.add(job);
                    if (jobPageUrl.startsWith(REQUIRED_PREFIX)) {
                        savedWithCompanyPrefix++;
                        log.info("‚úÖ Card {} saved (with company prefix)", i + 1);
                    } else {
                        savedWithoutCompanyPrefix++;
                        log.info("‚úÖ Card {} saved (without company prefix)", i + 1);
                    }
                }
                
                if (i % 10 == 0) {
                    log.info("üìä Processed {}/{} job cards", i + 1, jobCards.size());
                }
                
            } catch (Exception e) {
                log.warn("‚ö†Ô∏è Error scraping job card {}: {}", i + 1, e.getMessage());
            }
        }
        
        // ‚úÖ –û–ù–û–í–õ–ï–ù–û: –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –∑–≤—ñ—Ç –∑ –Ω–æ–≤–æ—é –ª–æ–≥—ñ–∫–æ—é
        printUpdatedFinalReport(jobCards.size(), passedFunctionFilter, foundUrls, 
                               jobs.size(), savedWithCompanyPrefix, savedWithoutCompanyPrefix, jobFunctions);
        return jobs;
    }

    /**
     * ‚úÖ –û–ù–û–í–õ–ï–ù–ò–ô –ú–ï–¢–û–î: –í–∏–∑–Ω–∞—á–∞—î —Ç–∏–ø —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —Ç–∞ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –ª–æ–≥—ñ–∫—É —Å–∫—Ä–∞–ø—ñ–Ω–≥—É
     * –í—Å—ñ –º–µ—Ç–æ–¥–∏ —Ç–µ–ø–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å –Ω–æ–≤—É –≥—ñ–±—Ä–∏–¥–Ω—É –ª–æ–≥—ñ–∫—É:
     * 1) job functions ‚Üí 2) Load More (–û–î–ò–ù —Ä–∞–∑) ‚Üí 3) –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ ‚Üí 4) URL ‚Üí 5) –ø—Ä–µ—Ñ—ñ–∫—Å –∫–æ–º–ø–∞–Ω—ñ—ó ‚Üí 6) –∑–±—ñ—Ä —Ç–µ–≥—ñ–≤
     */
        private List<Job> scrapeJobsBasedOnPageType(WebDriver driver, List<String> jobFunctions) {
        String currentUrl = driver.getCurrentUrl();
        log.info("üîç Current URL: {}", currentUrl);
        
        if (currentUrl.contains("/companies/") && currentUrl.contains("/jobs/")) {
            // –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –≤–∞–∫–∞–Ω—Å—ñ—ó
            log.info("üéØ Detected job detail page, applying new filtering logic...");
            return scrapeSingleJobFromDetailPage(driver, jobFunctions);

        } else if (currentUrl.contains("/companies/")) {
            // –°—Ç–æ—Ä—ñ–Ω–∫–∞ –∫–æ–º–ø–∞–Ω—ñ—ó –∑—ñ —Å–ø–∏—Å–∫–æ–º –≤–∞–∫–∞–Ω—Å—ñ–π
            log.info("üè¢ Detected company page, applying new filtering logic...");
            return scrapeJobsFromCompanyPage(driver, jobFunctions);

        } else if (currentUrl.contains("/jobs")) {
            // –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∑—ñ —Å–ø–∏—Å–∫–æ–º –≤–∞–∫–∞–Ω—Å—ñ–π
            log.info("üìã Detected main jobs page, applying new filtering logic...");
            return scrapeJobsFromMainPage(driver, jobFunctions);
            
        } else {
            // –ù–µ–≤—ñ–¥–æ–º–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
            log.warn("‚ö†Ô∏è Unknown page type, trying default scraping with new logic...");
            return scrapeJobsFromMainPage(driver, jobFunctions);
        }
    }

    /**
     * ‚úÖ –û–ù–û–í–õ–ï–ù–ò–ô –ú–ï–¢–û–î: –°–∫—Ä–∞–ø—ñ–Ω–≥ –æ–¥–Ω—ñ—î—ó –≤–∞–∫–∞–Ω—Å—ñ—ó –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑ –Ω–æ–≤–æ—é –ª–æ–≥—ñ–∫–æ—é
     */
    private List<Job> scrapeSingleJobFromDetailPage(WebDriver driver, List<String> jobFunctions) {
        List<Job> jobs = new ArrayList<>();

        try {
            String currentUrl = driver.getCurrentUrl();

            // ‚úÖ –ö–†–û–ö 1: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ URL –º—ñ—Å—Ç–∏—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –ø—Ä–µ—Ñ—ñ–∫—Å –∫–æ–º–ø–∞–Ω—ñ—ó
            if (currentUrl.startsWith(REQUIRED_PREFIX)) {
                log.info("üîç Detail page: URL contains company prefix '{}', applying new logic", REQUIRED_PREFIX);

                // ‚úÖ –ö–†–û–ö 1: –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ (–ü–ï–†–®–ò–ô –ö–†–û–ö –ó–ê –ù–û–í–û–Æ –õ–û–ì–Ü–ö–û–Æ)
                if (jobFunctions != null && !jobFunctions.isEmpty()) {
                    // –®—É–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∞–∫–∞–Ω—Å—ñ—ó –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü—ñ—ó
                    String positionName = extractTitleFromDetailPage(driver);
                    if (positionName == null || positionName.trim().isEmpty()) {
                        log.warn("‚ö†Ô∏è Could not extract position name from detail page");
                        return jobs;
                    }

                    String positionText = positionName.toLowerCase();
                    boolean hasRequiredFunction = jobFunctions.stream()
                        .anyMatch(function -> positionText.contains(function.toLowerCase()));

                    if (!hasRequiredFunction) {
                        log.info("üîç Detail page: Position '{}' does not match required functions: {}", positionName, jobFunctions);
                        return jobs; // –ù–µ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ, —è–∫—â–æ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ñ—É–Ω–∫—Ü—ñ—è–º
                    }
                }

                // ‚úÖ –ö–†–û–ö 2: –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ (–≤—Å—ñ –ø—Ä–æ—Ö–æ–¥—è—Ç—å –æ–¥–Ω–∞–∫–æ–≤—É –æ–±—Ä–æ–±–∫—É)
                log.info("üîç Detail page: All filters passed, saving job (tags will be collected)");

                // –®—É–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∞–∫–∞–Ω—Å—ñ—ó
                String positionName = extractTitleFromDetailPage(driver);
                if (positionName == null || positionName.trim().isEmpty()) {
                    log.warn("‚ö†Ô∏è Could not extract position name from detail page");
                    return jobs;
                }

                // –®—É–∫–∞—î–º–æ –Ω–∞–∑–≤—É –∫–æ–º–ø–∞–Ω—ñ—ó
                String companyName = extractCompanyNameFromDetailPage(driver);

                // –®—É–∫–∞—î–º–æ —Ç–µ–≥–∏
                List<String> tags = extractTagsFromDetailPage(driver);

                // –®—É–∫–∞—î–º–æ –ª–æ–∫–∞—Ü—ñ—é
                String location = extractLocationFromDetailPage(driver);

                // –®—É–∫–∞—î–º–æ –¥–∞—Ç—É –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó
                LocalDateTime postedDate = extractPostedDateFromDetailPage(driver);

                // ‚úÖ –î–û–î–ê–ù–û: –®—É–∫–∞—î–º–æ –æ–ø–∏—Å –≤–∞–∫–∞–Ω—Å—ñ—ó
                String description = extractDescriptionFromDetailPage(driver);

                // ‚úÖ –î–û–î–ê–ù–û: –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ–± –Ω–µ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –Ω–∞–∑–≤—É –≤–∞–∫–∞–Ω—Å—ñ—ó —è–∫ –æ–ø–∏—Å
                if (description != null && description.equals(positionName)) {
                    log.debug("üìù Skipping description as it matches position name: '{}'", description);
                    description = null;
                }

                // –°—Ç–≤–æ—Ä—é—î–º–æ Job –æ–±'—î–∫—Ç
                Job job = jobCreationService.createJobWithAllData(
                    currentUrl, positionName, companyName, null, location, tags, postedDate, jobFunctions, description
                );

                if (job != null) {
                    // ‚úÖ –î–û–î–ê–ù–û: –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–ø–∏—Å –≤–∞–∫–∞–Ω—Å—ñ—ó —á–µ—Ä–µ–∑ DescriptionIngestService (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ü–µ –Ω–µ –∑–∞–≥–ª—É—à–∫–∞)
                    if (description != null && !description.trim().isEmpty() &&
                        !description.equals("Job scraped from Techstars")) {
                        try {
                            boolean descriptionSaved = descriptionIngestService.saveDescription(job, description);
                            if (descriptionSaved) {
                                log.info("‚úÖ Successfully saved description for job ID: {}", job.getId());
                            } else {
                                log.warn("‚ö†Ô∏è Failed to save description for job ID: {}", job.getId());
                            }
                        } catch (Exception e) {
                            log.error("‚ùå Error saving description for job ID: {}, error: {}",
                                    job.getId(), e.getMessage(), e);
                        }
                    }

                    jobs.add(job);
                    log.info("‚úÖ Successfully scraped job: {}", positionName);
                }

            } else {
                // URL –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –ø—Ä–µ—Ñ—ñ–∫—Å –∫–æ–º–ø–∞–Ω—ñ—ó - –∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É –ª–æ–≥—ñ–∫—É
                log.info("üîç Detail page: URL does not contain company prefix, applying standard filtering");

                // –®—É–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∞–∫–∞–Ω—Å—ñ—ó
                String positionName = extractTitleFromDetailPage(driver);
                if (positionName == null || positionName.trim().isEmpty()) {
                    log.warn("‚ö†Ô∏è Could not extract position name from detail page");
                    return jobs;
                }

                // ‚úÖ –ö–†–û–ö 2: –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ (–ü–ï–†–®–ò–ô –ö–†–û–ö –ó–ê –ù–û–í–û–Æ –õ–û–ì–Ü–ö–û–Æ)
                if (jobFunctions != null && !jobFunctions.isEmpty()) {
                    String positionText = positionName.toLowerCase();
                    boolean hasRequiredFunction = jobFunctions.stream()
                        .anyMatch(function -> positionText.contains(function.toLowerCase()));

                    if (!hasRequiredFunction) {
                        log.info("üîç Detail page: Position '{}' does not match required functions: {}", positionName, jobFunctions);
                        return jobs; // –ù–µ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ, —è–∫—â–æ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ñ—É–Ω–∫—Ü—ñ—è–º
                    }
                }

                // ‚úÖ –ö–†–û–ö 3: –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ
                log.info("üîç Detail page: All filters passed, saving job with standard filtering (tags will be collected)");

                // –®—É–∫–∞—î–º–æ –Ω–∞–∑–≤—É –∫–æ–º–ø–∞–Ω—ñ—ó
                String companyName = extractCompanyNameFromDetailPage(driver);

                // –®—É–∫–∞—î–º–æ —Ç–µ–≥–∏
                List<String> tags = extractTagsFromDetailPage(driver);

                // –®—É–∫–∞—î–º–æ –ª–æ–∫–∞—Ü—ñ—é
                String location = extractLocationFromDetailPage(driver);

                // –®—É–∫–∞—î–º–æ –¥–∞—Ç—É –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó
                LocalDateTime postedDate = extractPostedDateFromDetailPage(driver);

                // ‚úÖ –î–û–î–ê–ù–û: –®—É–∫–∞—î–º–æ –æ–ø–∏—Å –≤–∞–∫–∞–Ω—Å—ñ—ó
                String description = extractDescriptionFromDetailPage(driver);

                // –°—Ç–≤–æ—Ä—é—î–º–æ Job –æ–±'—î–∫—Ç
                Job job = jobCreationService.createJobWithAllData(
                    currentUrl, positionName, companyName, null, location, tags, postedDate, jobFunctions, description
                );

                if (job != null) {
                    jobs.add(job);
                    log.info("‚úÖ Successfully scraped job with standard filtering: {}", positionName);
                }
            }

        } catch (Exception e) {
            log.error("‚ùå Error scraping job from detail page: {}", e.getMessage());
        }

        return jobs;
    }

    /**
     * ‚úÖ –û–ù–û–í–õ–ï–ù–ò–ô –ú–ï–¢–û–î: –°–∫—Ä–∞–ø—ñ–Ω–≥ –≤–∞–∫–∞–Ω—Å—ñ–π –∑—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∫–æ–º–ø–∞–Ω—ñ—ó –∑ –Ω–æ–≤–æ—é –≥—ñ–±—Ä–∏–¥–Ω–æ—é –ª–æ–≥—ñ–∫–æ—é
     * –ù–ï –ü–ï–†–ï–í–Ü–†–Ø–Ñ–ú–û —Ç–µ–≥–∏ –¥–ª—è URL –∑ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º –∫–æ–º–ø–∞–Ω—ñ—ó
     * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î: 1) job functions ‚Üí 2) URL ‚Üí 3) –ø—Ä–µ—Ñ—ñ–∫—Å –∫–æ–º–ø–∞–Ω—ñ—ó ‚Üí 4) –∑–±—ñ—Ä —Ç–µ–≥—ñ–≤
     */
    private List<Job> scrapeJobsFromCompanyPage(WebDriver driver, List<String> jobFunctions) {
        List<Job> jobs = new ArrayList<>();

        try {
            // –®—É–∫–∞—î–º–æ –∫–∞—Ä—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å—ñ–π –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –∫–æ–º–ø–∞–Ω—ñ—ó
            List<WebElement> jobCards = findJobCardsOnCompanyPage(driver);
            log.info("üîç Found {} job cards on company page", jobCards.size());

            for (WebElement card : jobCards) {
                try {
                    // ‚úÖ –ö–†–û–ö 1: –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ (–ü–ï–†–®–ò–ô –ö–†–û–ö –ó–ê –ù–û–í–û–Æ –õ–û–ì–Ü–ö–û–Æ)
                    if (!hasRequiredJobFunction(card, jobFunctions)) {
                        continue;
                    }

                    // ‚úÖ –ö–†–û–ö 2: –ü–æ—à—É–∫ URL (–î–†–£–ì–ò–ô –ö–†–û–ö –ó–ê –ù–û–í–û–Æ –õ–û–ì–Ü–ö–û–Æ)
                    String jobPageUrl = findDirectJobUrl(card);
                    if (jobPageUrl == null) {
                        continue;
                    }

                    // ‚úÖ –ö–†–û–ö 3: –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∞–∫–∞–Ω—Å—ñ—ó (–≤—Å—ñ –ø—Ä–æ—Ö–æ–¥—è—Ç—å –æ–¥–Ω–∞–∫–æ–≤—É –æ–±—Ä–æ–±–∫—É)
                    Job job = createJobFromCard(card, jobPageUrl, jobFunctions);
                    if (job != null) {
                        jobs.add(job);
                    }

                } catch (Exception e) {
                    log.warn("‚ö†Ô∏è Error processing job card on company page: {}", e.getMessage());
                }
            }

        } catch (Exception e) {
            log.error("‚ùå Error scraping jobs from company page: {}", e.getMessage());
        }

        return jobs;
    }
    
    /**
     * ‚úÖ –û–ù–û–í–õ–ï–ù–ò–ô –ú–ï–¢–û–î: –°–∫—Ä–∞–ø—ñ–Ω–≥ –≤–∞–∫–∞–Ω—Å—ñ–π –∑ –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
     * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –Ω–æ–≤—É –≥—ñ–±—Ä–∏–¥–Ω—É –ª–æ–≥—ñ–∫—É: 
     * 1) job functions ‚Üí 2) Load More (–û–î–ò–ù —Ä–∞–∑) ‚Üí 3) –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ ‚Üí 4) URL ‚Üí 5) –ø—Ä–µ—Ñ—ñ–∫—Å –∫–æ–º–ø–∞–Ω—ñ—ó ‚Üí 6) –∑–±—ñ—Ä —Ç–µ–≥—ñ–≤
     */
    private List<Job> scrapeJobsFromMainPage(WebDriver driver, List<String> jobFunctions) {
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É –ª–æ–≥—ñ–∫—É –∑ –Ω–æ–≤–∏–º –ø–æ—Ä—è–¥–∫–æ–º —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
        return scrapeAllJobsWithImprovedLogic(driver, jobFunctions);
    }

    /**
     * ‚úÖ –ù–û–í–ò–ô –ú–ï–¢–û–î: –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–∞—Ä—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å—ñ–π –∫—ñ–ª—å–∫–æ–º–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è–º–∏
     */
    private List<WebElement> findJobCardsWithMultipleStrategies(WebDriver driver) {
        log.info("üîç Finding job cards with multiple strategies...");
        // ‚úÖ –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–û: –°–ø–æ—á–∞—Ç–∫—É —Ç–µ—Å—Ç—É—î–º–æ –Ω–∞–π–±—ñ–ª—å—à –π–º–æ–≤—ñ—Ä–Ω–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä
        String primarySelector = "[class*='job-card']";
        try {
            List<WebElement> elements = driver.findElements(By.cssSelector(primarySelector));
            log.info("üîç Primary selector '{}' -> found {} elements", primarySelector, elements.size());
            
            if (!elements.isEmpty()) {
                                    // ‚úÖ –î–û–î–ê–ù–û: –í–∞–ª—ñ–¥–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ - —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ
                    List<WebElement> validElements = Validation.filterValidJobCards(elements);
                log.info("üîç After validation: {} valid elements out of {} total", validElements.size(), elements.size());
                
                if (!validElements.isEmpty()) {
                    log.info("‚úÖ Found {} valid job cards with primary selector: '{}'", validElements.size(), primarySelector);
                    return validElements;
                }
            }
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Primary selector '{}' failed: {}", primarySelector, e.getMessage());
        }
        
        // –°–ø—Ä–æ–±—É—î–º–æ —ñ–Ω—à—ñ —Å–µ–ª–µ–∫—Ç–æ—Ä–∏ –∑ ScrapingSelectors.JOB_CARD
        for (int i = 0; i < ScrapingSelectors.JOB_CARD.length; i++) {
            String selector = ScrapingSelectors.JOB_CARD[i];
            
            // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä, —è–∫–∏–π –≤–∂–µ –ø–µ—Ä–µ–≤—ñ—Ä–∏–ª–∏
            if (selector.equals(primarySelector)) {
                continue;
            }
            
            try {
                List<WebElement> elements = driver.findElements(By.cssSelector(selector));
                log.info("üîç Selector {}: '{}' -> found {} elements", i + 1, selector, elements.size());
                
                if (!elements.isEmpty()) {
                    // ‚úÖ –î–û–î–ê–ù–û: –í–∞–ª—ñ–¥–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ - —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ
                    List<WebElement> validElements = Validation.filterValidJobCards(elements);
                    log.info("üîç After validation: {} valid elements out of {} total", validElements.size(), elements.size());
                    
                    if (!validElements.isEmpty()) {
                        log.info("‚úÖ Found {} valid job cards with selector: '{}'", validElements.size(), selector);
                        return validElements;
                    }
                }
            } catch (Exception e) {
                log.warn("‚ö†Ô∏è Selector '{}' failed: {}", selector, e.getMessage());
            }
        }
        List<WebElement> allDivs = driver.findElements(By.tagName("div"));
        // ‚úÖ –î–û–î–ê–ù–û: –ê–Ω–∞–ª—ñ–∑ –ø–µ—Ä—à–∏—Ö –∫—ñ–ª—å–∫–æ—Ö div –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        int sampleSize = Math.min(10, allDivs.size());
        for (int i = 0; i < sampleSize; i++) {
            try {
                WebElement div = allDivs.get(i);
                String className = div.getAttribute("class");
                String dataTestId = div.getAttribute("data-testid");
                String tagName = div.getTagName();
                String text = div.getText();
                log.info("üîç Div {}: tag='{}', class='{}', data-testid='{}', text='{}'",
                    i + 1, tagName, className, dataTestId,
                    text.length() > 50 ? text.substring(0, 50) + "..." : text);
            } catch (Exception e) {
                log.warn("‚ö†Ô∏è Error analyzing div {}: {}", i + 1, e.getMessage());
            }
        }
        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–µ—Ä—à—ñ 50 div –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        return allDivs.subList(0, Math.min(50, allDivs.size()));
    }

    /**
     * ‚úÖ –ù–û–í–ê, –ù–ê–î–Ü–ô–ù–ê –í–ï–†–°–Ü–Ø –ú–ï–¢–û–î–£
     * –®—É–∫–∞—î –ø—Ä—è–º–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤–∞–∫–∞–Ω—Å—ñ—é –≤ –∫–∞—Ä—Ç—Ü—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –∫—ñ–ª—å–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π
     */
    private String findDirectJobUrl(WebElement jobCard) {
        try {
            // –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 1: –®—É–∫–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º –∞—Ç—Ä–∏–±—É—Ç–æ–º data-testid
            try {
                WebElement specificLink = jobCard.findElement(By.cssSelector("a[data-testid='job-card-link']"));
                String url = specificLink.getAttribute("href");
                if (url != null && !url.isBlank()) {
                    log.debug("üîç –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 1: –ó–Ω–∞–π–¥–µ–Ω–æ URL –∑–∞ data-testid: {}", url);
                    return url;
                }
            } catch (Exception e) {
                // –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 1 –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∞
            }

            // –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 2: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π –µ–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç–∫–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º
            try {
                WebElement parent = jobCard.findElement(By.xpath(".."));
                if (parent != null && "a".equals(parent.getTagName())) {
                    String url = parent.getAttribute("href");
                    if (url != null && !url.isBlank()) {
                        log.debug("üîç –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 2: –ó–Ω–∞–π–¥–µ–Ω–æ URL —É –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞: {}", url);
                        return url;
                    }
                }
            } catch (Exception e) {
                // –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 2 –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∞
            }

            // –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 3: –®—É–∫–∞—î–º–æ –ø–µ—Ä—à–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –∫–∞—Ä—Ç–∫–∏
            try {
                List<WebElement> allLinks = jobCard.findElements(By.cssSelector("a[href]"));
                for (WebElement link : allLinks) {
                    String url = link.getAttribute("href");
                    if (url != null && (url.contains("/jobs/") || url.contains("/companies/"))) {
                        log.debug("üîç –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 3: –ó–Ω–∞–π–¥–µ–Ω–æ URL –∑–∞ –≤–º—ñ—Å—Ç–æ–º href: {}", url);
                        return url;
                    }
                }
            } catch (Exception e) {
                // –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 3 –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∞
            }

            log.debug("‚ö†Ô∏è –ñ–æ–¥–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è –ø–æ—à—É–∫—É URL –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∞ –¥–ª—è —Ü—ñ—î—ó –∫–∞—Ä—Ç–∫–∏");
            return null;

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Error in findDirectJobUrl: {}", e.getMessage());
            return null;
        }
    }

    private boolean hasRequiredTags(WebElement jobCard, List<String> requiredTags) {
        if (requiredTags == null || requiredTags.isEmpty()) {
            log.debug("üîç No required tags specified, passing all cards");
            return true;
        }
        
        try {
            String cardText = jobCard.getText().toLowerCase();
            log.debug("üîç Card text (first 200 chars): '{}'", 
                cardText.length() > 200 ? cardText.substring(0, 200) + "..." : cardText);
            
            boolean hasTags = requiredTags.stream()
                    .anyMatch(tag -> {
                        boolean contains = cardText.contains(tag.toLowerCase());
                        log.debug("üîç Tag '{}' found: {}", tag, contains);
                        return contains;
                    });
            
            log.debug("üîç Card passed tag filter: {}", hasTags);
            return hasTags;
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Error checking tags: {}", e.getMessage());
            return true; // –í —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
        }
    }

    private boolean hasRequiredJobFunction(WebElement jobCard, List<String> jobFunctions) {
        log.info("üîç Checking job functions: {}", jobFunctions);
        
        if (jobFunctions == null || jobFunctions.isEmpty()) {
            log.info("üîç No required job functions specified, passing all cards");
            return true;
        }
        
        try {
            String cardText = jobCard.getText().toLowerCase();
            log.info("üîç Card text (first 200 chars): '{}'", 
                cardText.length() > 200 ? cardText.substring(0, 200) + "..." : cardText);
            
            boolean hasFunction = jobFunctions.stream()
                    .anyMatch(function -> {
                        String functionName = function.toLowerCase();
                        boolean contains = cardText.contains(functionName);
                        log.info("üîç Job function '{}' found: {} in card text", functionName, contains);
                        if (!contains) {
                            log.info("üîç Card text does not contain '{}'. Full card text: '{}'", functionName, cardText);
                        }
                        return contains;
                    });
            
            log.info("üîç Card passed job function filter: {}", hasFunction);
            return hasFunction;
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Error checking job functions: {}", e.getMessage());
            return true; // –í —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
        }
    }

    private Job createJobFromCard(WebElement card, String jobPageUrl, List<String> jobFunctions) {
        try {
            log.debug("üîç Creating Job object for URL: {}", jobPageUrl);
            
            // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ DataExtractionService –¥–ª—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö
            String organizationTitle = dataExtractionService.extractCompanyName(card);
            String positionName = dataExtractionService.extractTitle(card);
            List<String> tags = dataExtractionService.extractTags(card);
            String location = dataExtractionService.extractLocation(card);
            LocalDateTime postedDate = dataExtractionService.extractPostedDate(card);
            String logoUrl = dataExtractionService.extractLogoUrl(card);
            String description = dataExtractionService.extractDescription(card);
            
            String defaultFunction = jobFunctions.isEmpty() ? 
                    "Software Engineering" : jobFunctions.get(0);
            
            log.info("üè¢ Company name extracted: '{}' for URL: {}", organizationTitle, jobPageUrl);
            log.info("üíº Position name: '{}'", positionName);
            log.info("üè∑Ô∏è Tags found: {}", tags);
            log.info("üìç Location: '{}'", location);
            log.info("üìÖ Posted date: '{}' (Unix: {})", postedDate, 
                    postedDate != null ? postedDate.toEpochSecond(java.time.ZoneOffset.UTC) : "null");
            log.info("üñºÔ∏è Logo URL: '{}'", logoUrl);
            log.info("üìù Description: '{}'", description != null ? description : "Not found");
            
            // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ JobCreationService –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è Job –∑ —É—Å—ñ–º–∞ –¥–∞–Ω–∏–º–∏
            Job job = jobCreationService.createJobWithAllData(
                jobPageUrl, positionName, organizationTitle, logoUrl, location, tags, postedDate, jobFunctions, description
            );
            
            // ‚úÖ –î–û–î–ê–ù–û: –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–ø–∏—Å –≤–∞–∫–∞–Ω—Å—ñ—ó —á–µ—Ä–µ–∑ DescriptionIngestService (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ü–µ –Ω–µ –∑–∞–≥–ª—É—à–∫–∞)
            if (job != null && description != null && !description.trim().isEmpty() && 
                !description.equals("Job scraped from Techstars")) {
                try {
                    boolean descriptionSaved = descriptionIngestService.saveDescription(job, description);
                    if (descriptionSaved) {
                        log.info("‚úÖ Successfully saved description for job ID: {}", job.getId());
                    } else {
                        log.warn("‚ö†Ô∏è Failed to save description for job ID: {}", job.getId());
                    }
                } catch (Exception e) {
                    log.error("‚ùå Error saving description for job ID: {}, error: {}", 
                            job.getId(), e.getMessage(), e);
                }
            }
            
            return job;
                    
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Error creating Job object: {}", e.getMessage());
            return null;
        }
    }


    private void printUpdatedFinalReport(int totalCards, int passedFunctionFilter,
                                       int foundUrls, int finalJobs, int savedWithCompanyPrefix, 
                                       int savedWithoutCompanyPrefix, List<String> functions) {
        log.info("üìä –û–ù–û–í–õ–ï–ù–ò–ô –ó–í–Ü–¢ –ü–†–û –§–Ü–õ–¨–¢–†–ê–¶–Ü–Æ (–ù–û–í–ê –õ–û–ì–Ü–ö–ê):");
        log.info("   ‚Ä¢ –í—Å—å–æ–≥–æ –∫–∞—Ä—Ç–æ–∫: {}", totalCards);
        log.info("   ‚Ä¢ –ü—Ä–æ–π—à–ª–∏ —Ñ—ñ–ª—å—Ç—Ä —Ñ—É–Ω–∫—Ü—ñ–π: {}", passedFunctionFilter);
        log.info("   ‚Ä¢ –ó–Ω–∞–π–¥–µ–Ω–æ URL: {}", foundUrls);
        log.info("   ‚Ä¢ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –∑ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º –∫–æ–º–ø–∞–Ω—ñ—ó (–ë–ï–ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–µ–≥—ñ–≤): {}", savedWithCompanyPrefix);
        log.info("   ‚Ä¢ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –±–µ–∑ –ø—Ä–µ—Ñ—ñ–∫—Å—É –∫–æ–º–ø–∞–Ω—ñ—ó (—Ç—ñ–ª—å–∫–∏ —Ñ—ñ–ª—å—Ç—Ä —Ñ—É–Ω–∫—Ü—ñ–π): {}", savedWithoutCompanyPrefix);
        log.info("   ‚Ä¢ –§—ñ–Ω–∞–ª—å–Ω–∏—Ö –≤–∞–∫–∞–Ω—Å—ñ–π: {}", finalJobs);
        
        if (totalCards > 0) {
            log.info("   ‚Ä¢ –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó —Ñ—É–Ω–∫—Ü—ñ–π: {:.1f}%", (double) passedFunctionFilter / totalCards * 100);
        }
        if (passedFunctionFilter > 0) {
            log.info("   ‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å—ñ—è –≤ URL: {:.1f}%", (double) foundUrls / passedFunctionFilter * 100);
        }
        if (foundUrls > 0) {
            log.info("   ‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å—ñ—è –≤ —Ñ—ñ–Ω–∞–ª—å–Ω—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó: {:.1f}%", (double) finalJobs / foundUrls * 100);
            log.info("   ‚Ä¢ –ß–∞—Å—Ç–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –∑ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º –∫–æ–º–ø–∞–Ω—ñ—ó: {:.1f}%", (double) savedWithCompanyPrefix / foundUrls * 100);
            log.info("   ‚Ä¢ –ß–∞—Å—Ç–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –±–µ–∑ –ø—Ä–µ—Ñ—ñ–∫—Å—É –∫–æ–º–ø–∞–Ω—ñ—ó: {:.1f}%", (double) savedWithoutCompanyPrefix / foundUrls * 100);
        }
        log.info("   ‚Ä¢ –ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó: {}", functions);
        
        // ‚úÖ –î–û–î–ê–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–æ—ó –ª–æ–≥—ñ–∫–∏
        if (savedWithCompanyPrefix > 0) {
            log.info("‚úÖ –ù–æ–≤–∞ –ª–æ–≥—ñ–∫–∞ –ø—Ä–∞—Ü—é—î: {} –≤–∞–∫–∞–Ω—Å—ñ–π –∑–±–µ—Ä–µ–∂–µ–Ω–æ –∑ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º –∫–æ–º–ø–∞–Ω—ñ—ó –ë–ï–ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–µ–≥—ñ–≤", savedWithCompanyPrefix);
        }
        
        if (passedFunctionFilter > 0 && foundUrls == 0) {
            log.error("‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: –í—Å—ñ {} –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–∞—Ä—Ç–æ–∫ –Ω–µ –¥–∞–ª–∏ URL!", passedFunctionFilter);
        }
        
        if (foundUrls > 0 && finalJobs == 0) {
            log.error("‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: –í—Å—ñ {} –∑–Ω–∞–π–¥–µ–Ω–∏—Ö URL –Ω–µ –ø—Ä–æ–π—à–ª–∏ —Ñ—ñ–Ω–∞–ª—å–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É!", foundUrls);
        }
        
        log.info("üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {} –∑ {} –∫–∞—Ä—Ç–æ–∫ —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ", finalJobs, totalCards);
        log.info("üîç –ù–û–í–ê –ì–Ü–ë–†–ò–î–ù–ê –õ–û–ì–Ü–ö–ê: 1) job functions ‚Üí 2) Load More (–û–î–ò–ù —Ä–∞–∑) ‚Üí 3) –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ ‚Üí 4) URL ‚Üí 5) –ø—Ä–µ—Ñ—ñ–∫—Å –∫–æ–º–ø–∞–Ω—ñ—ó ‚Üí 6) –∑–±—ñ—Ä —Ç–µ–≥—ñ–≤ (–±–µ–∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó)");
    }

    private void sleep(long milliseconds) {
        try {
            Thread.sleep(milliseconds);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            log.warn("‚ö†Ô∏è Thread interrupted during sleep");
        }
    }

    /**
     * ‚úÖ –ù–û–í–ò–ô –ú–ï–¢–û–î: –ï–∫—Å—Ç—Ä–∞–∫—Ü—ñ—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
     */
    private String extractTitleFromDetailPage(WebDriver driver) {
        try {
            for (String selector : ScrapingSelectors.JOB_DETAIL_PAGE) {
                if (selector.contains("itemprop='title'")) {
                    List<WebElement> elements = driver.findElements(By.cssSelector(selector));
                    if (!elements.isEmpty()) {
                        String title = elements.get(0).getText().trim();
                        log.info("‚úÖ Extracted title from detail page: {}", title);
                        return title;
                    }
                }
            }
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Error extracting title from detail page: {}", e.getMessage());
        }
        return null;
    }

    /**
     * ‚úÖ –ù–û–í–ò–ô –ú–ï–¢–û–î: –ï–∫—Å—Ç—Ä–∞–∫—Ü—ñ—è –Ω–∞–∑–≤–∏ –∫–æ–º–ø–∞–Ω—ñ—ó –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
     */
    private String extractCompanyNameFromDetailPage(WebDriver driver) {
        try {
            for (String selector : ScrapingSelectors.JOB_DETAIL_PAGE) {
                if (selector.contains("itemprop='name'")) {
                    List<WebElement> elements = driver.findElements(By.cssSelector(selector));
                    if (!elements.isEmpty()) {
                        String companyName = elements.get(0).getText().trim();
                        log.info("‚úÖ Extracted company name from detail page: {}", companyName);
                        return companyName;
                    }
                }
            }
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Error extracting company name from detail page: {}", e.getMessage());
        }
        return null;
    }

    /**
     * ‚úÖ –ù–û–í–ò–ô –ú–ï–¢–û–î: –ï–∫—Å—Ç—Ä–∞–∫—Ü—ñ—è —Ç–µ–≥—ñ–≤ –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
     */
    private List<String> extractTagsFromDetailPage(WebDriver driver) {
        List<String> tags = new ArrayList<>();
        try {
            for (String selector : ScrapingSelectors.JOB_DETAIL_PAGE) {
                if (selector.contains("data-testid=tag")) {
                    List<WebElement> elements = driver.findElements(By.cssSelector(selector));
                    for (WebElement element : elements) {
                        String tag = element.getText().trim();
                        if (!tag.isEmpty()) {
                            tags.add(tag);
                        }
                    }
                    if (!tags.isEmpty()) {
                        log.info("‚úÖ Extracted {} tags from detail page: {}", tags.size(), tags);
                        return tags;
                    }
                }
            }
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Error extracting tags from detail page: {}", e.getMessage());
        }
        return tags;
    }

    /**
     * ‚úÖ –ù–û–í–ò–ô –ú–ï–¢–û–î: –ï–∫—Å—Ç—Ä–∞–∫—Ü—ñ—è –ª–æ–∫–∞—Ü—ñ—ó –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
     */
    private String extractLocationFromDetailPage(WebDriver driver) {
        try {
            // –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ –≤ meta —Ç–µ–≥–∞—Ö
            List<WebElement> metaElements = driver.findElements(By.cssSelector("meta[itemprop='address']"));
            if (!metaElements.isEmpty()) {
                String location = metaElements.get(0).getAttribute("content");
                if (location != null && !location.trim().isEmpty()) {
                    log.info("‚úÖ Extracted location from meta tag: {}", location);
                    return location.trim();
                }
            }

            // –ü–æ—Ç—ñ–º —à—É–∫–∞—î–º–æ –≤ div –µ–ª–µ–º–µ–Ω—Ç–∞—Ö
            for (String selector : ScrapingSelectors.JOB_DETAIL_PAGE) {
                if (selector.contains("sc-beqWaB")) {
                    List<WebElement> elements = driver.findElements(By.cssSelector(selector));
                    for (WebElement element : elements) {
                        String text = element.getText().trim();
                        if (text.contains(",") && (text.contains("USA") || text.contains("Remote") || text.contains("India"))) {
                            log.info("‚úÖ Extracted location from div: {}", text);
                            return text;
                        }
                    }
                }
            }
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Error extracting location from detail page: {}", e.getMessage());
        }
        return null;
    }

    /**
     * ‚úÖ –ù–û–í–ò–ô –ú–ï–¢–û–î: –ï–∫—Å—Ç—Ä–∞–∫—Ü—ñ—è –¥–∞—Ç–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
     */
    private LocalDateTime extractPostedDateFromDetailPage(WebDriver driver) {
        try {
            // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ –≤ meta —Ç–µ–≥–∞—Ö
            List<WebElement> metaElements = driver.findElements(By.cssSelector("meta[itemprop='datePosted']"));
            if (!metaElements.isEmpty()) {
                String dateStr = metaElements.get(0).getAttribute("content");
                if (dateStr != null && !dateStr.trim().isEmpty()) {
                    // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ DateParsingService –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É –¥–∞—Ç–∏ –∑ meta —Ç–µ–≥—É
                    LocalDateTime date = dateParsingService.parseMetaDate(dateStr);
                    if (date != null) {
                        log.info("‚úÖ Extracted posted date from meta tag: '{}' -> {} (Unix: {})", 
                                dateStr, date, date.toEpochSecond(java.time.ZoneOffset.UTC));
                        return date;
                    }
                }
            }
            

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Error extracting posted date from detail page: {}", e.getMessage());
        }
        
        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É —è–∫ –∑–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
        log.info("‚ö†Ô∏è Using current date as fallback for posted date");
        LocalDateTime fallbackDate = LocalDateTime.now();
        log.info("üìÖ Using fallback date: {} (Unix: {})", fallbackDate, fallbackDate.toEpochSecond(java.time.ZoneOffset.UTC));
        return fallbackDate;
    }
    
    /**
     * ‚úÖ –ù–û–í–ò–ô –ú–ï–¢–û–î: –ü–æ—à—É–∫ –∫–∞—Ä—Ç–æ–∫ –≤–∞–∫–∞–Ω—Å—ñ–π –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –∫–æ–º–ø–∞–Ω—ñ—ó
     */
    private List<WebElement> findJobCardsOnCompanyPage(WebDriver driver) {
        List<WebElement> jobCards = new ArrayList<>();

        try {
            for (String selector : ScrapingSelectors.COMPANY_PAGE_JOBS) {
                List<WebElement> elements = driver.findElements(By.cssSelector(selector));
                if (!elements.isEmpty()) {
                    jobCards.addAll(elements);
                    log.info("‚úÖ Found {} job cards with selector: {}", elements.size(), selector);
                }
            }

            // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
            jobCards = Validation.filterValidJobCards(jobCards);

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Error finding job cards on company page: {}", e.getMessage());
        }

        return jobCards;
    }


    /**
     * ‚úÖ –ù–û–í–ò–ô –ú–ï–¢–û–î: –í–∏—Ç—è–≥—É—î –æ–ø–∏—Å –≤–∞–∫–∞–Ω—Å—ñ—ó –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
     */
    private String extractDescriptionFromDetailPage(WebDriver driver) {
        try {
            // ‚úÖ –®—É–∫–∞—î–º–æ –æ–ø–∏—Å –≤ div –∑ data-testid="careerPage"
            List<WebElement> careerPageElements = driver.findElements(By.cssSelector("div[data-testid='careerPage']"));
            if (!careerPageElements.isEmpty()) {
                WebElement careerPage = careerPageElements.get(0);
                String description = careerPage.getAttribute("innerHTML");
                if (description != null && !description.trim().isEmpty()) {
                    log.info("üìù Found description in careerPage div, length: {} characters", description.length());
                    return description.trim();
                }
            }

            // ‚úÖ –®—É–∫–∞—î–º–æ –æ–ø–∏—Å –≤ div –∑ –∫–ª–∞—Å–æ–º sc-beqWaB fmCCHr
            List<WebElement> descriptionElements = driver.findElements(By.cssSelector("div.sc-beqWaB.fmCCHr"));
            if (!descriptionElements.isEmpty()) {
                WebElement descriptionDiv = descriptionElements.get(0);
                String description = descriptionDiv.getAttribute("innerHTML");
                if (description != null && !description.trim().isEmpty()) {
                    log.info("üìù Found description in sc-beqWaB.fmCCHr div, length: {} characters", description.length());
                    return description.trim();
                }
            }

            // ‚úÖ –®—É–∫–∞—î–º–æ –æ–ø–∏—Å –∑–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏ –∑ ScrapingSelectors
            for (String selector : ScrapingSelectors.DESCRIPTION) {
                try {
                    List<WebElement> elements = driver.findElements(By.cssSelector(selector));
                    for (WebElement element : elements) {
                        String elementHtml = element.getAttribute("innerHTML");
                        if (elementHtml != null && elementHtml.length() > 200) { // HTML –º–∞—î –±—É—Ç–∏ –¥–æ–≤–≥–∏–º
                            log.info("üìù Found description using selector '{}', length: {} characters", selector, elementHtml.length());
                            return elementHtml.trim();
                        }
                    }
                } catch (Exception e) {
                    log.debug("‚ö†Ô∏è Error with selector '{}': {}", selector, e.getMessage());
                }
            }

            // ‚úÖ –®—É–∫–∞—î–º–æ –æ–ø–∏—Å –≤ –≤—Å—ñ—Ö div –µ–ª–µ–º–µ–Ω—Ç–∞—Ö –∑ –∫–ª–∞—Å–æ–º sc-beqWaB
            List<WebElement> allScElements = driver.findElements(By.cssSelector("div[class*='sc-beqWaB']"));
            for (WebElement element : allScElements) {
                String elementText = element.getText();
                if (elementText != null && elementText.length() > 100) { // –®—É–∫–∞—î–º–æ –¥–æ–≤–≥–∏–π —Ç–µ–∫—Å—Ç
                    String elementHtml = element.getAttribute("innerHTML");
                    if (elementHtml != null && elementHtml.length() > 200) { // HTML –º–∞—î –±—É—Ç–∏ —â–µ –¥–æ–≤—à–∏–º
                        log.info("üìù Found potential description in sc-beqWaB div, length: {} characters", elementHtml.length());
                        return elementHtml.trim();
                    }
                }
            }

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Error extracting description from detail page: {}", e.getMessage());
        }

        log.info("üìù No description found on detail page");
        return null;
    }
}
