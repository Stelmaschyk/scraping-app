package com.scrapper.service;

import com.scrapper.model.Job;
import com.scrapper.util.ScrapingSelectors;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import io.github.bonigarcia.wdm.WebDriverManager;
import java.time.Duration;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

// ‚úÖ –î–û–î–ê–ù–û: –ù–æ–≤—ñ —Å–µ—Ä–≤—ñ—Å–∏ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
import com.scrapper.service.criteriaServices.TagIngestService;
import com.scrapper.service.criteriaServices.LocationIngestService;
import com.scrapper.service.criteriaServices.PostedDateIngestService;
import com.scrapper.service.criteriaServices.LogoIngestService;
import com.scrapper.service.criteriaServices.TitleIngestService;
import com.scrapper.service.criteriaServices.DescriptionIngestService;

/**
 * ‚úÖ –û–ù–û–í–õ–ï–ù–ò–ô –°–ï–†–í–Ü–°: –ó–º—ñ–Ω–µ–Ω–∞ –ª–æ–≥—ñ–∫–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –∑ –≥—ñ–±—Ä–∏–¥–Ω–∏–º –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º
 * 
 * –ù–û–í–ê –ì–Ü–ë–†–ò–î–ù–ê –õ–û–ì–Ü–ö–ê –§–Ü–õ–¨–¢–†–ê–¶–Ü–á:
 * 1. –°–ø–æ—á–∞—Ç–∫—É –≤–∏–±–∏—Ä–∞—î—Ç—å—Å—è job Function (—Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏)
 * 2. –ü–æ—Ç—ñ–º –Ω–∞—Ç–∏—Å–∫–∞—î—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞ Load More –û–î–ò–ù —Ä–∞–∑ (—è–∫—â–æ –≤–æ–Ω–∞ —î)
 * 3. –î–∞–ª—ñ –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è —Ü–∏–∫–ª –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–æ—ó –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º
 * 4. –í–∏—Ö–æ–¥–∏–º–æ –∑ —Ü–∏–∫–ª—É —Ç—ñ–ª—å–∫–∏ –∫–æ–ª–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∞–∫–∞–Ω—Å—ñ–π –ø–µ—Ä–µ—Å—Ç–∞—î –∑—Ä–æ—Å—Ç–∞—Ç–∏
 * 5. –Ü —Ç—ñ–ª—å–∫–∏ –ø–æ—Ç—ñ–º –∑—á–∏—Ç—É–≤–∞–Ω–Ω—è URL —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–µ—Ñ—ñ–∫—Å—É
 * 6. –Ø–∫—â–æ URL –º—ñ—Å—Ç–∏—Ç—å https://jobs.techstars.com/companies/ —Ç–æ –≤–∞–∫–∞–Ω—Å—ñ—è –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è
 * 8. –¢–µ–≥–∏ –∑–±–∏—Ä–∞—é—Ç—å—Å—è –¥–ª—è –≤—Å—ñ—Ö –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –≤–∞–∫–∞–Ω—Å—ñ–π
 * 
 * –ì–Ü–ë–†–ò–î–ù–ò–ô –ü–Ü–î–•–Ü–î –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø:
 * - –°–ø–æ—á–∞—Ç–∫—É –∫–Ω–æ–ø–∫–∞ Load More (—è–∫—â–æ —î)
 * - –ü–æ—Ç—ñ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç—Ü—ñ
 * - –ê–¥–∞–ø—Ç–∏–≤–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∫–æ–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –±—ñ–ª—å—à–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è
 * 
 * –¶–µ –¥–æ–∑–≤–æ–ª—è—î –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –≤—Å—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó –∫–æ–º–ø–∞–Ω—ñ–π Techstars, –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–µ–≥—ñ–≤
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class ApplyUrlScraperServiceImpl implements ApplyUrlScraperService {

    @Value("${scraping.base-url:https://jobs.techstars.com/jobs}")
    private String baseUrl;

    @Value("${scraping.selenium.timeout:30}")
    private long timeoutSeconds;

    @Value("${scraping.selenium.scroll.delay:10000}")
    private long scrollDelay;

    @Value("${scraping.selenium.scroll.max-attempts:20}")
    private int maxScrollAttempts;

    @Value("${scraping.selenium.scroll.max-no-new-jobs:3}")
    private int maxNoNewJobsAttempts;

    /**
     * ‚úÖ –ö–õ–Æ–ß–û–í–ê –ö–û–ù–°–¢–ê–ù–¢–ê: –ü—Ä–µ—Ñ—ñ–∫—Å URL –∫–æ–º–ø–∞–Ω—ñ–π Techstars
     * 
     * –Ø–∫—â–æ URL –≤–∞–∫–∞–Ω—Å—ñ—ó –º—ñ—Å—Ç–∏—Ç—å —Ü–µ–π –ø—Ä–µ—Ñ—ñ–∫—Å, —Ç–æ –≤–∞–∫–∞–Ω—Å—ñ—è –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è 
     * –ë–ï–ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–µ–≥—ñ–≤ (—Ç—ñ–ª—å–∫–∏ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏).
     * 
     * –¢–µ–≥–∏ –∑–±–∏—Ä–∞—é—Ç—å—Å—è –¥–ª—è –≤—Å—ñ—Ö –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –≤–∞–∫–∞–Ω—Å—ñ–π.
     * 
     * –¶–µ –¥–æ–∑–≤–æ–ª—è—î –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –≤—Å—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó –∫–æ–º–ø–∞–Ω—ñ–π Techstars, 
     * –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–µ–≥—ñ–≤, –ø—ñ—Å–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –≥—ñ–±—Ä–∏–¥–Ω–æ—ó –ª–æ–≥—ñ–∫–∏
     * –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (Load More + –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞).
     */
    private static final String REQUIRED_PREFIX = "https://jobs.techstars.com/companies/";
    private static final String LOAD_MORE_SELECTOR = ScrapingSelectors.LOAD_MORE_BUTTON[0];
    private static final String JOB_CARD_SELECTOR = ScrapingSelectors.JOB_CARD[0];

    // ‚úÖ –î–û–î–ê–ù–û: –ù–æ–≤—ñ —Å–µ—Ä–≤—ñ—Å–∏ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
    private final TagIngestService tagIngestService;
    private final LocationIngestService locationIngestService;
    private final PostedDateIngestService postedDateIngestService;
    private final LogoIngestService logoIngestService;
    private final TitleIngestService titleIngestService;
    private final DescriptionIngestService descriptionIngestService;
    private final JobCreationService jobCreationService;

    private WebDriver initializeWebDriver() {
        WebDriverManager.chromedriver().setup();
        
        ChromeOptions options = new ChromeOptions();
        
        // ‚úÖ –î–û–î–ê–ù–û: –û–±—Ö—ñ–¥ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –±–æ—Ç—ñ–≤
        // options.addArguments("--headless"); // –¢–∏–º—á–∞—Å–æ–≤–æ –≤–∏–º–∫–Ω–µ–º–æ headless —Ä–µ–∂–∏–º
        options.addArguments("--no-sandbox");
        options.addArguments("--disable-dev-shm-usage");
        options.addArguments("--disable-gpu");
        options.addArguments("--window-size=1920,1080");
        
        // ‚úÖ –î–û–î–ê–ù–û: –û–±—Ö—ñ–¥ –¥–µ—Ç–µ–∫—Ü—ñ—ó –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó
        options.addArguments("--disable-blink-features=AutomationControlled");
        options.addArguments("--disable-extensions");
        options.addArguments("--disable-plugins");
        options.addArguments("--disable-images");
        // options.addArguments("--disable-javascript"); // –í–∏–º–∫–Ω–µ–º–æ JS —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        
        // ‚úÖ –î–û–î–ê–ù–û: User-Agent –¥–ª—è –æ–±—Ö–æ–¥—É –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
        options.addArguments("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36");
        
        // ‚úÖ –î–û–î–ê–ù–û: –î–æ–¥–∞—Ç–∫–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        options.addArguments("--remote-debugging-port=9222");
        options.addArguments("--disable-web-security");
        options.addArguments("--allow-running-insecure-content");
        
        // ‚úÖ –î–û–î–ê–ù–û: –î–æ–¥–∞—Ç–∫–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –æ–±—Ö–æ–¥—É –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
        options.addArguments("--disable-blink-features");
        options.addArguments("--disable-features=VizDisplayCompositor");
        options.addArguments("--disable-ipc-flooding-protection");
        
        log.info("üîß Initializing Chrome WebDriver with anti-bot protection bypass (visible mode)");
        return new ChromeDriver(options);
    }

    @Override
    public List<String> fetchApplyUrls(List<String> jobFunctions, List<String> requiredTags) {
        Objects.requireNonNull(jobFunctions, "jobFunctions cannot be null");
        
        log.info("üöÄ Starting Selenium scraping with NEW LOGIC: jobFunctions={}, tags={}", 
                jobFunctions, 
                requiredTags);

        WebDriver driver = null;
        try {
            driver = initializeWebDriver();
            
            // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≤–∂–¥–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–∏–π, –Ω–µ—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏–π URL
            log.info("üìç Navigating to base URL: {}", baseUrl);
            driver.get(baseUrl);
            
            // ‚úÖ –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–û: –®–≤–∏–¥–∫–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
            log.info("‚è≥ Quick page load...");
            sleep(3000); // –ó–º–µ–Ω—à—É—î–º–æ –¥–æ 3 —Å–µ–∫—É–Ω–¥
            
            // ‚úÖ –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–û: –ë–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
            String pageTitle = driver.getTitle();
            String currentUrl = driver.getCurrentUrl();
            log.info("üìÑ Page loaded - Title: '{}', URL: '{}'", pageTitle, currentUrl);
            
            // ‚úÖ –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–û: –®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
            int initialElements = driver.findElements(By.cssSelector("*")).size();
            log.info("üîç Total elements on page: {}", initialElements);
            
            if (initialElements < 50) {
                log.warn("‚ö†Ô∏è Page seems to be empty! Only {} elements found", initialElements);
                // ‚úÖ –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–û: –ö–æ—Ä–æ—Ç–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞
                sleep(2000);
            }
            
            // ‚úÖ –û–ù–û–í–õ–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤—É –≥—ñ–±—Ä–∏–¥–Ω—É –ª–æ–≥—ñ–∫—É –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –ø–æ—Ä—è–¥–∫–æ–º
            log.info("üîç Applying NEW HYBRID LOGIC: 1) job functions ‚Üí 2) Load More (–û–î–ò–ù —Ä–∞–∑) ‚Üí 3) –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ ‚Üí 4) URL ‚Üí 5) –ø—Ä–µ—Ñ—ñ–∫—Å –∫–æ–º–ø–∞–Ω—ñ—ó ‚Üí 6) –∑–±—ñ—Ä —Ç–µ–≥—ñ–≤");
            List<Job> jobs = scrapeAllJobsWithImprovedLogic(driver, requiredTags, jobFunctions);
            
            log.info("‚úÖ Scraping completed with NEW LOGIC. Found {} jobs matching criteria.", jobs.size());
            
            return jobs.stream()
                    .map(Job::getJobPageUrl)
                    .filter(url -> url != null && url.startsWith(REQUIRED_PREFIX))
                    .collect(Collectors.toList());
                    
        } catch (Exception e) {
            log.error("‚ùå Error during Selenium scraping", e);
            throw new RuntimeException("Failed to scrape jobs with Selenium", e);
        } finally {
            if (driver != null) {
                try { 
                    driver.quit(); 
                    log.info("üîí WebDriver closed successfully"); 
                } catch (Exception e) { 
                    log.warn("‚ö†Ô∏è Error closing WebDriver", e); 
                }
            }
        }
    }
    
    @Override
    public List<Job> scrapeAndCreateJobs(List<String> jobFunctions, List<String> requiredTags) {
        log.info("üöÄ Starting job scraping and creation with NEW LOGIC for job functions: {} and tags: {}", 
                jobFunctions, 
                requiredTags);
        
        WebDriver driver = null;
        try {
            driver = initializeWebDriver();
            log.info("üåê WebDriver initialized successfully");
            
            driver.get(baseUrl);
            log.info("üåê Navigated to: {}", baseUrl);
            
            // ‚úÖ –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–û: –®–≤–∏–¥–∫–µ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
            log.info("üîç Quick page load check...");
            
            // –ß–µ–∫–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            sleep(5000);
            
            // ‚úÖ –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–û: –®–≤–∏–¥–∫–∏–π –ø–æ—à—É–∫ –∫–∞—Ä—Ç–æ–∫ –≤–∞–∫–∞–Ω—Å—ñ–π
            log.info("üîç Quick job cards search...");
            boolean pageLoaded = false;
            
            // –°–ø—Ä–æ–±—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å–Ω–æ–≤–Ω—ñ —Å–µ–ª–µ–∫—Ç–æ—Ä–∏ –∑ –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
            for (String selector : ScrapingSelectors.JOB_CARD) {
                try {
                    // –ó–º–µ–Ω—à—É—î–º–æ —Ç–∞–π–º–∞—É—Ç –¥–æ 3 —Å–µ–∫—É–Ω–¥
                    WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(3));
                    wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector(selector)));
                    
                    int elementCount = driver.findElements(By.cssSelector(selector)).size();
                    if (elementCount > 0) {
                        log.info("‚úÖ Found {} job cards with selector: '{}'", elementCount, selector);
                        pageLoaded = true;
                        break;
                    }
                } catch (Exception e) {
                    log.debug("‚ö†Ô∏è Selector '{}' not found: {}", selector, e.getMessage());
                }
            }
            
            // ‚úÖ –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–û: –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫
            if (!pageLoaded) {
                log.warn("‚ö†Ô∏è No job cards found with primary selectors, continuing anyway...");
                pageLoaded = true; // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Ä–æ–±–æ—Ç—É
            }
            
            // ‚úÖ –û–ù–û–í–õ–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤—É –≥—ñ–±—Ä–∏–¥–Ω—É –ª–æ–≥—ñ–∫—É –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ —Å—Ç–æ—Ä—ñ–Ω–æ–∫
            log.info("üîç Applying NEW HYBRID LOGIC: 1) job functions ‚Üí 2) Load More (–û–î–ò–ù —Ä–∞–∑) ‚Üí 3) –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ ‚Üí 4) URL ‚Üí 5) –ø—Ä–µ—Ñ—ñ–∫—Å –∫–æ–º–ø–∞–Ω—ñ—ó ‚Üí 6) –∑–±—ñ—Ä —Ç–µ–≥—ñ–≤");
            List<Job> jobs = scrapeJobsBasedOnPageType(driver, requiredTags, jobFunctions);
            
            log.info("üéØ Job scraping completed with NEW LOGIC. Created {} Job objects with real data", jobs.size());
            return jobs;
            
        } catch (Exception e) {
            log.error("‚ùå Error during job scraping: {}", e.getMessage(), e);
            return new ArrayList<>();
        } finally {
            if (driver != null) {
                try {
                    driver.quit();
                } catch (Exception e) {
                    log.warn("‚ö†Ô∏è Error closing WebDriver: {}", e.getMessage());
                }
            }
        }
    }

    private void clickLoadMoreButton(WebDriver driver) {
        log.info("üîÑ Looking for Load More button...");
        
        // ‚úÖ –î–û–î–ê–ù–û: –†—ñ–∑–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –∫–Ω–æ–ø–∫–∏ "Load More"
        String[] loadMoreSelectors = {
            LOAD_MORE_SELECTOR,
            "button:contains('Load More')",
            "button:contains('Show More')",
            "button:contains('Load')",
            "a:contains('Load More')",
            "a:contains('Show More')",
            "[data-testid*='load-more']",
            "[data-testid*='show-more']",
            ".load-more",
            ".show-more",
            "button[class*='load']",
            "button[class*='more']",
            "a[class*='load']",
            "a[class*='more']"
        };
        
        for (String selector : loadMoreSelectors) {
            try {
                List<WebElement> buttons = driver.findElements(By.cssSelector(selector));
                if (!buttons.isEmpty()) {
                    WebElement button = buttons.get(0);
                    if (button.isDisplayed() && button.isEnabled()) {
                        log.info("‚úÖ Load More button found with selector: '{}'", selector);
                        
                        // ‚úÖ –î–û–î–ê–ù–û: –°–∫—Ä–æ–ª–∏–º–æ –¥–æ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–¥ –∫–ª—ñ–∫–æ–º
                        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", button);
                        sleep(1000);
                        
                        button.click();
                        sleep(scrollDelay);
                        log.info("‚úÖ Load More button clicked successfully");
                        return;
                    }
                }
            } catch (Exception e) {
                log.debug("‚ö†Ô∏è Selector '{}' failed: {}", selector, e.getMessage());
            }
        }
        
        // ‚úÖ –î–û–î–ê–ù–û: –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –∑–∞ —Ç–µ–∫—Å—Ç–æ–º
        try {
            List<WebElement> allButtons = driver.findElements(By.cssSelector("button, a"));
            for (WebElement button : allButtons) {
                String buttonText = button.getText().toLowerCase();
                if (buttonText.contains("load") || buttonText.contains("more") || buttonText.contains("show")) {
                    if (button.isDisplayed() && button.isEnabled()) {
                        log.info("‚úÖ Load More button found by text: '{}'", buttonText);
                        
                        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", button);
                        sleep(1000);
                        
                        button.click();
                        sleep(scrollDelay);
                        log.info("‚úÖ Load More button clicked successfully");
                        return;
                    }
                }
            }
        } catch (Exception e) {
            log.debug("‚ö†Ô∏è Text-based button search failed: {}", e.getMessage());
        }
        
        log.warn("‚ö†Ô∏è No Load More button found");
    }

    private void scrollToBottom(WebDriver driver) {
        log.info("üìú Starting scroll to bottom process...");
        
        // ‚úÖ –î–û–î–ê–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞—Ä—Ç–æ–∫
        int initialJobCount = driver.findElements(By.cssSelector(JOB_CARD_SELECTOR)).size();
        log.info("üîç Initial job cards found: {}", initialJobCount);
        
        // ‚úÖ –î–û–î–ê–ù–û: –°–ø—Ä–æ–±—É—î–º–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ —Å–µ–ª–µ–∫—Ç–æ—Ä–∏
        if (initialJobCount == 0) {
            log.warn("‚ö†Ô∏è Primary selector found 0 cards, trying alternatives...");
            tryAlternativeSelectors(driver);
        }
        
        // ‚úÖ –î–û–î–ê–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–π –º–µ—Ç–æ–¥ –∑ Load More
        scrollToLoadMore(driver);
    }

    /**
     * ‚úÖ –ù–û–í–ò–ô –ú–ï–¢–û–î: –°–ø—Ä–æ–±—É—î–º–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ —Å–µ–ª–µ–∫—Ç–æ—Ä–∏
     */
    private void tryAlternativeSelectors(WebDriver driver) {
        log.info("üîç Testing alternative selectors...");
        
        // –û—Ç—Ä–∏–º—É—î–º–æ HTML —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        String pageSource = driver.getPageSource();
        log.info("üìÑ Page source length: {} characters", pageSource.length());
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä—ñ–∑–Ω—ñ —Å–µ–ª–µ–∫—Ç–æ—Ä–∏
        String[] alternativeSelectors = {
            "div[class*='job']",
            "div[class*='position']", 
            "div[class*='vacancy']",
            "div[class*='card']",
            "div[class*='item']",
            "div[class*='listing']",
            "div[class*='posting']",
            "[data-testid*='job']",
            "[data-testid*='position']",
            "[data-testid*='card']",
            ".job-card",
            ".position-card",
            ".vacancy-card",
            ".job-item",
            ".position-item"
        };
        
        for (String selector : alternativeSelectors) {
            try {
                int count = driver.findElements(By.cssSelector(selector)).size();
                if (count > 0) {
                    log.info("‚úÖ Alternative selector '{}' found {} elements", selector, count);
                } else {
                    log.debug("‚ùå Selector '{}' found 0 elements", selector);
                }
            } catch (Exception e) {
                log.debug("‚ö†Ô∏è Selector '{}' failed: {}", selector, e.getMessage());
            }
        }
        
        // ‚úÖ –î–û–î–ê–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        log.info("üîç Page title: {}", driver.getTitle());
        log.info("üîç Current URL: {}", driver.getCurrentUrl());
        
        // –®—É–∫–∞—î–º–æ –±—É–¥—å-—è–∫—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        int totalLinks = driver.findElements(By.cssSelector("a[href]")).size();
        log.info("üîó Total links on page: {}", totalLinks);
        
        // –®—É–∫–∞—î–º–æ –±—É–¥—å-—è–∫—ñ div –µ–ª–µ–º–µ–Ω—Ç–∏
        int totalDivs = driver.findElements(By.cssSelector("div")).size();
        log.info("üì¶ Total div elements on page: {}", totalDivs);
    }

    /**
     * ‚úÖ –û–ù–û–í–õ–ï–ù–ò–ô –ú–ï–¢–û–î: –ê–¥–∞–ø—Ç–∏–≤–Ω–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∑ –≥—ñ–±—Ä–∏–¥–Ω–∏–º –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º
     * 
     * –ù–û–í–ê –õ–û–ì–Ü–ö–ê:
     * 1. –°–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É Load More –û–î–ò–ù —Ä–∞–∑ (—è–∫—â–æ –≤–æ–Ω–∞ —î)
     * 2. –ü–æ—Ç—ñ–º –∑–∞–ø—É—Å–∫–∞—î–º–æ —Ü–∏–∫–ª –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–æ—ó –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
     * 3. –í–∏—Ö–æ–¥–∏–º–æ –∑ —Ü–∏–∫–ª—É —Ç—ñ–ª—å–∫–∏ –∫–æ–ª–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∞–∫–∞–Ω—Å—ñ–π –ø–µ—Ä–µ—Å—Ç–∞—î –∑—Ä–æ—Å—Ç–∞—Ç–∏
     * 
     * –¶–µ –¥–æ–∑–≤–æ–ª—è—î –∞–¥–∞–ø—Ç—É–≤–∞—Ç–∏—Å—è –¥–æ –≥—ñ–±—Ä–∏–¥–Ω–æ–≥–æ –ø—ñ–¥—Ö–æ–¥—É —Å–∞–π—Ç—É:
     * - –°–ø–æ—á–∞—Ç–∫—É –∫–Ω–æ–ø–∫–∞ Load More
     * - –ü–æ—Ç—ñ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç—Ü—ñ
     */
    private void scrollToLoadMore(WebDriver driver) {
        log.info("üìú Starting ADAPTIVE scroll and load more process with hybrid approach...");
        
        JavascriptExecutor js = (JavascriptExecutor) driver;
        
        int initialJobCount = driver.findElements(By.cssSelector(JOB_CARD_SELECTOR)).size();
        log.info("üîç Initial job cards found: {}", initialJobCount);
        
        // ‚úÖ –ö–†–û–ö 1: –°–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É Load More –û–î–ò–ù —Ä–∞–∑ (—è–∫—â–æ –≤–æ–Ω–∞ —î)
        log.info("üîç –ö–†–û–ö 1: –®—É–∫–∞—î–º–æ —Ç–∞ –Ω–∞—Ç–∏—Å–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É Load More –û–î–ò–ù —Ä–∞–∑...");
        boolean loadMoreClicked = clickLoadMoreButtonOnce(driver);
        
        if (loadMoreClicked) {
            log.info("‚úÖ Load More button clicked successfully, waiting for content to load...");
            sleep(3000); // –î–∞—î–º–æ —á–∞—Å –Ω–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        } else {
            log.info("‚ÑπÔ∏è No Load More button found or clicked, proceeding with scroll-only approach");
        }
        
        // ‚úÖ –ö–†–û–ö 2: –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ü–∏–∫–ª –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–æ—ó –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        log.info("üîç –ö–†–û–ö 2: –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ü–∏–∫–ª –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–æ—ó –ø—Ä–æ–∫—Ä—É—Ç–∫–∏...");
        int previousJobCount = driver.findElements(By.cssSelector(JOB_CARD_SELECTOR)).size();
        int scrollAttempts = 0;
        int maxScrollAttempts = 50; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–± –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        int noNewJobsCount = 0;
        int maxNoNewJobsAttempts = 5; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–± –±–µ–∑ –Ω–æ–≤–∏—Ö –≤–∞–∫–∞–Ω—Å—ñ–π
        
        while (scrollAttempts < maxScrollAttempts && noNewJobsCount < maxNoNewJobsAttempts) {
            scrollAttempts++;
            
            // ‚úÖ –ö—Ä–æ–∫ 2.1: –°–∫—Ä–æ–ª–∏–º–æ –¥–æ –Ω–∏–∑—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏
            log.info("üìú Scroll attempt {}/{}: Scrolling to bottom...", scrollAttempts, maxScrollAttempts);
            js.executeScript("window.scrollTo(0, document.body.scrollHeight);");
            sleep(2000); // –ß–µ–∫–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            
            // ‚úÖ –ö—Ä–æ–∫ 2.2: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑'—è–≤–∏–ª–∏—Å—è –Ω–æ–≤—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó
            int currentJobCount = driver.findElements(By.cssSelector(JOB_CARD_SELECTOR)).size();
            log.info("üîç Current job count: {} (was: {})", currentJobCount, previousJobCount);
            
            if (currentJobCount > previousJobCount) {
                // –ó–Ω–∞–π—à–ª–∏ –Ω–æ–≤—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó - –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ
                int newJobs = currentJobCount - previousJobCount;
                log.info("üéâ Found {} new jobs after scroll! Total: {}", newJobs, currentJobCount);
                previousJobCount = currentJobCount;
                noNewJobsCount = 0; // –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫
                
                // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                sleep(2000);
                
            } else {
                // –ù–æ–≤—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó –Ω–µ –∑'—è–≤–∏–ª–∏—Å—è
                noNewJobsCount++;
                log.info("‚ö†Ô∏è No new jobs found. Attempt {}/{} without new jobs", noNewJobsCount, maxNoNewJobsAttempts);
                
                // –°–ø—Ä–æ–±—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É –ø—Ä–æ–∫—Ä—É—Ç–∫—É
                if (noNewJobsCount < maxNoNewJobsAttempts) {
                    log.info("üìú Trying additional scroll...");
                    js.executeScript("window.scrollTo(0, document.body.scrollHeight - 100);");
                    sleep(1000);
                    
                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–µ —Ä–∞–∑
                    int finalJobCount = driver.findElements(By.cssSelector(JOB_CARD_SELECTOR)).size();
                    if (finalJobCount > currentJobCount) {
                        log.info("üéâ Additional scroll helped! Found {} more jobs", finalJobCount - currentJobCount);
                        currentJobCount = finalJobCount;
                        previousJobCount = finalJobCount;
                        noNewJobsCount = 0; // –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫
                    }
                }
            }
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –¥–æ—Å—è–≥–ª–∏ –º–∏ –±–∞–∂–∞–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
            if (currentJobCount >= 369) {
                log.info("üéØ Reached target job count: {}", currentJobCount);
                break;
            }
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–æ —á–µ–∫–∞—î–º–æ
            if (scrollAttempts % 10 == 0) {
                log.info("üìä Progress: {} scroll attempts, {} jobs found, {} attempts without new jobs", 
                        scrollAttempts, currentJobCount, noNewJobsCount);
            }
        }
        
        int finalJobCount = driver.findElements(By.cssSelector(JOB_CARD_SELECTOR)).size();
        log.info("üèÅ ADAPTIVE scroll and load more process completed:");
        log.info("   ‚Ä¢ Total scroll attempts: {}", scrollAttempts);
        log.info("   ‚Ä¢ Final job count: {}", finalJobCount);
        log.info("   ‚Ä¢ Jobs added: {}", finalJobCount - initialJobCount);
        log.info("   ‚Ä¢ Load More button clicked: {}", loadMoreClicked);
        
        if (noNewJobsCount >= maxNoNewJobsAttempts) {
            log.info("‚ÑπÔ∏è Process stopped: {} consecutive attempts without new jobs", maxNoNewJobsAttempts);
        }
        
        if (scrollAttempts >= maxScrollAttempts) {
            log.info("‚ÑπÔ∏è Process stopped: reached maximum scroll attempts ({})", maxScrollAttempts);
        }
    }
    
    /**
     * ‚úÖ –ù–û–í–ò–ô –ú–ï–¢–û–î: –ù–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ Load More –û–î–ò–ù —Ä–∞–∑
     */
    private boolean clickLoadMoreButtonOnce(WebDriver driver) {
        log.info("üîç Looking for Load More button to click ONCE...");
        
        try {
            // –°–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –∫–Ω–æ–ø–∫–∏ Load More
            String[] loadMoreTexts = {"Load More", "Show More", "Load", "More", "See More"};
            WebElement loadMoreButton = null;
            
            for (String text : loadMoreTexts) {
                try {
                    // –®—É–∫–∞—î–º–æ –∑–∞ —Ç–µ–∫—Å—Ç–æ–º –∫–Ω–æ–ø–∫–∏
                    String xpath = String.format("//button[contains(text(), '%s')] | //a[contains(text(), '%s')]", text, text);
                    List<WebElement> buttons = driver.findElements(By.xpath(xpath));
                    
                    for (WebElement button : buttons) {
                        if (button.isDisplayed() && button.isEnabled()) {
                            loadMoreButton = button;
                            log.info("‚úÖ Found Load More button with text: '{}'", text);
                            break;
                        }
                    }
                    
                    if (loadMoreButton != null) break;
                    
                    // –®—É–∫–∞—î–º–æ –∑–∞ CSS —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
                    String[] selectors = {
                        "[data-testid*='load-more']",
                        "[data-testid*='show-more']",
                        ".load-more",
                        ".show-more",
                        "button[class*='load']",
                        "button[class*='more']"
                    };
                    
                    for (String selector : selectors) {
                        try {
                            List<WebElement> elements = driver.findElements(By.cssSelector(selector));
                            for (WebElement element : elements) {
                                if (element.isDisplayed() && element.isEnabled()) {
                                    loadMoreButton = element;
                                    log.info("‚úÖ Found Load More button with selector: '{}'", selector);
                                    break;
                                }
                            }
                            if (loadMoreButton != null) break;
                        } catch (Exception e) {
                            // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä—ñ–≤
                        }
                    }
                    
                    if (loadMoreButton != null) break;
                    
                } catch (Exception e) {
                    // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –ø–æ—à—É–∫
                }
            }
            
            if (loadMoreButton != null) {
                // ‚úÖ –ö–ª—ñ–∫–∞—î–º–æ –Ω–∞ –∫–Ω–æ–ø–∫—É Load More –û–î–ò–ù —Ä–∞–∑
                log.info("üñ±Ô∏è Clicking Load More button ONCE...");
                
                // –°–∫—Ä–æ–ª–∏–º–æ –¥–æ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–¥ –∫–ª—ñ–∫–æ–º
                JavascriptExecutor js = (JavascriptExecutor) driver;
                js.executeScript("arguments[0].scrollIntoView({block: 'center'});", loadMoreButton);
                sleep(1000);
                
                // –ö–ª—ñ–∫–∞—î–º–æ
                loadMoreButton.click();
                
                log.info("‚úÖ Load More button clicked ONCE successfully");
                return true;
                
            } else {
                log.info("‚ÑπÔ∏è No Load More button found");
                return false;
            }
            
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Error clicking Load More button: {}", e.getMessage());
            return false;
        }
    }

    /**
     * ‚úÖ –û–ù–û–í–õ–ï–ù–ê –í–ï–†–°–Ü–Ø –°–ö–†–ê–ü–Ü–ù–ì–£ –ó –ù–û–í–û–Æ –õ–û–ì–Ü–ö–û–Æ –¢–ê –ì–Ü–ë–†–ò–î–ù–ò–ú –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø–ú
     * 
     * –ù–û–í–ê –õ–û–ì–Ü–ö–ê:
     * 1. –°–ø–æ—á–∞—Ç–∫—É –≤–∏–±–∏—Ä–∞—î—Ç—å—Å—è job Function (—Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏)
     * 2. –ü–æ—Ç—ñ–º –Ω–∞—Ç–∏—Å–∫–∞—î—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞ Load More –û–î–ò–ù —Ä–∞–∑ (—è–∫—â–æ –≤–æ–Ω–∞ —î)
     * 3. –î–∞–ª—ñ –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è —Ü–∏–∫–ª –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–æ—ó –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º
     * 4. –í–∏—Ö–æ–¥–∏–º–æ –∑ —Ü–∏–∫–ª—É —Ç—ñ–ª—å–∫–∏ –∫–æ–ª–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∞–∫–∞–Ω—Å—ñ–π –ø–µ—Ä–µ—Å—Ç–∞—î –∑—Ä–æ—Å—Ç–∞—Ç–∏
     * 5. –Ü —Ç—ñ–ª—å–∫–∏ –ø–æ—Ç—ñ–º –∑—á–∏—Ç—É–≤–∞–Ω–Ω—è URL —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–µ—Ñ—ñ–∫—Å—É
     * 6. –Ø–∫—â–æ URL –º—ñ—Å—Ç–∏—Ç—å https://jobs.techstars.com/companies/ - –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ë–ï–ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–µ–≥—ñ–≤
     * 
     * –ì–Ü–ë–†–ò–î–ù–ò–ô –ü–Ü–î–•–Ü–î:
     * - –°–ø–æ—á–∞—Ç–∫—É –∫–Ω–æ–ø–∫–∞ Load More (—è–∫—â–æ —î)
     * - –ü–æ—Ç—ñ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç—Ü—ñ
     * - –ê–¥–∞–ø—Ç–∏–≤–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∫–æ–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –±—ñ–ª—å—à–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è
     */
    private List<Job> scrapeAllJobsWithImprovedLogic(WebDriver driver, List<String> requiredTags, List<String> jobFunctions) {
        log.info("üîç Starting updated job scraping process with NEW LOGIC...");
        log.info("üîç Job functions to filter by: {} (type: {})", jobFunctions, 
                jobFunctions != null ? jobFunctions.getClass().getSimpleName() : "null");
        log.info("üîç Required tags to filter by: {} (type: {})", requiredTags, 
                requiredTags != null ? requiredTags.getClass().getSimpleName() : "null");
        
        if (jobFunctions != null) {
            for (int i = 0; i < jobFunctions.size(); i++) {
                String function = jobFunctions.get(i);
                log.info("üîç Job function {}: '{}' (type: {})", i, function, 
                        function != null ? function.getClass().getSimpleName() : "null");
            }
        }
        
        // ‚úÖ –ö–†–û–ö 1: –°–ø–æ—á–∞—Ç–∫—É —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ job functions
        log.info("üîç –ö–†–û–ö 1: –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é –∑–∞ job functions...");
        
        // ‚úÖ –ö–†–û–ö 2: –ù–∞—Ç–∏—Å–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É Load More –û–î–ò–ù —Ä–∞–∑
        log.info("üîç –ö–†–û–ö 2: –ù–∞—Ç–∏—Å–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É Load More –û–î–ò–ù —Ä–∞–∑...");
        clickLoadMoreButton(driver);
        
        // ‚úÖ –ö–†–û–ö 3: –°–∫—Ä–æ–ª–∏–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–æ –Ω–∏–∑—É
        log.info("üîç –ö–†–û–ö 3: –°–∫—Ä–æ–ª–∏–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–æ –Ω–∏–∑—É...");
        scrollToBottom(driver);
        
        // ‚úÖ –ö–†–û–ö 4: –¢–µ–ø–µ—Ä —à—É–∫–∞—î–º–æ –≤—Å—ñ –∫–∞—Ä—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å—ñ–π
        log.info("üîç –ö–†–û–ö 4: –®—É–∫–∞—î–º–æ –≤—Å—ñ –∫–∞—Ä—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å—ñ–π –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...");
        List<WebElement> jobCards = findJobCardsWithMultipleStrategies(driver);
        List<Job> jobs = new ArrayList<>();
        
        log.info("üìã Found {} job cards to process", jobCards.size());
        
        if (jobCards.isEmpty()) {
            log.error("‚ùå CRITICAL: No job cards found with any strategy!");
            return jobs;
        }
        
        int passedTagFilter = 0;
        int passedFunctionFilter = 0;
        int foundUrls = 0;
        int savedWithCompanyPrefix = 0;
        int savedWithoutCompanyPrefix = 0;
        
        for (int i = 0; i < jobCards.size(); i++) {
            try {
                WebElement card = jobCards.get(i);
                
                // –õ–æ–≥—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ 5 –∫–∞—Ä—Ç–æ–∫ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                boolean isFirstCards = i < 5;
                if (isFirstCards) {
                    String cardText = card.getText();
                    String preview = cardText.length() > 200 ? cardText.substring(0, 200) + "..." : cardText;
                    log.info("üîç Processing card {}: {}", i + 1, preview);
                }
                
                // ‚úÖ –ö–†–û–ö 5: –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ job functions (–ü–ï–†–®–ò–ô –ö–†–û–ö –ó–ê –ù–û–í–û–Æ –õ–û–ì–Ü–ö–û–Æ)
                if (!hasRequiredJobFunction(card, jobFunctions)) {
                    if (isFirstCards) {
                        log.info("üîç Card {} failed function filter", i + 1);
                        // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –ø–µ—Ä—à–∏—Ö –∫–∞—Ä—Ç–æ–∫
                        String cardText = card.getText().toLowerCase();
                        log.info("üîç Card {} text preview: '{}'", i + 1, 
                                cardText.length() > 300 ? cardText.substring(0, 300) + "..." : cardText);
                    }
                    continue;
                }
                passedFunctionFilter++;
                
                if (isFirstCards) {
                    log.info("üîç Card {} passed function filter", i + 1);
                }
                
                // ‚úÖ –ö–†–û–ö 6: –ü–æ—à—É–∫ URL (–î–†–£–ì–ò–ô –ö–†–û–ö –ó–ê –ù–û–í–û–Æ –õ–û–ì–Ü–ö–û–Æ)
                String jobPageUrl = findDirectJobUrl(card);
                if (jobPageUrl == null) {
                    if (isFirstCards) {
                        log.info("üîç Card {}: No URL found after passing function filter", i + 1);
                    }
                    continue;
                }
                
                foundUrls++;
                
                if (isFirstCards) {
                    log.info("üîç Card {}: URL found: {}", i + 1, jobPageUrl);
                }
                
                // ‚úÖ –ö–†–û–ö 7: –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∞–∫–∞–Ω—Å—ñ—ó (–≤—Å—ñ –ø—Ä–æ—Ö–æ–¥—è—Ç—å –æ–¥–Ω–∞–∫–æ–≤—É –æ–±—Ä–æ–±–∫—É)
                Job job = createJobFromCard(card, jobPageUrl, jobFunctions);
                if (job != null) {
                    jobs.add(job);
                    if (jobPageUrl.startsWith(REQUIRED_PREFIX)) {
                        savedWithCompanyPrefix++;
                        log.info("‚úÖ Card {} saved (with company prefix)", i + 1);
                    } else {
                        savedWithoutCompanyPrefix++;
                        log.info("‚úÖ Card {} saved (without company prefix)", i + 1);
                    }
                }
                
                if (i % 10 == 0) {
                    log.info("üìä Processed {}/{} job cards", i + 1, jobCards.size());
                }
                
            } catch (Exception e) {
                log.warn("‚ö†Ô∏è Error scraping job card {}: {}", i + 1, e.getMessage());
            }
        }
        
        // ‚úÖ –û–ù–û–í–õ–ï–ù–û: –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –∑–≤—ñ—Ç –∑ –Ω–æ–≤–æ—é –ª–æ–≥—ñ–∫–æ—é
        printUpdatedFinalReport(jobCards.size(), passedTagFilter, passedFunctionFilter, foundUrls, 
                               jobs.size(), savedWithCompanyPrefix, savedWithoutCompanyPrefix, jobFunctions);
        return jobs;
    }

    /**
     * ‚úÖ –û–ù–û–í–õ–ï–ù–ò–ô –ú–ï–¢–û–î: –í–∏–∑–Ω–∞—á–∞—î —Ç–∏–ø —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —Ç–∞ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –ª–æ–≥—ñ–∫—É —Å–∫—Ä–∞–ø—ñ–Ω–≥—É
     * –í—Å—ñ –º–µ—Ç–æ–¥–∏ —Ç–µ–ø–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å –Ω–æ–≤—É –≥—ñ–±—Ä–∏–¥–Ω—É –ª–æ–≥—ñ–∫—É: 
     * 1) job functions ‚Üí 2) Load More (–û–î–ò–ù —Ä–∞–∑) ‚Üí 3) –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ ‚Üí 4) URL ‚Üí 5) –ø—Ä–µ—Ñ—ñ–∫—Å –∫–æ–º–ø–∞–Ω—ñ—ó ‚Üí 6) –∑–±—ñ—Ä —Ç–µ–≥—ñ–≤
     */
    private List<Job> scrapeJobsBasedOnPageType(WebDriver driver, List<String> requiredTags, List<String> jobFunctions) {
        String currentUrl = driver.getCurrentUrl();
        log.info("üîç Current URL: {}", currentUrl);
        
        if (currentUrl.contains("/companies/") && currentUrl.contains("/jobs/")) {
            // –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –≤–∞–∫–∞–Ω—Å—ñ—ó
            log.info("üéØ Detected job detail page, applying new filtering logic...");
            return scrapeSingleJobFromDetailPage(driver, jobFunctions);
            
        } else if (currentUrl.contains("/companies/")) {
            // –°—Ç–æ—Ä—ñ–Ω–∫–∞ –∫–æ–º–ø–∞–Ω—ñ—ó –∑—ñ —Å–ø–∏—Å–∫–æ–º –≤–∞–∫–∞–Ω—Å—ñ–π
            log.info("üè¢ Detected company page, applying new filtering logic...");
            return scrapeJobsFromCompanyPage(driver, requiredTags, jobFunctions);
            
        } else if (currentUrl.contains("/jobs")) {
            // –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∑—ñ —Å–ø–∏—Å–∫–æ–º –≤–∞–∫–∞–Ω—Å—ñ–π
            log.info("üìã Detected main jobs page, applying new filtering logic...");
            return scrapeJobsFromMainPage(driver, requiredTags, jobFunctions);
            
        } else {
            // –ù–µ–≤—ñ–¥–æ–º–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
            log.warn("‚ö†Ô∏è Unknown page type, trying default scraping with new logic...");
            return scrapeJobsFromMainPage(driver, requiredTags, jobFunctions);
        }
    }
    
    /**
     * ‚úÖ –û–ù–û–í–õ–ï–ù–ò–ô –ú–ï–¢–û–î: –°–∫—Ä–∞–ø—ñ–Ω–≥ –æ–¥–Ω—ñ—î—ó –≤–∞–∫–∞–Ω—Å—ñ—ó –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑ –Ω–æ–≤–æ—é –ª–æ–≥—ñ–∫–æ—é
     */
    private List<Job> scrapeSingleJobFromDetailPage(WebDriver driver, List<String> jobFunctions) {
        List<Job> jobs = new ArrayList<>();
        
        try {
            String currentUrl = driver.getCurrentUrl();
            
            // ‚úÖ –ö–†–û–ö 1: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ URL –º—ñ—Å—Ç–∏—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –ø—Ä–µ—Ñ—ñ–∫—Å –∫–æ–º–ø–∞–Ω—ñ—ó
            if (currentUrl.startsWith(REQUIRED_PREFIX)) {
                log.info("üîç Detail page: URL contains company prefix '{}', applying new logic", REQUIRED_PREFIX);
                
                // ‚úÖ –ö–†–û–ö 1: –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ (–ü–ï–†–®–ò–ô –ö–†–û–ö –ó–ê –ù–û–í–û–Æ –õ–û–ì–Ü–ö–û–Æ)
                if (jobFunctions != null && !jobFunctions.isEmpty()) {
                    // –®—É–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∞–∫–∞–Ω—Å—ñ—ó –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü—ñ—ó
                    String positionName = extractTitleFromDetailPage(driver);
                    if (positionName == null || positionName.trim().isEmpty()) {
                        log.warn("‚ö†Ô∏è Could not extract position name from detail page");
                        return jobs;
                    }
                    
                    String positionText = positionName.toLowerCase();
                    boolean hasRequiredFunction = jobFunctions.stream()
                        .anyMatch(function -> positionText.contains(function.toLowerCase()));
                    
                    if (!hasRequiredFunction) {
                        log.info("üîç Detail page: Position '{}' does not match required functions: {}", positionName, jobFunctions);
                        return jobs; // –ù–µ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ, —è–∫—â–æ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ñ—É–Ω–∫—Ü—ñ—è–º
                    }
                }
                
                // ‚úÖ –ö–†–û–ö 2: –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ (–≤—Å—ñ –ø—Ä–æ—Ö–æ–¥—è—Ç—å –æ–¥–Ω–∞–∫–æ–≤—É –æ–±—Ä–æ–±–∫—É)
                log.info("üîç Detail page: All filters passed, saving job (tags will be collected)");
                
                // –®—É–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∞–∫–∞–Ω—Å—ñ—ó
                String positionName = extractTitleFromDetailPage(driver);
                if (positionName == null || positionName.trim().isEmpty()) {
                    log.warn("‚ö†Ô∏è Could not extract position name from detail page");
                    return jobs;
                }
                
                // –®—É–∫–∞—î–º–æ –Ω–∞–∑–≤—É –∫–æ–º–ø–∞–Ω—ñ—ó
                String companyName = extractCompanyNameFromDetailPage(driver);
                
                // –®—É–∫–∞—î–º–æ —Ç–µ–≥–∏
                List<String> tags = extractTagsFromDetailPage(driver);
                
                // –®—É–∫–∞—î–º–æ –ª–æ–∫–∞—Ü—ñ—é
                String location = extractLocationFromDetailPage(driver);
                
                // –®—É–∫–∞—î–º–æ –¥–∞—Ç—É –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó
                LocalDateTime postedDate = extractPostedDateFromDetailPage(driver);
                
                // ‚úÖ –î–û–î–ê–ù–û: –®—É–∫–∞—î–º–æ –æ–ø–∏—Å –≤–∞–∫–∞–Ω—Å—ñ—ó
                String description = extractDescriptionFromDetailPage(driver);
                
                // ‚úÖ –î–û–î–ê–ù–û: –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ–± –Ω–µ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –Ω–∞–∑–≤—É –≤–∞–∫–∞–Ω—Å—ñ—ó —è–∫ –æ–ø–∏—Å
                if (description != null && description.equals(positionName)) {
                    log.debug("üìù Skipping description as it matches position name: '{}'", description);
                    description = null;
                }
                
                // –°—Ç–≤–æ—Ä—é—î–º–æ Job –æ–±'—î–∫—Ç
                Job job = jobCreationService.createJobWithAllData(
                    currentUrl, positionName, companyName, null, location, tags, postedDate, jobFunctions, description
                );
                
                if (job != null) {
                    // ‚úÖ –î–û–î–ê–ù–û: –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–ø–∏—Å –≤–∞–∫–∞–Ω—Å—ñ—ó —á–µ—Ä–µ–∑ DescriptionIngestService (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ü–µ –Ω–µ –∑–∞–≥–ª—É—à–∫–∞)
                    if (description != null && !description.trim().isEmpty() && 
                        !description.equals("Job scraped from Techstars")) {
                        try {
                            boolean descriptionSaved = descriptionIngestService.saveDescription(job, description);
                            if (descriptionSaved) {
                                log.info("‚úÖ Successfully saved description for job ID: {}", job.getId());
                            } else {
                                log.warn("‚ö†Ô∏è Failed to save description for job ID: {}", job.getId());
                            }
                        } catch (Exception e) {
                            log.error("‚ùå Error saving description for job ID: {}, error: {}", 
                                    job.getId(), e.getMessage(), e);
                        }
                    }
                    
                    jobs.add(job);
                    log.info("‚úÖ Successfully scraped job: {}", positionName);
                }
                
            } else {
                // URL –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –ø—Ä–µ—Ñ—ñ–∫—Å –∫–æ–º–ø–∞–Ω—ñ—ó - –∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É –ª–æ–≥—ñ–∫—É
                log.info("üîç Detail page: URL does not contain company prefix, applying standard filtering");
                
                // –®—É–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∞–∫–∞–Ω—Å—ñ—ó
                String positionName = extractTitleFromDetailPage(driver);
                if (positionName == null || positionName.trim().isEmpty()) {
                    log.warn("‚ö†Ô∏è Could not extract position name from detail page");
                    return jobs;
                }
                
                // ‚úÖ –ö–†–û–ö 2: –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ (–ü–ï–†–®–ò–ô –ö–†–û–ö –ó–ê –ù–û–í–û–Æ –õ–û–ì–Ü–ö–û–Æ)
                if (jobFunctions != null && !jobFunctions.isEmpty()) {
                    String positionText = positionName.toLowerCase();
                    boolean hasRequiredFunction = jobFunctions.stream()
                        .anyMatch(function -> positionText.contains(function.toLowerCase()));
                    
                    if (!hasRequiredFunction) {
                        log.info("üîç Detail page: Position '{}' does not match required functions: {}", positionName, jobFunctions);
                        return jobs; // –ù–µ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ, —è–∫—â–æ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ñ—É–Ω–∫—Ü—ñ—è–º
                    }
                }
                
                // ‚úÖ –ö–†–û–ö 3: –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ
                log.info("üîç Detail page: All filters passed, saving job with standard filtering (tags will be collected)");
                
                // –®—É–∫–∞—î–º–æ –Ω–∞–∑–≤—É –∫–æ–º–ø–∞–Ω—ñ—ó
                String companyName = extractCompanyNameFromDetailPage(driver);
                
                // –®—É–∫–∞—î–º–æ —Ç–µ–≥–∏
                List<String> tags = extractTagsFromDetailPage(driver);
                
                // –®—É–∫–∞—î–º–æ –ª–æ–∫–∞—Ü—ñ—é
                String location = extractLocationFromDetailPage(driver);
                
                // –®—É–∫–∞—î–º–æ –¥–∞—Ç—É –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó
                LocalDateTime postedDate = extractPostedDateFromDetailPage(driver);
                
                // ‚úÖ –î–û–î–ê–ù–û: –®—É–∫–∞—î–º–æ –æ–ø–∏—Å –≤–∞–∫–∞–Ω—Å—ñ—ó
                String description = extractDescriptionFromDetailPage(driver);
                
                // –°—Ç–≤–æ—Ä—é—î–º–æ Job –æ–±'—î–∫—Ç
                Job job = jobCreationService.createJobWithAllData(
                    currentUrl, positionName, companyName, null, location, tags, postedDate, jobFunctions, description
                );
                
                if (job != null) {
                    jobs.add(job);
                    log.info("‚úÖ Successfully scraped job with standard filtering: {}", positionName);
                }
            }
            
        } catch (Exception e) {
            log.error("‚ùå Error scraping job from detail page: {}", e.getMessage());
        }
        
        return jobs;
    }
    
    /**
     * ‚úÖ –û–ù–û–í–õ–ï–ù–ò–ô –ú–ï–¢–û–î: –°–∫—Ä–∞–ø—ñ–Ω–≥ –≤–∞–∫–∞–Ω—Å—ñ–π –∑—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∫–æ–º–ø–∞–Ω—ñ—ó –∑ –Ω–æ–≤–æ—é –≥—ñ–±—Ä–∏–¥–Ω–æ—é –ª–æ–≥—ñ–∫–æ—é
     * –ù–ï –ü–ï–†–ï–í–Ü–†–Ø–Ñ–ú–û —Ç–µ–≥–∏ –¥–ª—è URL –∑ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º –∫–æ–º–ø–∞–Ω—ñ—ó
     * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î: 1) job functions ‚Üí 2) URL ‚Üí 3) –ø—Ä–µ—Ñ—ñ–∫—Å –∫–æ–º–ø–∞–Ω—ñ—ó ‚Üí 4) –∑–±—ñ—Ä —Ç–µ–≥—ñ–≤
     */
    private List<Job> scrapeJobsFromCompanyPage(WebDriver driver, List<String> requiredTags, List<String> jobFunctions) {
        List<Job> jobs = new ArrayList<>();
        
        try {
            // –®—É–∫–∞—î–º–æ –∫–∞—Ä—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å—ñ–π –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –∫–æ–º–ø–∞–Ω—ñ—ó
            List<WebElement> jobCards = findJobCardsOnCompanyPage(driver);
            log.info("üîç Found {} job cards on company page", jobCards.size());
            
            for (WebElement card : jobCards) {
                try {
                    // ‚úÖ –ö–†–û–ö 1: –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ (–ü–ï–†–®–ò–ô –ö–†–û–ö –ó–ê –ù–û–í–û–Æ –õ–û–ì–Ü–ö–û–Æ)
                    if (!hasRequiredJobFunction(card, jobFunctions)) {
                        continue;
                    }
                    
                    // ‚úÖ –ö–†–û–ö 2: –ü–æ—à—É–∫ URL (–î–†–£–ì–ò–ô –ö–†–û–ö –ó–ê –ù–û–í–û–Æ –õ–û–ì–Ü–ö–û–Æ)
                    String jobPageUrl = findDirectJobUrl(card);
                    if (jobPageUrl == null) {
                        continue;
                    }
                    
                    // ‚úÖ –ö–†–û–ö 3: –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∞–∫–∞–Ω—Å—ñ—ó (–≤—Å—ñ –ø—Ä–æ—Ö–æ–¥—è—Ç—å –æ–¥–Ω–∞–∫–æ–≤—É –æ–±—Ä–æ–±–∫—É)
                    Job job = createJobFromCard(card, jobPageUrl, jobFunctions);
                    if (job != null) {
                        jobs.add(job);
                    }
                    
                } catch (Exception e) {
                    log.warn("‚ö†Ô∏è Error processing job card on company page: {}", e.getMessage());
                }
            }
            
        } catch (Exception e) {
            log.error("‚ùå Error scraping jobs from company page: {}", e.getMessage());
        }
        
        return jobs;
    }
    
    /**
     * ‚úÖ –û–ù–û–í–õ–ï–ù–ò–ô –ú–ï–¢–û–î: –°–∫—Ä–∞–ø—ñ–Ω–≥ –≤–∞–∫–∞–Ω—Å—ñ–π –∑ –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
     * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –Ω–æ–≤—É –≥—ñ–±—Ä–∏–¥–Ω—É –ª–æ–≥—ñ–∫—É: 
     * 1) job functions ‚Üí 2) Load More (–û–î–ò–ù —Ä–∞–∑) ‚Üí 3) –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ ‚Üí 4) URL ‚Üí 5) –ø—Ä–µ—Ñ—ñ–∫—Å –∫–æ–º–ø–∞–Ω—ñ—ó ‚Üí 6) –∑–±—ñ—Ä —Ç–µ–≥—ñ–≤
     */
    private List<Job> scrapeJobsFromMainPage(WebDriver driver, List<String> requiredTags, List<String> jobFunctions) {
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É –ª–æ–≥—ñ–∫—É –∑ –Ω–æ–≤–∏–º –ø–æ—Ä—è–¥–∫–æ–º —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
        return scrapeAllJobsWithImprovedLogic(driver, requiredTags, jobFunctions);
    }

    /**
     * ‚úÖ –ù–û–í–ò–ô –ú–ï–¢–û–î: –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–∞—Ä—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å—ñ–π –∫—ñ–ª—å–∫–æ–º–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è–º–∏
     */
    private List<WebElement> findJobCardsWithMultipleStrategies(WebDriver driver) {
        log.info("üîç Finding job cards with multiple strategies...");
        
        // ‚úÖ –î–û–î–ê–ù–û: –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        log.info("üîç Testing {} specific selectors from ScrapingSelectors.JOB_CARD", ScrapingSelectors.JOB_CARD.length);
        
        // –°–ø—Ä–æ–±—É—î–º–æ –≤—Å—ñ —Å–µ–ª–µ–∫—Ç–æ—Ä–∏ –∑ ScrapingSelectors.JOB_CARD
        for (int i = 0; i < ScrapingSelectors.JOB_CARD.length; i++) {
            String selector = ScrapingSelectors.JOB_CARD[i];
            try {
                List<WebElement> elements = driver.findElements(By.cssSelector(selector));
                log.info("üîç Selector {}: '{}' -> found {} elements", i + 1, selector, elements.size());
                
                if (!elements.isEmpty()) {
                    // ‚úÖ –î–û–î–ê–ù–û: –í–∞–ª—ñ–¥–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ - —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ
                    List<WebElement> validElements = filterValidJobCards(elements);
                    log.info("üîç After validation: {} valid elements out of {} total", validElements.size(), elements.size());
                    
                    if (!validElements.isEmpty()) {
                        log.info("‚úÖ Found {} valid job cards with selector: '{}'", validElements.size(), selector);
                        return validElements;
                    }
                }
            } catch (Exception e) {
                log.warn("‚ö†Ô∏è Selector '{}' failed: {}", selector, e.getMessage());
            }
        }
        
        // –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏, —Å–ø—Ä–æ–±—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—ñ —Å–µ–ª–µ–∫—Ç–æ—Ä–∏
        log.warn("‚ö†Ô∏è No job cards found with specific selectors, trying general selectors...");
        
        String[] generalSelectors = {
            "div[class*='job']", "div[class*='position']", "div[class*='card']", 
            "div[class*='item']", "div[class*='listing']", "div[class*='posting']",
            "div[class*='sc-']", "div[class*='opportunity']"
        };
        
        for (String selector : generalSelectors) {
            try {
                List<WebElement> elements = driver.findElements(By.cssSelector(selector));
                log.info("üîç General selector '{}' -> found {} elements", selector, elements.size());
                
                if (!elements.isEmpty()) {
                    log.info("‚úÖ Found {} elements with general selector: '{}'", elements.size(), selector);
                    return elements;
                }
            } catch (Exception e) {
                log.debug("‚ö†Ô∏è General selector '{}' failed: {}", selector, e.getMessage());
            }
        }
        
        // –û—Å—Ç–∞–Ω–Ω—è —Å–ø—Ä–æ–±–∞ - –∑–Ω–∞–π—Ç–∏ –±—É–¥—å-—è–∫—ñ div –µ–ª–µ–º–µ–Ω—Ç–∏
        log.warn("‚ö†Ô∏è No specific elements found, trying to find any div elements...");
        List<WebElement> allDivs = driver.findElements(By.tagName("div"));
        log.info("üîç Found {} total div elements on page", allDivs.size());
        
        // ‚úÖ –î–û–î–ê–ù–û: –ê–Ω–∞–ª—ñ–∑ –ø–µ—Ä—à–∏—Ö –∫—ñ–ª—å–∫–æ—Ö div –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        int sampleSize = Math.min(10, allDivs.size());
        for (int i = 0; i < sampleSize; i++) {
            try {
                WebElement div = allDivs.get(i);
                String className = div.getAttribute("class");
                String dataTestId = div.getAttribute("data-testid");
                String tagName = div.getTagName();
                String text = div.getText();
                log.info("üîç Div {}: tag='{}', class='{}', data-testid='{}', text='{}'", 
                    i + 1, tagName, className, dataTestId, 
                    text.length() > 50 ? text.substring(0, 50) + "..." : text);
            } catch (Exception e) {
                log.warn("‚ö†Ô∏è Error analyzing div {}: {}", i + 1, e.getMessage());
            }
        }
        
        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–µ—Ä—à—ñ 50 div –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        return allDivs.subList(0, Math.min(50, allDivs.size()));
    }

    /**
     * ‚úÖ –ù–û–í–ê, –ù–ê–î–Ü–ô–ù–ê –í–ï–†–°–Ü–Ø –ú–ï–¢–û–î–£
     * –®—É–∫–∞—î –ø—Ä—è–º–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤–∞–∫–∞–Ω—Å—ñ—é –≤ –∫–∞—Ä—Ç—Ü—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –∫—ñ–ª—å–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π
     */
    private String findDirectJobUrl(WebElement jobCard) {
        try {
            // –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 1: –®—É–∫–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º –∞—Ç—Ä–∏–±—É—Ç–æ–º data-testid
            try {
                WebElement specificLink = jobCard.findElement(By.cssSelector("a[data-testid='job-card-link']"));
                String url = specificLink.getAttribute("href");
                if (url != null && !url.isBlank()) {
                    log.debug("üîç –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 1: –ó–Ω–∞–π–¥–µ–Ω–æ URL –∑–∞ data-testid: {}", url);
                    return url;
                }
            } catch (Exception e) {
                // –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 1 –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∞
            }

            // –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 2: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π –µ–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç–∫–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º
            try {
                WebElement parent = jobCard.findElement(By.xpath(".."));
                if (parent != null && "a".equals(parent.getTagName())) {
                    String url = parent.getAttribute("href");
                    if (url != null && !url.isBlank()) {
                        log.debug("üîç –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 2: –ó–Ω–∞–π–¥–µ–Ω–æ URL —É –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞: {}", url);
                        return url;
                    }
                }
            } catch (Exception e) {
                // –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 2 –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∞
            }

            // –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 3: –®—É–∫–∞—î–º–æ –ø–µ—Ä—à–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –∫–∞—Ä—Ç–∫–∏
            try {
                List<WebElement> allLinks = jobCard.findElements(By.cssSelector("a[href]"));
                for (WebElement link : allLinks) {
                    String url = link.getAttribute("href");
                    if (url != null && (url.contains("/jobs/") || url.contains("/companies/"))) {
                        log.debug("üîç –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 3: –ó–Ω–∞–π–¥–µ–Ω–æ URL –∑–∞ –≤–º—ñ—Å—Ç–æ–º href: {}", url);
                        return url;
                    }
                }
            } catch (Exception e) {
                // –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 3 –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∞
            }

            log.debug("‚ö†Ô∏è –ñ–æ–¥–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è –ø–æ—à—É–∫—É URL –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∞ –¥–ª—è —Ü—ñ—î—ó –∫–∞—Ä—Ç–∫–∏");
            return null;
            
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Error in findDirectJobUrl: {}", e.getMessage());
            return null;
        }
    }

    private boolean hasRequiredTags(WebElement jobCard, List<String> requiredTags) {
        if (requiredTags == null || requiredTags.isEmpty()) {
            log.debug("üîç No required tags specified, passing all cards");
            return true;
        }
        
        try {
            String cardText = jobCard.getText().toLowerCase();
            log.debug("üîç Card text (first 200 chars): '{}'", 
                cardText.length() > 200 ? cardText.substring(0, 200) + "..." : cardText);
            
            boolean hasTags = requiredTags.stream()
                    .anyMatch(tag -> {
                        boolean contains = cardText.contains(tag.toLowerCase());
                        log.debug("üîç Tag '{}' found: {}", tag, contains);
                        return contains;
                    });
            
            log.debug("üîç Card passed tag filter: {}", hasTags);
            return hasTags;
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Error checking tags: {}", e.getMessage());
            return true; // –í —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
        }
    }

    private boolean hasRequiredJobFunction(WebElement jobCard, List<String> jobFunctions) {
        log.info("üîç Checking job functions: {}", jobFunctions);
        
        if (jobFunctions == null || jobFunctions.isEmpty()) {
            log.info("üîç No required job functions specified, passing all cards");
            return true;
        }
        
        try {
            String cardText = jobCard.getText().toLowerCase();
            log.info("üîç Card text (first 200 chars): '{}'", 
                cardText.length() > 200 ? cardText.substring(0, 200) + "..." : cardText);
            
            boolean hasFunction = jobFunctions.stream()
                    .anyMatch(function -> {
                        String functionName = function.toLowerCase();
                        boolean contains = cardText.contains(functionName);
                        log.info("üîç Job function '{}' found: {} in card text", functionName, contains);
                        if (!contains) {
                            log.info("üîç Card text does not contain '{}'. Full card text: '{}'", functionName, cardText);
                        }
                        return contains;
                    });
            
            log.info("üîç Card passed job function filter: {}", hasFunction);
            return hasFunction;
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Error checking job functions: {}", e.getMessage());
            return true; // –í —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
        }
    }

    private Job createJobFromCard(WebElement card, String jobPageUrl, List<String> jobFunctions) {
        try {
            log.debug("üîç Creating Job object for URL: {}", jobPageUrl);
            
            // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –∫–æ–º–ø–∞–Ω—ñ—ó
            String organizationTitle = extractCompanyNameFromCard(card, jobPageUrl);
            
            // ‚úÖ –î–û–î–ê–ù–û: –®—É–∫–∞—î–º–æ –Ω–∞–∑–≤—É –ø–æ–∑–∏—Ü—ñ—ó
            String positionName = extractTitleFromCard(card);
            
            // ‚úÖ –î–û–î–ê–ù–û: –í–∏—Ç—è–≥—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
            List<String> tags = extractTagsFromCard(card);
            String location = extractLocationFromCard(card);
            LocalDateTime postedDate = extractPostedDateFromCard(card);
            String logoUrl = extractLogoUrlFromCard(card);
            
            // ‚úÖ –î–û–î–ê–ù–û: –í–∏—Ç—è–≥—É—î–º–æ –æ–ø–∏—Å –≤–∞–∫–∞–Ω—Å—ñ—ó
            String description = extractDescriptionFromCard(card);
            
            String defaultFunction = jobFunctions.isEmpty() ? 
                    "Software Engineering" : jobFunctions.get(0);
            
            log.info("üè¢ Company name extracted: '{}' for URL: {}", organizationTitle, jobPageUrl);
            log.info("üíº Position name: '{}'", positionName);
            log.info("üè∑Ô∏è Tags found: {}", tags);
            log.info("üìç Location: '{}'", location);
            log.info("üìÖ Posted date: '{}' (Unix: {})", postedDate, 
                    postedDate != null ? postedDate.toEpochSecond(java.time.ZoneOffset.UTC) : "null");
            log.info("üñºÔ∏è Logo URL: '{}'", logoUrl);
            log.info("üìù Description: '{}'", description != null ? description : "Not found");
            
            // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ JobCreationService –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è Job –∑ —É—Å—ñ–º–∞ –¥–∞–Ω–∏–º–∏
            Job job = jobCreationService.createJobWithAllData(
                jobPageUrl, positionName, organizationTitle, logoUrl, location, tags, postedDate, jobFunctions, description
            );
            
            // ‚úÖ –î–û–î–ê–ù–û: –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–ø–∏—Å –≤–∞–∫–∞–Ω—Å—ñ—ó —á–µ—Ä–µ–∑ DescriptionIngestService (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ü–µ –Ω–µ –∑–∞–≥–ª—É—à–∫–∞)
            if (job != null && description != null && !description.trim().isEmpty() && 
                !description.equals("Job scraped from Techstars")) {
                try {
                    boolean descriptionSaved = descriptionIngestService.saveDescription(job, description);
                    if (descriptionSaved) {
                        log.info("‚úÖ Successfully saved description for job ID: {}", job.getId());
                    } else {
                        log.warn("‚ö†Ô∏è Failed to save description for job ID: {}", job.getId());
                    }
                } catch (Exception e) {
                    log.error("‚ùå Error saving description for job ID: {}, error: {}", 
                            job.getId(), e.getMessage(), e);
                }
            }
            
            return job;
                    
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Error creating Job object: {}", e.getMessage());
            return null;
        }
    }

    private String getElementText(WebElement root, String selector) {
        try {
            log.debug("üîç Searching for element with selector: '{}'", selector);
            WebElement element = root.findElement(By.cssSelector(selector));
            String text = element.getText();
            log.debug("üîç Found element with selector '{}', text: '{}'", selector, text);
            return text;
        } catch (Exception e) {
            log.debug("‚ö†Ô∏è Element not found with selector '{}': {}", selector, e.getMessage());
            return null;
        }
    }

    private void printFinalReport(int totalCards, int passedTagFilter, int passedFunctionFilter, 
                                int foundUrls, int finalJobs, List<String> functions) {
        log.info("üìä –ó–í–Ü–¢ –ü–†–û –§–Ü–õ–¨–¢–†–ê–¶–Ü–Æ:");
        log.info("   ‚Ä¢ –í—Å—å–æ–≥–æ –∫–∞—Ä—Ç–æ–∫: {}", totalCards);
        log.info("   ‚Ä¢ –ü—Ä–æ–π—à–ª–∏ —Ñ—ñ–ª—å—Ç—Ä —Ç–µ–≥—ñ–≤: {}", passedTagFilter);
        log.info("   ‚Ä¢ –ü—Ä–æ–π—à–ª–∏ —Ñ—ñ–ª—å—Ç—Ä —Ñ—É–Ω–∫—Ü—ñ–π: {}", passedFunctionFilter);
        log.info("   ‚Ä¢ –ó–Ω–∞–π–¥–µ–Ω–æ URL: {}", foundUrls);
        log.info("   ‚Ä¢ –§—ñ–Ω–∞–ª—å–Ω–∏—Ö –≤–∞–∫–∞–Ω—Å—ñ–π: {}", finalJobs);
        
        if (totalCards > 0) {
            log.info("   ‚Ä¢ –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó —Ç–µ–≥—ñ–≤: {:.1f}%", (double) passedTagFilter / totalCards * 100);
            log.info("   ‚Ä¢ –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó —Ñ—É–Ω–∫—Ü—ñ–π: {:.1f}%", (double) passedFunctionFilter / totalCards * 100);
        }
        if (passedFunctionFilter > 0) {
            log.info("   ‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å—ñ—è –≤ URL: {:.1f}%", (double) foundUrls / passedFunctionFilter * 100);
        }
        if (foundUrls > 0) {
            log.info("   ‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å—ñ—è –≤ —Ñ—ñ–Ω–∞–ª—å–Ω—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó: {:.1f}%", (double) finalJobs / foundUrls * 100);
        }
        log.info("   ‚Ä¢ –ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó: {}", functions);
        
        if (passedFunctionFilter > 0 && foundUrls == 0) {
            log.error("‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: –í—Å—ñ {} –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–∞—Ä—Ç–æ–∫ –Ω–µ –¥–∞–ª–∏ URL!", passedFunctionFilter);
        }
        
        if (foundUrls > 0 && finalJobs == 0) {
            log.error("‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: –í—Å—ñ {} –∑–Ω–∞–π–¥–µ–Ω–∏—Ö URL –Ω–µ –ø—Ä–æ–π—à–ª–∏ —Ñ—ñ–Ω–∞–ª—å–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É!", foundUrls);
        }
        
        log.info("üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {} –∑ {} –∫–∞—Ä—Ç–æ–∫ —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ", finalJobs, totalCards);
    }

    /**
     * ‚úÖ –ù–û–í–ò–ô –ú–ï–¢–û–î: –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –∑–≤—ñ—Ç –∑ –Ω–æ–≤–æ—é –ª–æ–≥—ñ–∫–æ—é —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
     */
    private void printUpdatedFinalReport(int totalCards, int passedTagFilter, int passedFunctionFilter, 
                                       int foundUrls, int finalJobs, int savedWithCompanyPrefix, 
                                       int savedWithoutCompanyPrefix, List<String> functions) {
        log.info("üìä –û–ù–û–í–õ–ï–ù–ò–ô –ó–í–Ü–¢ –ü–†–û –§–Ü–õ–¨–¢–†–ê–¶–Ü–Æ (–ù–û–í–ê –õ–û–ì–Ü–ö–ê):");
        log.info("   ‚Ä¢ –í—Å—å–æ–≥–æ –∫–∞—Ä—Ç–æ–∫: {}", totalCards);
        log.info("   ‚Ä¢ –ü—Ä–æ–π—à–ª–∏ —Ñ—ñ–ª—å—Ç—Ä —Ñ—É–Ω–∫—Ü—ñ–π: {}", passedFunctionFilter);
        log.info("   ‚Ä¢ –ó–Ω–∞–π–¥–µ–Ω–æ URL: {}", foundUrls);
        log.info("   ‚Ä¢ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –∑ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º –∫–æ–º–ø–∞–Ω—ñ—ó (–ë–ï–ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–µ–≥—ñ–≤): {}", savedWithCompanyPrefix);
        log.info("   ‚Ä¢ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –±–µ–∑ –ø—Ä–µ—Ñ—ñ–∫—Å—É –∫–æ–º–ø–∞–Ω—ñ—ó (—Ç—ñ–ª—å–∫–∏ —Ñ—ñ–ª—å—Ç—Ä —Ñ—É–Ω–∫—Ü—ñ–π): {}", savedWithoutCompanyPrefix);
        log.info("   ‚Ä¢ –§—ñ–Ω–∞–ª—å–Ω–∏—Ö –≤–∞–∫–∞–Ω—Å—ñ–π: {}", finalJobs);
        
        if (totalCards > 0) {
            log.info("   ‚Ä¢ –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó —Ñ—É–Ω–∫—Ü—ñ–π: {:.1f}%", (double) passedFunctionFilter / totalCards * 100);
        }
        if (passedFunctionFilter > 0) {
            log.info("   ‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å—ñ—è –≤ URL: {:.1f}%", (double) foundUrls / passedFunctionFilter * 100);
        }
        if (foundUrls > 0) {
            log.info("   ‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å—ñ—è –≤ —Ñ—ñ–Ω–∞–ª—å–Ω—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó: {:.1f}%", (double) finalJobs / foundUrls * 100);
            log.info("   ‚Ä¢ –ß–∞—Å—Ç–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –∑ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º –∫–æ–º–ø–∞–Ω—ñ—ó: {:.1f}%", (double) savedWithCompanyPrefix / foundUrls * 100);
            log.info("   ‚Ä¢ –ß–∞—Å—Ç–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –±–µ–∑ –ø—Ä–µ—Ñ—ñ–∫—Å—É –∫–æ–º–ø–∞–Ω—ñ—ó: {:.1f}%", (double) savedWithoutCompanyPrefix / foundUrls * 100);
        }
        log.info("   ‚Ä¢ –ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó: {}", functions);
        
        // ‚úÖ –î–û–î–ê–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–æ—ó –ª–æ–≥—ñ–∫–∏
        if (savedWithCompanyPrefix > 0) {
            log.info("‚úÖ –ù–æ–≤–∞ –ª–æ–≥—ñ–∫–∞ –ø—Ä–∞—Ü—é—î: {} –≤–∞–∫–∞–Ω—Å—ñ–π –∑–±–µ—Ä–µ–∂–µ–Ω–æ –∑ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º –∫–æ–º–ø–∞–Ω—ñ—ó –ë–ï–ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–µ–≥—ñ–≤", savedWithCompanyPrefix);
        }
        
        if (passedFunctionFilter > 0 && foundUrls == 0) {
            log.error("‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: –í—Å—ñ {} –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–∞—Ä—Ç–æ–∫ –Ω–µ –¥–∞–ª–∏ URL!", passedFunctionFilter);
        }
        
        if (foundUrls > 0 && finalJobs == 0) {
            log.error("‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: –í—Å—ñ {} –∑–Ω–∞–π–¥–µ–Ω–∏—Ö URL –Ω–µ –ø—Ä–æ–π—à–ª–∏ —Ñ—ñ–Ω–∞–ª—å–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É!", foundUrls);
        }
        
        log.info("üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {} –∑ {} –∫–∞—Ä—Ç–æ–∫ —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ", finalJobs, totalCards);
        log.info("üîç –ù–û–í–ê –ì–Ü–ë–†–ò–î–ù–ê –õ–û–ì–Ü–ö–ê: 1) job functions ‚Üí 2) Load More (–û–î–ò–ù —Ä–∞–∑) ‚Üí 3) –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ ‚Üí 4) URL ‚Üí 5) –ø—Ä–µ—Ñ—ñ–∫—Å –∫–æ–º–ø–∞–Ω—ñ—ó ‚Üí 6) –∑–±—ñ—Ä —Ç–µ–≥—ñ–≤ (–±–µ–∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó)");
    }

    private void sleep(long milliseconds) {
        try {
            Thread.sleep(milliseconds);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            log.warn("‚ö†Ô∏è Thread interrupted during sleep");
        }
    }

    /**
     * ‚úÖ –ù–û–í–ò–ô –ú–ï–¢–û–î: –í–∏—Ç—è–≥—É—î —Ç–µ–≥–∏ –∑ –∫–∞—Ä—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å—ñ—ó
     */
    private List<String> extractTagsFromCard(WebElement card) {
        List<String> tags = new ArrayList<>();
        try {
            // –®—É–∫–∞—î–º–æ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –∑ data-testid="tag"
            List<WebElement> tagElements = card.findElements(By.cssSelector("[data-testid='tag']"));
            
            for (WebElement tagElement : tagElements) {
                try {
                    String tagText = tagElement.getText().trim();
                    if (!tagText.isEmpty()) {
                        tags.add(tagText);
                        log.debug("üè∑Ô∏è Found tag: '{}'", tagText);
                    }
                } catch (Exception e) {
                    log.debug("‚ö†Ô∏è Error extracting tag text: {}", e.getMessage());
                }
            }
        } catch (Exception e) {
            log.debug("‚ö†Ô∏è Error searching for tags: {}", e.getMessage());
        }
        
        log.debug("üè∑Ô∏è Extracted {} tags from card", tags.size());
        return tags;
    }

    /**
     * ‚úÖ –ù–û–í–ò–ô –ú–ï–¢–û–î: –í–∏—Ç—è–≥—É—î –ª–æ–∫–∞—Ü—ñ—é –∑ –∫–∞—Ä—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å—ñ—ó
     */
    private String extractLocationFromCard(WebElement card) {
        try {
            // –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ –≤ meta —Ç–µ–≥–∞—Ö
            List<WebElement> metaElements = card.findElements(By.cssSelector("meta[itemprop='address']"));
            if (!metaElements.isEmpty()) {
                String location = metaElements.get(0).getAttribute("content");
                if (location != null && !location.trim().isEmpty()) {
                    log.debug("üìç Found location in meta: '{}'", location);
                    return location.trim();
                }
            }
            
            // –Ø–∫—â–æ meta –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —à—É–∫–∞—î–º–æ –≤ –∑–≤–∏—á–∞–π–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç–∞—Ö
            String location = getElementText(card, ScrapingSelectors.LOCATION[0]);
            if (location != null && !location.trim().isEmpty()) {
                log.debug("üìç Found location in element: '{}'", location);
                return location.trim();
            }
            
        } catch (Exception e) {
            log.debug("‚ö†Ô∏è Error extracting location: {}", e.getMessage());
        }
        
        log.debug("üìç No location found in card");
        return null;
    }

    /**
     * ‚úÖ –ù–û–í–ò–ô –ú–ï–¢–û–î: –í–∏—Ç—è–≥—É—î –¥–∞—Ç—É –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –∑ –∫–∞—Ä—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å—ñ—ó
     */
    private LocalDateTime extractPostedDateFromCard(WebElement card) {
        try {
            // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ –≤ meta —Ç–µ–≥–∞—Ö
            List<WebElement> metaElements = card.findElements(By.cssSelector("meta[itemprop='datePosted']"));
            if (!metaElements.isEmpty()) {
                String dateStr = metaElements.get(0).getAttribute("content");
                if (dateStr != null && !dateStr.trim().isEmpty()) {
                    try {
                        // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç–∏ —Ñ–æ—Ä–º–∞—Ç—É YYYY-MM-DD
                        if (dateStr.matches("\\d{4}-\\d{2}-\\d{2}")) {
                            LocalDateTime date = LocalDateTime.parse(dateStr.trim() + "T00:00:00");
                            log.info("‚úÖ Extracted posted date from meta tag: '{}' -> {} (Unix: {})", 
                                    dateStr, date, date.toEpochSecond(java.time.ZoneOffset.UTC));
                            return date;
                        } else {
                            // –°–ø—Ä–æ–±—É—î–º–æ –ø–∞—Ä—Å–∏—Ç–∏ —è–∫ –ø–æ–≤–Ω—É –¥–∞—Ç—É –∑ —á–∞—Å–æ–º
                            LocalDateTime date = LocalDateTime.parse(dateStr.trim());
                            log.info("‚úÖ Extracted posted date from meta tag: '{}' -> {} (Unix: {})", 
                                    dateStr, date, date.toEpochSecond(java.time.ZoneOffset.UTC));
                            return date;
                        }
                    } catch (Exception e) {
                        log.debug("‚ö†Ô∏è Could not parse date from meta: '{}', error: {}", dateStr, e.getMessage());
                    }
                }
            }
            
            // ‚úÖ –î–û–î–ê–ù–û: –®—É–∫–∞—î–º–æ –≤ —ñ–Ω—à–∏—Ö meta —Ç–µ–≥–∞—Ö –∑ –¥–∞—Ç–æ—é
            List<WebElement> allMetaElements = card.findElements(By.cssSelector("meta"));
            for (WebElement meta : allMetaElements) {
                String name = meta.getAttribute("name");
                String content = meta.getAttribute("content");
                if (content != null && content.matches("\\d{4}-\\d{2}-\\d{2}")) {
                    try {
                        LocalDateTime postedDate = LocalDateTime.parse(content.trim() + "T00:00:00");
                        log.debug("üìÖ Found posted date in meta[name='{}']: '{}' -> {}", name, content, postedDate);
                        return postedDate;
                    } catch (Exception e) {
                        log.debug("‚ö†Ô∏è Could not parse date from meta[name='{}']: '{}'", name, content);
                    }
                }
            }
            
            // ‚úÖ –î–û–î–ê–ù–û: –®—É–∫–∞—î–º–æ –≤ time –µ–ª–µ–º–µ–Ω—Ç–∞—Ö
            List<WebElement> timeElements = card.findElements(By.cssSelector("time"));
            for (WebElement time : timeElements) {
                String datetime = time.getAttribute("datetime");
                if (datetime != null && !datetime.trim().isEmpty()) {
                    try {
                        LocalDateTime postedDate = LocalDateTime.parse(datetime.trim());
                        log.debug("üìÖ Found posted date in time[datetime]: '{}' -> {}", datetime, postedDate);
                        return postedDate;
                    } catch (Exception e) {
                        log.debug("‚ö†Ô∏è Could not parse date from time[datetime]: '{}'", datetime);
                    }
                }
            }
            
            // ‚úÖ –î–û–î–ê–ù–û: –®—É–∫–∞—î–º–æ –≤ –µ–ª–µ–º–µ–Ω—Ç–∞—Ö –∑ –∞—Ç—Ä–∏–±—É—Ç–æ–º datetime
            List<WebElement> datetimeElements = card.findElements(By.cssSelector("[datetime]"));
            for (WebElement element : datetimeElements) {
                String datetime = element.getAttribute("datetime");
                if (datetime != null && !datetime.trim().isEmpty()) {
                    try {
                        LocalDateTime postedDate = LocalDateTime.parse(datetime.trim());
                        log.debug("üìÖ Found posted date in [datetime]: '{}' -> {}", datetime, postedDate);
                        return postedDate;
                    } catch (Exception e) {
                        log.debug("‚ö†Ô∏è Could not parse date from [datetime]: '{}'", datetime);
                    }
                }
            }
            
            // –Ø–∫—â–æ meta –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —à—É–∫–∞—î–º–æ –≤ –∑–≤–∏—á–∞–π–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç–∞—Ö
            String dateText = getElementText(card, ScrapingSelectors.POSTED_DATE[0]);
            if (dateText != null && !dateText.trim().isEmpty()) {
                log.debug("üìÖ Found posted date text: '{}'", dateText);
                // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü–æ–∫—Ä–∞—â–µ–Ω–∞ –ª–æ–≥—ñ–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É —Ç–µ–∫—Å—Ç—É –¥–∞—Ç–∏
                LocalDateTime parsedDate = parseDateText(dateText.trim());
                if (parsedDate != null) {
                    return parsedDate;
                }
                // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É
                log.debug("‚ö†Ô∏è Could not parse date text: '{}', using current date", dateText);
                LocalDateTime fallbackDate = LocalDateTime.now();
                log.debug("üìÖ Using fallback date: {} (Unix: {})", fallbackDate, fallbackDate.toEpochSecond(java.time.ZoneOffset.UTC));
                return fallbackDate;
            }
            
            // ‚úÖ –î–û–î–ê–ù–û: –®—É–∫–∞—î–º–æ –≤ —Ç–µ–∫—Å—Ç—ñ –≤—Å—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∫–∞—Ä—Ç–∫–∏
            String cardText = card.getText();
            if (cardText != null && !cardText.trim().isEmpty()) {
                // –®—É–∫–∞—î–º–æ –ø–∞—Ç–µ—Ä–Ω–∏ –¥–∞—Ç–∏ –≤ —Ç–µ–∫—Å—Ç—ñ
                String[] datePatterns = {
                    "\\d{4}-\\d{2}-\\d{2}", // YYYY-MM-DD
                    "\\d{1,2}/\\d{1,2}/\\d{4}", // MM/DD/YYYY
                    "\\d{1,2}\\.\\d{1,2}\\.\\d{4}", // DD.MM.YYYY
                    "\\d{1,2}\\s+\\w+\\s+\\d{4}" // DD Month YYYY
                };
                
                for (String pattern : datePatterns) {
                    if (cardText.matches(".*" + pattern + ".*")) {
                        log.debug("üìÖ Found date pattern '{}' in card text", pattern);
                        // –°–ø—Ä–æ–±—É—î–º–æ —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ –∑–Ω–∞–π–¥–µ–Ω—É –¥–∞—Ç—É
                        LocalDateTime parsedDate = parseDateText(cardText);
                        if (parsedDate != null) {
                            return parsedDate;
                        }
                    }
                }
            }
            
        } catch (Exception e) {
            log.debug("‚ö†Ô∏è Error extracting posted date: {}", e.getMessage());
        }
        
        log.debug("üìÖ No posted date found in card, using current date");
        LocalDateTime currentDate = LocalDateTime.now();
        log.debug("üìÖ Using current date: {} (Unix: {})", currentDate, currentDate.toEpochSecond(java.time.ZoneOffset.UTC));
        return currentDate;
    }

    /**
     * ‚úÖ –ù–û–í–ò–ô –ú–ï–¢–û–î: –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç—É –¥–∞—Ç–∏ (Today, Yesterday, X days ago, etc.)
     */
    private LocalDateTime parseDateText(String dateText) {
        try {
            String lowerText = dateText.toLowerCase().trim();
            LocalDateTime now = LocalDateTime.now();
            
            if (lowerText.contains("today") || lowerText.contains("—Å—å–æ–≥–æ–¥–Ω—ñ")) {
                LocalDateTime today = now;
                log.debug("üìÖ Parsed 'Today' as: {} (Unix: {})", today, today.toEpochSecond(java.time.ZoneOffset.UTC));
                return today;
            } else if (lowerText.contains("yesterday") || lowerText.contains("–≤—á–æ—Ä–∞")) {
                LocalDateTime yesterday = now.minusDays(1);
                log.debug("üìÖ Parsed 'Yesterday' as: {} (Unix: {})", yesterday, yesterday.toEpochSecond(java.time.ZoneOffset.UTC));
                return yesterday;
            } else if (lowerText.contains("days ago") || lowerText.contains("–¥–Ω—ñ–≤ —Ç–æ–º—É")) {
                // –®—É–∫–∞—î–º–æ —á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ "days ago"
                String numberMatch = dateText.replaceAll("(?i).*?(\\d+)\\s*(?:days?|–¥–Ω—ñ–≤?)\\s*ago.*", "$1");
                if (numberMatch.matches("\\d+")) {
                    int days = Integer.parseInt(numberMatch);
                    LocalDateTime daysAgo = now.minusDays(days);
                    log.debug("üìÖ Parsed '{} days ago' as: {} (Unix: {})", days, daysAgo, daysAgo.toEpochSecond(java.time.ZoneOffset.UTC));
                    return daysAgo;
                }
            } else if (lowerText.contains("hours ago") || lowerText.contains("–≥–æ–¥–∏–Ω —Ç–æ–º—É")) {
                // –®—É–∫–∞—î–º–æ —á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ "hours ago"
                String numberMatch = dateText.replaceAll("(?i).*?(\\d+)\\s*(?:hours?|–≥–æ–¥–∏–Ω?)\\s*ago.*", "$1");
                if (numberMatch.matches("\\d+")) {
                    int hours = Integer.parseInt(numberMatch);
                    LocalDateTime hoursAgo = now.minusHours(hours);
                    log.debug("üìÖ Parsed '{} hours ago' as: {} (Unix: {})", hours, hoursAgo, hoursAgo.toEpochSecond(java.time.ZoneOffset.UTC));
                    return hoursAgo;
                }
            } else if (lowerText.contains("minutes ago") || lowerText.contains("—Ö–≤–∏–ª–∏–Ω —Ç–æ–º—É")) {
                // –®—É–∫–∞—î–º–æ —á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ "minutes ago"
                String numberMatch = dateText.replaceAll("(?i).*?(\\d+)\\s*(?:minutes?|—Ö–≤–∏–ª–∏–Ω?)\\s*ago.*", "$1");
                if (numberMatch.matches("\\d+")) {
                    int minutes = Integer.parseInt(numberMatch);
                    LocalDateTime minutesAgo = now.minusMinutes(minutes);
                    log.debug("üìÖ Parsed '{} minutes ago' as: {} (Unix: {})", minutes, minutesAgo, minutesAgo.toEpochSecond(java.time.ZoneOffset.UTC));
                    return minutesAgo;
                }
            } else if (lowerText.contains("weeks ago") || lowerText.contains("—Ç–∏–∂–Ω—ñ–≤ —Ç–æ–º—É")) {
                // –®—É–∫–∞—î–º–æ —á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ "weeks ago"
                String numberMatch = dateText.replaceAll("(?i).*?(\\d+)\\s*(?:weeks?|—Ç–∏–∂–Ω—ñ–≤?)\\s*ago.*", "$1");
                if (numberMatch.matches("\\d+")) {
                    int weeks = Integer.parseInt(numberMatch);
                    LocalDateTime weeksAgo = now.minusWeeks(weeks);
                    log.debug("üìÖ Parsed '{} weeks ago' as: {} (Unix: {})", weeks, weeksAgo, weeksAgo.toEpochSecond(java.time.ZoneOffset.UTC));
                    return weeksAgo;
                }
            }
            
            // –°–ø—Ä–æ–±—É—î–º–æ –ø–∞—Ä—Å–∏—Ç–∏ —è–∫ ISO –¥–∞—Ç—É
            if (dateText.matches("\\d{4}-\\d{2}-\\d{2}")) {
                LocalDateTime isoDate = LocalDateTime.parse(dateText + "T00:00:00");
                log.debug("üìÖ Parsed ISO date '{}' as: {} (Unix: {})", dateText, isoDate, isoDate.toEpochSecond(java.time.ZoneOffset.UTC));
                return isoDate;
            }
            
            // –°–ø—Ä–æ–±—É—î–º–æ –ø–∞—Ä—Å–∏—Ç–∏ —è–∫ –ø–æ–≤–Ω—É ISO –¥–∞—Ç—É –∑ —á–∞—Å–æ–º
            if (dateText.matches("\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}")) {
                LocalDateTime fullIsoDate = LocalDateTime.parse(dateText);
                log.debug("üìÖ Parsed full ISO date '{}' as: {} (Unix: {})", dateText, fullIsoDate, fullIsoDate.toEpochSecond(java.time.ZoneOffset.UTC));
                return fullIsoDate;
            }
            
        } catch (Exception e) {
            log.debug("‚ö†Ô∏è Error parsing date text '{}': {}", dateText, e.getMessage());
        }
        
        return null;
    }

    /**
     * ‚úÖ –ù–û–í–ò–ô –ú–ï–¢–û–î: –í–∏—Ç—è–≥—É—î URL –ª–æ–≥–æ—Ç–∏–ø—É –∑ –∫–∞—Ä—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å—ñ—ó
     */
    private String extractLogoUrlFromCard(WebElement card) {
        try {
            // –®—É–∫–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ data-testid="image"
            List<WebElement> imageElements = card.findElements(By.cssSelector("img[data-testid='image']"));
            
            for (WebElement imageElement : imageElements) {
                try {
                    String src = imageElement.getAttribute("src");
                    if (src != null && !src.trim().isEmpty()) {
                        log.debug("üñºÔ∏è Found logo image with src: '{}'", src);
                        return src.trim();
                    }
                } catch (Exception e) {
                    log.debug("‚ö†Ô∏è Error extracting image src: {}", e.getMessage());
                }
            }
            
            // –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ data-testid="image", —à—É–∫–∞—î–º–æ –∑–∞ —ñ–Ω—à–∏–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
            String logoUrl = getElementAttribute(card, ScrapingSelectors.ORG_LOGO[0], "src");
            if (logoUrl != null && !logoUrl.trim().isEmpty()) {
                log.debug("üñºÔ∏è Found logo using ORG_LOGO selector: '{}'", logoUrl);
                return logoUrl.trim();
            }
            
        } catch (Exception e) {
            log.debug("‚ö†Ô∏è Error searching for logo: {}", e.getMessage());
        }
        
        log.debug("üñºÔ∏è No logo found in card");
        return null;
    }

    /**
     * ‚úÖ –ù–û–í–ò–ô –ú–ï–¢–û–î: –í–∏—Ç—è–≥—É—î –∞—Ç—Ä–∏–±—É—Ç –∑ –µ–ª–µ–º–µ–Ω—Ç–∞
     */
    private String getElementAttribute(WebElement root, String selector, String attribute) {
        try {
            log.debug("üîç Searching for element with selector: '{}' and attribute: '{}'", selector, attribute);
            WebElement element = root.findElement(By.cssSelector(selector));
            String value = element.getAttribute(attribute);
            log.debug("üîç Found element with selector '{}', {}: '{}'", selector, attribute, value);
            return value;
        } catch (Exception e) {
            log.debug("‚ö†Ô∏è Element not found with selector '{}': {}", selector, e.getMessage());
            return null;
        }
    }

    /**
     * ‚úÖ –ù–û–í–ò–ô –ú–ï–¢–û–î: –í–∏—Ç—è–≥—É—î –Ω–∞–∑–≤—É –∫–æ–º–ø–∞–Ω—ñ—ó –∑ –∫–∞—Ä—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å—ñ—ó
     */
    private String extractCompanyNameFromCard(WebElement card, String jobPageUrl) {
        log.debug("üîç Starting company name extraction...");
        
        // ‚úÖ –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 1: –®—É–∫–∞—î–º–æ –≤ –∑–≤–∏—á–∞–π–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç–∞—Ö
        String organizationTitle = getElementText(card, ScrapingSelectors.ORG_NAME[0]);
        log.debug("üîç Strategy 1 - ORG_NAME selector result: '{}'", organizationTitle);
        
        if (organizationTitle != null && !organizationTitle.trim().isEmpty()) {
            return organizationTitle.trim();
        }
        
        // ‚úÖ –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 2: –®—É–∫–∞—î–º–æ –≤ meta —Ç–µ–≥–∞—Ö –∑ itemprop="name"
        try {
            log.debug("üîç Strategy 2 - Searching for meta[itemprop='name']...");
            List<WebElement> metaElements = card.findElements(By.cssSelector("meta[itemprop='name']"));
            log.debug("üîç Found {} meta[itemprop='name'] elements", metaElements.size());
            
            for (WebElement metaElement : metaElements) {
                String content = metaElement.getAttribute("content");
                log.debug("üîç Meta element content: '{}'", content);
                if (content != null && !content.trim().isEmpty()) {
                    log.info("üè¢ Found company name in meta[itemprop='name']: '{}'", content.trim());
                    return content.trim();
                }
            }
        } catch (Exception e) {
            log.debug("‚ö†Ô∏è Strategy 2 failed: {}", e.getMessage());
        }
        
        // ‚úÖ –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 3: –®—É–∫–∞—î–º–æ –≤ –∑–≤–∏—á–∞–π–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç–∞—Ö –∑ itemprop="name"
        try {
            log.debug("üîç Strategy 3 - Searching for [itemprop='name']...");
            List<WebElement> nameElements = card.findElements(By.cssSelector("[itemprop='name']"));
            log.debug("üîç Found {} [itemprop='name'] elements", nameElements.size());
            
            for (WebElement nameElement : nameElements) {
                String content = nameElement.getAttribute("content");
                String text = nameElement.getText();
                log.debug("üîç Name element - content: '{}', text: '{}'", content, text);
                
                if (content != null && !content.trim().isEmpty()) {
                    log.info("üè¢ Found company name in [itemprop='name'] content: '{}'", content.trim());
                    return content.trim();
                }
                if (text != null && !text.trim().isEmpty()) {
                    log.info("üè¢ Found company name in [itemprop='name'] text: '{}'", text.trim());
                    return text.trim();
                }
            }
        } catch (Exception e) {
            log.debug("‚ö†Ô∏è Strategy 3 failed: {}", e.getMessage());
        }
        
        // ‚úÖ –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 4: –®—É–∫–∞—î–º–æ –≤ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏—Ö –µ–ª–µ–º–µ–Ω—Ç–∞—Ö –∑ itemprop="hiringOrganization"
        try {
            log.debug("üîç Strategy 4 - Searching in parent elements for hiringOrganization...");
            WebElement parent = card.findElement(By.xpath("ancestor::div[@itemprop='hiringOrganization']"));
            if (parent != null) {
                log.debug("üîç Found parent with hiringOrganization");
                
                // –®—É–∫–∞—î–º–æ meta[itemprop='name'] –≤ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–º—É –µ–ª–µ–º–µ–Ω—Ç—ñ
                List<WebElement> parentMetaElements = parent.findElements(By.cssSelector("meta[itemprop='name']"));
                log.debug("üîç Found {} meta[itemprop='name'] in parent", parentMetaElements.size());
                
                for (WebElement metaElement : parentMetaElements) {
                    String content = metaElement.getAttribute("content");
                    log.debug("üîç Parent meta element content: '{}'", content);
                    if (content != null && !content.trim().isEmpty()) {
                        log.info("üè¢ Found company name in parent meta[itemprop='name']: '{}'", content.trim());
                        return content.trim();
                    }
                }
                
                // –®—É–∫–∞—î–º–æ [itemprop='name'] –≤ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–º—É –µ–ª–µ–º–µ–Ω—Ç—ñ
                List<WebElement> parentNameElements = parent.findElements(By.cssSelector("[itemprop='name']"));
                log.debug("üîç Found {} [itemprop='name'] in parent", parentNameElements.size());
                
                for (WebElement nameElement : parentNameElements) {
                    String content = nameElement.getAttribute("content");
                    String text = nameElement.getText();
                    log.debug("üîç Parent name element - content: '{}', text: '{}'", content, text);
                    
                    if (content != null && !content.trim().isEmpty()) {
                        log.info(" Found company name in parent [itemprop='name'] content: '{}'", content.trim());
                        return content.trim();
                    }
                    if (text != null && !text.trim().isEmpty()) {
                        log.info("üè¢ Found company name in parent [itemprop='name'] text: '{}'", text.trim());
                        return text.trim();
                    }
                }
            }
        } catch (Exception e) {
            log.debug("‚ö†Ô∏è Strategy 4 failed: {}", e.getMessage());
        }
        
        // ‚úÖ –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 5: –®—É–∫–∞—î–º–æ –∑–∞ data-testid="organization-name"
        try {
            log.debug("üîç Strategy 5 - Searching for data-testid='organization-name'...");
            WebElement orgElement = card.findElement(By.cssSelector("[data-testid='organization-name']"));
            String text = orgElement.getText();
            log.debug("üîç data-testid='organization-name' text: '{}'", text);
            
            if (text != null && !text.trim().isEmpty()) {
                log.info("üè¢ Found company name in data-testid='organization-name': '{}'", text.trim());
                return text.trim();
            }
        } catch (Exception e) {
            log.debug("‚ö†Ô∏è Strategy 5 failed: {}", e.getMessage());
        }
        
        // ‚úÖ –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 6: –®—É–∫–∞—î–º–æ –≤ –ø–æ—Å–∏–ª–∞–Ω–Ω—è—Ö –Ω–∞ –∫–æ–º–ø–∞–Ω—ñ—ó
        try {
            log.debug("üîç Strategy 6 - Searching for company links...");
            List<WebElement> companyLinks = card.findElements(By.cssSelector("a[href*='/companies/']"));
            log.debug("üîç Found {} company links", companyLinks.size());
            
            for (WebElement companyLink : companyLinks) {
                String text = companyLink.getText();
                log.debug("üîç Company link text: '{}'", text);
                
                if (text != null && !text.trim().isEmpty()) {
                    log.info("üè¢ Found company name in company link: '{}'", text.trim());
                    return text.trim();
                }
            }
        } catch (Exception e) {
            log.debug("‚ö†Ô∏è Strategy 6 failed: {}", e.getMessage());
        }
        
        // ‚úÖ –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 7: Fallback - –≤–∏—Ç—è–≥—É—î–º–æ –∑ URL
        try {
            log.debug("üîç Strategy 7 - Extracting from URL...");
            // URL: https://jobs.techstars.com/companies/artera-2-45603da9-8558-41e0-8432-f493987a2c76
            String[] urlParts = jobPageUrl.split("/companies/");
            if (urlParts.length > 1) {
                String companyPart = urlParts[1].split("/")[0]; // artera-2-45603da9-8558-41e0-8432-f493987a2c76
                log.debug("üîç Company part from URL: '{}'", companyPart);
                
                // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ UUID —Ç–∞ –∑–∞–º—ñ–Ω—é—î–º–æ –¥–µ—Ñ—ñ—Å–∏ –Ω–∞ –ø—Ä–æ–±—ñ–ª–∏
                String companyName = companyPart.replaceAll("-\\d{1,2}-[a-f0-9-]+$", ""); // artera-2
                companyName = companyName.replaceAll("-\\d+$", ""); // artera
                companyName = companyName.replace("-", " "); // artera -> artera
                
                // –ö–∞–ø—ñ—Ç–∞–ª—ñ–∑—É—î–º–æ –ø–µ—Ä—à—É –ª—ñ—Ç–µ—Ä—É
                if (!companyName.isEmpty()) {
                    String result = companyName.substring(0, 1).toUpperCase() + companyName.substring(1);
                    log.info("üè¢ Extracted company name from URL: '{}'", result);
                    return result;
                }
            }
        } catch (Exception e) {
            log.debug("‚ö†Ô∏è Strategy 7 failed: {}", e.getMessage());
        }
        
        log.warn("‚ö†Ô∏è All strategies failed to find company name");
        return "Unknown Company";
    }

    /**
     * ‚úÖ –ù–û–í–ò–ô –ú–ï–¢–û–î: –í–∏—Ç—è–≥—É—î –Ω–∞–∑–≤—É –ø–æ–∑–∏—Ü—ñ—ó –∑ –∫–∞—Ä—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å—ñ—ó
     */
    private String extractTitleFromCard(WebElement card) {
        log.debug("üîç Starting title extraction...");
        
        // ‚úÖ –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 1: –®—É–∫–∞—î–º–æ –∑–∞ –∑–≤–∏—á–∞–π–Ω–∏–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
        String title = getElementText(card, ScrapingSelectors.JOB_TITLE[0]);
        log.debug("üîç Strategy 1 - JOB_TITLE selector result: '{}'", title);
        
        if (title != null && !title.trim().isEmpty()) {
            log.info("üíº Found title using JOB_TITLE selector: '{}'", title.trim());
            return title.trim();
        }
        
        // ‚úÖ –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 2: –®—É–∫–∞—î–º–æ –∑–∞ data-testid="job-title"
        try {
            log.debug("üîç Strategy 2 - Searching for data-testid='job-title'...");
            WebElement titleElement = card.findElement(By.cssSelector("[data-testid='job-title']"));
            String text = titleElement.getText();
            log.debug("üîç data-testid='job-title' text: '{}'", text);
            
            if (text != null && !text.trim().isEmpty()) {
                log.info("üíº Found title using data-testid='job-title': '{}'", text.trim());
                return text.trim();
            }
        } catch (Exception e) {
            log.debug("‚ö†Ô∏è Strategy 2 failed: {}", e.getMessage());
        }
        
        // ‚úÖ –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 3: –®—É–∫–∞—î–º–æ –∑–∞ itemprop="title"
        try {
            log.debug("üîç Strategy 3 - Searching for [itemprop='title']...");
            List<WebElement> titleElements = card.findElements(By.cssSelector("[itemprop='title']"));
            log.debug("üîç Found {} [itemprop='title'] elements", titleElements.size());
            
            for (WebElement titleElement : titleElements) {
                String content = titleElement.getAttribute("content");
                String text = titleElement.getText();
                log.debug("üîç Title element - content: '{}', text: '{}'", content, text);
                
                if (content != null && !content.trim().isEmpty()) {
                    log.info("üíº Found title using [itemprop='title'] content: '{}'", content.trim());
                    return content.trim();
                }
                if (text != null && !text.trim().isEmpty()) {
                    log.info("üíº Found title using [itemprop='title'] text: '{}'", text.trim());
                    return text.trim();
                }
            }
        } catch (Exception e) {
            log.debug("‚ö†Ô∏è Strategy 3 failed: {}", e.getMessage());
        }
        
        // ‚úÖ –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 4: –®—É–∫–∞—î–º–æ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö (h1, h2, h3)
        try {
            log.debug("üîç Strategy 4 - Searching for headings...");
            List<WebElement> headings = card.findElements(By.cssSelector("h1, h2, h3, h4, h5, h6"));
            log.debug("üîç Found {} heading elements", headings.size());
            
            for (WebElement heading : headings) {
                String text = heading.getText();
                log.debug("üîç Heading text: '{}'", text);
                
                if (text != null && !text.trim().isEmpty() && text.length() > 3) {
                    log.info("üíº Found title in heading: '{}'", text.trim());
                    return text.trim();
                }
            }
        } catch (Exception e) {
            log.debug("‚ö†Ô∏è Strategy 4 failed: {}", e.getMessage());
        }
        
        // ‚úÖ –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 5: –®—É–∫–∞—î–º–æ –≤ –ø–æ—Å–∏–ª–∞–Ω–Ω—è—Ö –∑ —Ç–µ–∫—Å—Ç–æ–º —â–æ –º–æ–∂–µ –±—É—Ç–∏ –Ω–∞–∑–≤–æ—é –ø–æ–∑–∏—Ü—ñ—ó
        try {
            log.debug("üîç Strategy 5 - Searching for links that might contain title...");
            List<WebElement> links = card.findElements(By.cssSelector("a[href]"));
            log.debug("üîç Found {} links", links.size());
            
            for (WebElement link : links) {
                String text = link.getText();
                String href = link.getAttribute("href");
                log.debug("üîç Link - text: '{}', href: '{}'", text, href);
                
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –º—ñ—Å—Ç–∏—Ç—å /jobs/ (–º–æ–∂–µ –±—É—Ç–∏ –Ω–∞–∑–≤–∞ –ø–æ–∑–∏—Ü—ñ—ó)
                if (text != null && !text.trim().isEmpty() && 
                    href != null && href.contains("/jobs/") && 
                    text.length() > 3 && text.length() < 100) {
                    log.info("üíº Found title in job link: '{}'", text.trim());
                    return text.trim();
                }
            }
        } catch (Exception e) {
            log.debug("‚ö†Ô∏è Strategy 5 failed: {}", e.getMessage());
        }
        
        log.warn("‚ö†Ô∏è All strategies failed to find title");
        return "Unknown Position";
    }

    /**
     * ‚úÖ –ù–û–í–ò–ô –ú–ï–¢–û–î: –§—ñ–ª—å—Ç—Ä—É—î –µ–ª–µ–º–µ–Ω—Ç–∏, —â–æ–± –∑–Ω–∞–π—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Ä–µ–∞–ª—å–Ω—ñ –∫–∞—Ä—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å—ñ–π
     */
    private List<WebElement> filterValidJobCards(List<WebElement> elements) {
        List<WebElement> validCards = new ArrayList<>();
        
        for (WebElement element : elements) {
            try {
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ —Ä–µ–∞–ª—å–Ω–∞ –∫–∞—Ä—Ç–∫–∞ –≤–∞–∫–∞–Ω—Å—ñ—ó
                if (isValidJobCard(element)) {
                    validCards.add(element);
                }
            } catch (Exception e) {
                log.debug("‚ö†Ô∏è Error validating element: {}", e.getMessage());
            }
        }
        
        return validCards;
    }
    
    /**
     * ‚úÖ –ù–û–í–ò–ô –ú–ï–¢–û–î: –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î –µ–ª–µ–º–µ–Ω—Ç —Ä–µ–∞–ª—å–Ω–æ—é –∫–∞—Ä—Ç–∫–æ—é –≤–∞–∫–∞–Ω—Å—ñ—ó
     */
    private boolean isValidJobCard(WebElement element) {
        try {
            String text = element.getText().toLowerCase();
            
            // ‚úÖ –§—ñ–ª—å—Ç—Ä—É—î–º–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä–∏
            String[] navigationKeywords = {
                "search", "explore", "join", "my", "job alerts", "on-site", "remote", 
                "job function", "seniority", "salary", "industry", "company stage", 
                "more filters", "create job alert", "powered by", "showing", "jobs",
                "companies", "talent network", "claim your profile"
            };
            
            for (String keyword : navigationKeywords) {
                if (text.contains(keyword.toLowerCase())) {
                    return false; // –¶–µ –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç
                }
            }
            
            // ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º—ñ—Å—Ç–∏—Ç—å –µ–ª–µ–º–µ–Ω—Ç –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤–∞–∫–∞–Ω—Å—ñ—é
            try {
                List<WebElement> links = element.findElements(By.cssSelector("a[href*='/jobs/'], a[href*='/companies/']"));
                if (links.isEmpty()) {
                    return false; // –ù–µ–º–∞—î –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ –≤–∞–∫–∞–Ω—Å—ñ—ó
                }
            } catch (Exception e) {
                return false; // –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –ø–æ—Å–∏–ª–∞–Ω—å
            }
            
            // ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º—ñ—Å—Ç–∏—Ç—å –µ–ª–µ–º–µ–Ω—Ç —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∞–∫–∞–Ω—Å—ñ—é
            String[] jobKeywords = {
                "engineer", "designer", "manager", "developer", "analyst", "specialist",
                "coordinator", "director", "lead", "senior", "junior", "full-time",
                "part-time", "remote", "onsite", "hybrid", "salary", "experience"
            };
            
            boolean hasJobInfo = false;
            for (String keyword : jobKeywords) {
                if (text.contains(keyword.toLowerCase())) {
                    hasJobInfo = true;
                    break;
                }
            }
            
            if (!hasJobInfo) {
                return false; // –ù–µ–º–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≤–∞–∫–∞–Ω—Å—ñ—é
            }
            
            // ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ç–µ–∫—Å—Ç—É (–∫–∞—Ä—Ç–∫–∞ –≤–∞–∫–∞–Ω—Å—ñ—ó –º–∞—î –±—É—Ç–∏ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –≤–µ–ª–∏–∫–æ—é)
            if (text.length() < 50) {
                return false; // –ó–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç
            }
            
            return true; // –¶–µ —Å—Ö–æ–∂–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É –∫–∞—Ä—Ç–∫—É –≤–∞–∫–∞–Ω—Å—ñ—ó
            
        } catch (Exception e) {
            log.debug("‚ö†Ô∏è Error checking if element is valid job card: {}", e.getMessage());
            return false;
        }
    }

    /**
     * ‚úÖ –ù–û–í–ò–ô –ú–ï–¢–û–î: –ï–∫—Å—Ç—Ä–∞–∫—Ü—ñ—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
     */
    private String extractTitleFromDetailPage(WebDriver driver) {
        try {
            for (String selector : ScrapingSelectors.JOB_DETAIL_PAGE) {
                if (selector.contains("itemprop='title'")) {
                    List<WebElement> elements = driver.findElements(By.cssSelector(selector));
                    if (!elements.isEmpty()) {
                        String title = elements.get(0).getText().trim();
                        log.info("‚úÖ Extracted title from detail page: {}", title);
                        return title;
                    }
                }
            }
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Error extracting title from detail page: {}", e.getMessage());
        }
        return null;
    }
    
    /**
     * ‚úÖ –ù–û–í–ò–ô –ú–ï–¢–û–î: –ï–∫—Å—Ç—Ä–∞–∫—Ü—ñ—è –Ω–∞–∑–≤–∏ –∫–æ–º–ø–∞–Ω—ñ—ó –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
     */
    private String extractCompanyNameFromDetailPage(WebDriver driver) {
        try {
            for (String selector : ScrapingSelectors.JOB_DETAIL_PAGE) {
                if (selector.contains("itemprop='name'")) {
                    List<WebElement> elements = driver.findElements(By.cssSelector(selector));
                    if (!elements.isEmpty()) {
                        String companyName = elements.get(0).getText().trim();
                        log.info("‚úÖ Extracted company name from detail page: {}", companyName);
                        return companyName;
                    }
                }
            }
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Error extracting company name from detail page: {}", e.getMessage());
        }
        return null;
    }
    
    /**
     * ‚úÖ –ù–û–í–ò–ô –ú–ï–¢–û–î: –ï–∫—Å—Ç—Ä–∞–∫—Ü—ñ—è —Ç–µ–≥—ñ–≤ –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
     */
    private List<String> extractTagsFromDetailPage(WebDriver driver) {
        List<String> tags = new ArrayList<>();
        try {
            for (String selector : ScrapingSelectors.JOB_DETAIL_PAGE) {
                if (selector.contains("data-testid=tag")) {
                    List<WebElement> elements = driver.findElements(By.cssSelector(selector));
                    for (WebElement element : elements) {
                        String tag = element.getText().trim();
                        if (!tag.isEmpty()) {
                            tags.add(tag);
                        }
                    }
                    if (!tags.isEmpty()) {
                        log.info("‚úÖ Extracted {} tags from detail page: {}", tags.size(), tags);
                        return tags;
                    }
                }
            }
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Error extracting tags from detail page: {}", e.getMessage());
        }
        return tags;
    }
    
    /**
     * ‚úÖ –ù–û–í–ò–ô –ú–ï–¢–û–î: –ï–∫—Å—Ç—Ä–∞–∫—Ü—ñ—è –ª–æ–∫–∞—Ü—ñ—ó –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
     */
    private String extractLocationFromDetailPage(WebDriver driver) {
        try {
            // –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ –≤ meta —Ç–µ–≥–∞—Ö
            List<WebElement> metaElements = driver.findElements(By.cssSelector("meta[itemprop='address']"));
            if (!metaElements.isEmpty()) {
                String location = metaElements.get(0).getAttribute("content");
                if (location != null && !location.trim().isEmpty()) {
                    log.info("‚úÖ Extracted location from meta tag: {}", location);
                    return location.trim();
                }
            }
            
            // –ü–æ—Ç—ñ–º —à—É–∫–∞—î–º–æ –≤ div –µ–ª–µ–º–µ–Ω—Ç–∞—Ö
            for (String selector : ScrapingSelectors.JOB_DETAIL_PAGE) {
                if (selector.contains("sc-beqWaB")) {
                    List<WebElement> elements = driver.findElements(By.cssSelector(selector));
                    for (WebElement element : elements) {
                        String text = element.getText().trim();
                        if (text.contains(",") && (text.contains("USA") || text.contains("Remote") || text.contains("India"))) {
                            log.info("‚úÖ Extracted location from div: {}", text);
                            return text;
                        }
                    }
                }
            }
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Error extracting location from detail page: {}", e.getMessage());
        }
        return null;
    }
    
    /**
     * ‚úÖ –ù–û–í–ò–ô –ú–ï–¢–û–î: –ï–∫—Å—Ç—Ä–∞–∫—Ü—ñ—è –¥–∞—Ç–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
     */
    private LocalDateTime extractPostedDateFromDetailPage(WebDriver driver) {
        try {
            // –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ –≤ meta —Ç–µ–≥–∞—Ö
            List<WebElement> metaElements = driver.findElements(By.cssSelector("meta[itemprop='datePosted']"));
            if (!metaElements.isEmpty()) {
                String dateStr = metaElements.get(0).getAttribute("content");
                if (dateStr != null && !dateStr.trim().isEmpty()) {
                    try {
                        // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç–∏ —Ñ–æ—Ä–º–∞—Ç—É YYYY-MM-DD
                        if (dateStr.matches("\\d{4}-\\d{2}-\\d{2}")) {
                            LocalDateTime date = LocalDateTime.parse(dateStr.trim() + "T00:00:00");
                            log.info("‚úÖ Extracted posted date from meta tag: '{}' -> {} (Unix: {})", 
                                    dateStr, date, date.toEpochSecond(java.time.ZoneOffset.UTC));
                            return date;
                        } else {
                            // –°–ø—Ä–æ–±—É—î–º–æ –ø–∞—Ä—Å–∏—Ç–∏ —è–∫ –ø–æ–≤–Ω—É –¥–∞—Ç—É –∑ —á–∞—Å–æ–º
                            LocalDateTime date = LocalDateTime.parse(dateStr.trim());
                            log.info("‚úÖ Extracted posted date from meta tag: '{}' -> {} (Unix: {})", 
                                    dateStr, date, date.toEpochSecond(java.time.ZoneOffset.UTC));
                            return date;
                        }
                    } catch (Exception e) {
                        log.warn("‚ö†Ô∏è Could not parse date from meta tag: '{}', error: {}", dateStr, e.getMessage());
                    }
                }
            }
            
            // –ü–æ—Ç—ñ–º —à—É–∫–∞—î–º–æ –≤ div –µ–ª–µ–º–µ–Ω—Ç–∞—Ö
            for (String selector : ScrapingSelectors.JOB_DETAIL_PAGE) {
                if (selector.contains("enQFes")) {
                    List<WebElement> elements = driver.findElements(By.cssSelector(selector));
                    for (WebElement element : elements) {
                        String text = element.getText().trim();
                        if (text.contains("Posted") || text.contains("Today") || text.matches(".*\\d{4}-\\d{2}-\\d{2}.*")) {
                            // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç—É –¥–∞—Ç–∏
                            LocalDateTime parsedDate = parseDateText(text);
                            if (parsedDate != null) {
                                log.info("‚úÖ Extracted posted date from div: '{}' -> {}", text, parsedDate);
                                return parsedDate;
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Error extracting posted date from detail page: {}", e.getMessage());
        }
        
        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É —è–∫ –∑–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
        log.info("‚ö†Ô∏è Using current date as fallback for posted date");
        LocalDateTime fallbackDate = LocalDateTime.now();
        log.info("üìÖ Using fallback date: {} (Unix: {})", fallbackDate, fallbackDate.toEpochSecond(java.time.ZoneOffset.UTC));
        return fallbackDate;
    }
    
    /**
     * ‚úÖ –ù–û–í–ò–ô –ú–ï–¢–û–î: –ü–æ—à—É–∫ –∫–∞—Ä—Ç–æ–∫ –≤–∞–∫–∞–Ω—Å—ñ–π –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –∫–æ–º–ø–∞–Ω—ñ—ó
     */
    private List<WebElement> findJobCardsOnCompanyPage(WebDriver driver) {
        List<WebElement> jobCards = new ArrayList<>();
        
        try {
            for (String selector : ScrapingSelectors.COMPANY_PAGE_JOBS) {
                List<WebElement> elements = driver.findElements(By.cssSelector(selector));
                if (!elements.isEmpty()) {
                    jobCards.addAll(elements);
                    log.info("‚úÖ Found {} job cards with selector: {}", elements.size(), selector);
                }
            }
            
            // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
            jobCards = filterValidJobCards(jobCards);
            
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Error finding job cards on company page: {}", e.getMessage());
        }
        
        return jobCards;
    }

    /**
     * ‚úÖ –ù–û–í–ò–ô –ú–ï–¢–û–î: –í–∏—Ç—è–≥—É—î –æ–ø–∏—Å –≤–∞–∫–∞–Ω—Å—ñ—ó –∑ –∫–∞—Ä—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å—ñ—ó
     */
    private String extractDescriptionFromCard(WebElement card) {
        try {
            // ‚úÖ –®—É–∫–∞—î–º–æ –æ–ø–∏—Å –∑–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏ –∑ ScrapingSelectors (–Ω–∞–π—Ç–æ—á–Ω—ñ—à—ñ)
            for (String selector : ScrapingSelectors.DESCRIPTION) {
                try {
                    List<WebElement> elements = card.findElements(By.cssSelector(selector));
                    for (WebElement element : elements) {
                        String text = element.getText();
                        String content = element.getAttribute("content");
                        
                        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ content –∞—Ç—Ä–∏–±—É—Ç
                        if (content != null && !content.trim().isEmpty() && content.length() < 500) {
                            // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –Ω–µ –Ω–∞–∑–≤–∞ –≤–∞–∫–∞–Ω—Å—ñ—ó
                            if (!content.contains(" at ") && !content.contains(" - ") && 
                                !content.contains("UX Designer") && !content.contains("Software Engineer")) {
                                log.debug("üìù Found description using selector '{}' content: '{}'", selector, content);
                                return content.trim();
                            }
                        }
                        
                        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–µ–∫—Å—Ç –µ–ª–µ–º–µ–Ω—Ç–∞
                        if (text != null && !text.trim().isEmpty() && text.length() < 500) {
                            // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –Ω–µ –Ω–∞–∑–≤–∞ –≤–∞–∫–∞–Ω—Å—ñ—ó
                            if (!text.contains(" at ") && !text.contains(" - ") && 
                                !text.contains("UX Designer") && !text.contains("Software Engineer")) {
                                log.debug("üìù Found description using selector '{}' text: '{}'", selector, text);
                                return text.trim();
                            }
                        }
                    }
                } catch (Exception e) {
                    log.debug("‚ö†Ô∏è Selector '{}' failed: {}", selector, e.getMessage());
                }
            }
            
            // ‚úÖ –®—É–∫–∞—î–º–æ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –≤ meta —Ç–µ–≥–∞—Ö
            List<WebElement> metaElements = card.findElements(By.cssSelector("meta[itemprop='description']"));
            if (!metaElements.isEmpty()) {
                String description = metaElements.get(0).getAttribute("content");
                if (description != null && !description.trim().isEmpty()) {
                    // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –Ω–µ –Ω–∞–∑–≤–∞ –≤–∞–∫–∞–Ω—Å—ñ—ó
                    if (!description.contains(" at ") && !description.contains(" - ") && description.length() < 200) {
                        log.debug("üìù Found description in meta[itemprop='description']: '{}'", description);
                        return description.trim();
                    }
                }
            }
            
            // ‚úÖ –®—É–∫–∞—î–º–æ –≤ div –∑ –∫–ª–∞—Å–æ–º job-info (–Ω–∞–π–±—ñ–ª—å—à –π–º–æ–≤—ñ—Ä–Ω–µ –º—ñ—Å—Ü–µ –¥–ª—è –æ–ø–∏—Å—É)
            List<WebElement> jobInfoElements = card.findElements(By.cssSelector("div[class*='job-info']"));
            for (WebElement jobInfo : jobInfoElements) {
                // –®—É–∫–∞—î–º–æ –≤ –¥–æ—á—ñ—Ä–Ω—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç–∞—Ö –∑ –æ–ø–∏—Å–æ–º
                List<WebElement> descElements = jobInfo.findElements(By.cssSelector("[data-testid*='description'], [data-testid*='about'], [data-testid*='summary']"));
                for (WebElement descElement : descElements) {
                    String text = descElement.getText();
                    if (text != null && !text.trim().isEmpty() && text.length() < 500) {
                        // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –Ω–µ –Ω–∞–∑–≤–∞ –≤–∞–∫–∞–Ω—Å—ñ—ó
                        if (!text.contains(" at ") && !text.contains(" - ") && 
                            !text.contains("UX Designer") && !text.contains("Software Engineer")) {
                            log.debug("üìù Found description in job-info element: '{}'", text);
                            return text.trim();
                        }
                    }
                }
            }
            
            // ‚úÖ –î–û–î–ê–ù–û: –®—É–∫–∞—î–º–æ –≤ div –∑ –∫–ª–∞—Å–æ–º sc-beqWaB sc-gueYoa lpllVF MYFxR (–Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–¥–∞–Ω–æ—ó HTML —Å—Ç—Ä—É–∫—Ç—É—Ä–∏)
            List<WebElement> scElements = card.findElements(By.cssSelector("div.sc-beqWaB.sc-gueYoa.lpllVF.MYFxR"));
            for (WebElement scElement : scElements) {
                // –®—É–∫–∞—î–º–æ –≤ –¥–æ—á—ñ—Ä–Ω—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç–∞—Ö –∑ –æ–ø–∏—Å–æ–º
                List<WebElement> descElements = scElement.findElements(By.cssSelector("[data-testid*='description'], [data-testid*='about'], [data-testid*='summary']"));
                for (WebElement descElement : descElements) {
                    String text = descElement.getText();
                    if (text != null && !text.trim().isEmpty() && text.length() < 500) {
                        // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –Ω–µ –Ω–∞–∑–≤–∞ –≤–∞–∫–∞–Ω—Å—ñ—ó
                        if (!text.contains(" at ") && !text.contains(" - ") && 
                            !text.contains("UX Designer") && !text.contains("Software Engineer")) {
                            log.debug("üìù Found description in sc-beqWaB element: '{}'", text);
                            return text.trim();
                        }
                    }
                }
                
                // –®—É–∫–∞—î–º–æ –≤ —Ç–µ–∫—Å—Ç—ñ —Å–∞–º–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞, —è–∫—â–æ –≤—ñ–Ω –º—ñ—Å—Ç–∏—Ç—å –æ–ø–∏—Å
                String scText = scElement.getText();
                if (scText != null && !scText.trim().isEmpty() && scText.length() > 50 && scText.length() < 500) {
                    // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –Ω–µ –Ω–∞–∑–≤–∞ –≤–∞–∫–∞–Ω—Å—ñ—ó
                    if (!scText.contains(" at ") && !scText.contains(" - ") && 
                        !scText.contains("UX Designer") && !scText.contains("Software Engineer") &&
                        !scText.contains("Chief of Staff")) {
                        log.debug("üìù Found description in sc-beqWaB text: '{}'", scText);
                        return scText.trim();
                    }
                }
            }
            
            // ‚úÖ –®—É–∫–∞—î–º–æ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –≤ —Ç–µ–≥–∞—Ö (–Ω–∞–π–±–µ–∑–ø–µ—á–Ω—ñ—à–∏–π fallback –≤–∞—Ä—ñ–∞–Ω—Ç)
            List<WebElement> tagElements = card.findElements(By.cssSelector("[data-testid='tag']"));
            if (!tagElements.isEmpty()) {
                List<String> tags = new ArrayList<>();
                for (WebElement tag : tagElements) {
                    String tagText = tag.getText();
                    if (tagText != null && !tagText.trim().isEmpty()) {
                        tags.add(tagText.trim());
                    }
                }
                if (!tags.isEmpty()) {
                    String tagsDescription = String.join(", ", tags);
                    log.debug("üìù Using tags as fallback description: '{}'", tagsDescription);
                    return tagsDescription;
                }
            }
            
        } catch (Exception e) {
            log.debug("‚ö†Ô∏è Error extracting description from card: {}", e.getMessage());
        }
        
        log.debug("üìù No valid description found in card, will try to get from detail page later");
        return null;
    }

    /**
     * ‚úÖ –ù–û–í–ò–ô –ú–ï–¢–û–î: –í–∏—Ç—è–≥—É—î –æ–ø–∏—Å –≤–∞–∫–∞–Ω—Å—ñ—ó –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
     */
    private String extractDescriptionFromDetailPage(WebDriver driver) {
        try {
            // ‚úÖ –®—É–∫–∞—î–º–æ –æ–ø–∏—Å –≤ div –∑ data-testid="careerPage"
            List<WebElement> careerPageElements = driver.findElements(By.cssSelector("div[data-testid='careerPage']"));
            if (!careerPageElements.isEmpty()) {
                WebElement careerPage = careerPageElements.get(0);
                String description = careerPage.getAttribute("innerHTML");
                if (description != null && !description.trim().isEmpty()) {
                    log.info("üìù Found description in careerPage div, length: {} characters", description.length());
                    return description.trim();
                }
            }
            
            // ‚úÖ –®—É–∫–∞—î–º–æ –æ–ø–∏—Å –≤ div –∑ –∫–ª–∞—Å–æ–º sc-beqWaB fmCCHr
            List<WebElement> descriptionElements = driver.findElements(By.cssSelector("div.sc-beqWaB.fmCCHr"));
            if (!descriptionElements.isEmpty()) {
                WebElement descriptionDiv = descriptionElements.get(0);
                String description = descriptionDiv.getAttribute("innerHTML");
                if (description != null && !description.trim().isEmpty()) {
                    log.info("üìù Found description in sc-beqWaB.fmCCHr div, length: {} characters", description.length());
                    return description.trim();
                }
            }
            
            // ‚úÖ –®—É–∫–∞—î–º–æ –æ–ø–∏—Å –∑–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏ –∑ ScrapingSelectors
            for (String selector : ScrapingSelectors.DESCRIPTION) {
                try {
                    List<WebElement> elements = driver.findElements(By.cssSelector(selector));
                    for (WebElement element : elements) {
                        String elementHtml = element.getAttribute("innerHTML");
                        if (elementHtml != null && elementHtml.length() > 200) { // HTML –º–∞—î –±—É—Ç–∏ –¥–æ–≤–≥–∏–º
                            log.info("üìù Found description using selector '{}', length: {} characters", selector, elementHtml.length());
                            return elementHtml.trim();
                        }
                    }
                } catch (Exception e) {
                    log.debug("‚ö†Ô∏è Error with selector '{}': {}", selector, e.getMessage());
                }
            }
            
            // ‚úÖ –®—É–∫–∞—î–º–æ –æ–ø–∏—Å –≤ –≤—Å—ñ—Ö div –µ–ª–µ–º–µ–Ω—Ç–∞—Ö –∑ –∫–ª–∞—Å–æ–º sc-beqWaB
            List<WebElement> allScElements = driver.findElements(By.cssSelector("div[class*='sc-beqWaB']"));
            for (WebElement element : allScElements) {
                String elementText = element.getText();
                if (elementText != null && elementText.length() > 100) { // –®—É–∫–∞—î–º–æ –¥–æ–≤–≥–∏–π —Ç–µ–∫—Å—Ç
                    String elementHtml = element.getAttribute("innerHTML");
                    if (elementHtml != null && elementHtml.length() > 200) { // HTML –º–∞—î –±—É—Ç–∏ —â–µ –¥–æ–≤—à–∏–º
                        log.info("üìù Found potential description in sc-beqWaB div, length: {} characters", elementHtml.length());
                        return elementHtml.trim();
                    }
                }
            }
            
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Error extracting description from detail page: {}", e.getMessage());
        }
        
        log.info("üìù No description found on detail page");
        return null;
    }
}
