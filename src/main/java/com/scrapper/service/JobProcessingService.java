package com.scrapper.service;

import com.scrapper.model.Job;
import com.scrapper.service.criteriaServices.DataExtractionService;
import com.scrapper.service.criteriaServices.DescriptionIngestService;
import com.scrapper.validation.Validation;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;

/**
 * –°–µ—Ä–≤—ñ—Å –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–∞—Ä—Ç–æ–∫ –≤–∞–∫–∞–Ω—Å—ñ–π
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤ Job —Ç–∞ –æ–±—Ä–æ–±–∫—É –∫–∞—Ä—Ç–æ–∫
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class JobProcessingService {

    private final JobCreationService jobCreationService;
    private final DataExtractionService dataExtractionService;
    private final DescriptionIngestService descriptionIngestService;
    private final JobReportingService jobReportingService;
    private final PageInteractionService pageInteractionService;

    /**
     * –û–±—Ä–æ–±–ª—è—î –≤—Å—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—é –ª–æ–≥—ñ–∫–æ—é
     */
    public List<Job> scrapeAllJobsWithImprovedLogic(WebDriver driver, List<String> jobFunctions, String requiredPrefix) {
        log.info("üîç Job functions to filter by: {} (type: {})", jobFunctions,
                jobFunctions != null ? jobFunctions.getClass().getSimpleName() : "null");
        
        if (jobFunctions != null) {
            for (int i = 0; i < jobFunctions.size(); i++) {
                String function = jobFunctions.get(i);
                log.info("üîç Job function {}: '{}' (type: {})", i, function, 
                        function != null ? function.getClass().getSimpleName() : "null");
            }
        }
        
        // –ö–†–û–ö 1: –°–ø–æ—á–∞—Ç–∫—É —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ job functions
        log.info("üîç –ö–†–û–ö 1: –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é –∑–∞ job functions...");
        
        // –ö–†–û–ö 2: –ù–∞—Ç–∏—Å–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É Load More –û–î–ò–ù —Ä–∞–∑
        log.info("üîç –ö–†–û–ö 2: –ù–∞—Ç–∏—Å–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É Load More –û–î–ò–ù —Ä–∞–∑...");
        pageInteractionService.clickLoadMoreButton(driver);
        
        // –ö–†–û–ö 3: –°–∫—Ä–æ–ª–∏–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–æ –Ω–∏–∑—É
        log.info("üîç –ö–†–û–ö 3: –°–∫—Ä–æ–ª–∏–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–æ –Ω–∏–∑—É...");
        pageInteractionService.scrollToBottom(driver);
        
        // –ö–†–û–ö 4: –¢–µ–ø–µ—Ä —à—É–∫–∞—î–º–æ –≤—Å—ñ –∫–∞—Ä—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å—ñ–π
        log.info("üîç –ö–†–û–ö 4: –®—É–∫–∞—î–º–æ –≤—Å—ñ –∫–∞—Ä—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å—ñ–π –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...");
        List<WebElement> jobCards = pageInteractionService.findJobCardsWithMultipleStrategies(driver);
        List<Job> jobs = new ArrayList<>();
        
        log.info("üìã Found {} job cards to process", jobCards.size());
        
        if (jobCards.isEmpty()) {
            log.error("‚ùå CRITICAL: No job cards found with any strategy!");
            return jobs;
        }
        
        int passedFunctionFilter = 0;
        int foundUrls = 0;
        int savedWithCompanyPrefix = 0;
        int savedWithoutCompanyPrefix = 0;
        
        for (int i = 0; i < jobCards.size(); i++) {
            try {
                WebElement card = jobCards.get(i);
                
                // –õ–æ–≥—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ 5 –∫–∞—Ä—Ç–æ–∫ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                boolean isFirstCards = i < 5;
                if (isFirstCards) {
                    String cardText = card.getText();
                    String preview = cardText.length() > 200 ? cardText.substring(0, 200) + "..." : cardText;
                    log.info("Processing card {}: {}", i + 1, preview);
                }
                
                // –ö–†–û–ö 5: –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é –∑–∞ job functions - –æ–±—Ä–æ–±–ª—è—î–º–æ –≤—Å—ñ –∫–∞—Ä—Ç–∫–∏
                passedFunctionFilter++;
                
                if (isFirstCards) {
                    log.info("Card {} processing (no function filter)", i + 1);
                }
                
                // –ö–†–û–ö 6: –ü–æ—à—É–∫ URL (–î–†–£–ì–ò–ô –ö–†–û–ö –ó–ê –ù–û–í–û–Æ –õ–û–ì–Ü–ö–û–Æ)
                String jobPageUrl = pageInteractionService.findDirectJobUrl(card);
                if (jobPageUrl == null) {
                    if (isFirstCards) {
                        log.info("Card {}: No URL found after passing function filter", i + 1);
                    }
                    continue;
                }
                
                foundUrls++;
                
                if (isFirstCards) {
                    log.info("Card {}: URL found: {}", i + 1, jobPageUrl);
                }
                
                // –ö–†–û–ö 7: –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∞–∫–∞–Ω—Å—ñ—ó (–≤—Å—ñ –ø—Ä–æ—Ö–æ–¥—è—Ç—å –æ–¥–Ω–∞–∫–æ–≤—É –æ–±—Ä–æ–±–∫—É)
                Job job = createJobFromCard(card, jobPageUrl, jobFunctions);
                if (job != null) {
                    jobs.add(job);
                    if (jobPageUrl.startsWith(requiredPrefix)) {
                        savedWithCompanyPrefix++;
                        log.info("Card {} saved (with company prefix)", i + 1);
                    } else {
                        savedWithoutCompanyPrefix++;
                        log.info("Card {} saved (without company prefix)", i + 1);
                    }
                }
                
                if (i % 10 == 0) {
                    log.info("üìä Processed {}/{} job cards", i + 1, jobCards.size());
                }
                
            } catch (Exception e) {
                log.warn("‚ö†Ô∏è Error scraping job card {}: {}", i + 1, e.getMessage());
            }
        }
        // –û–Ω–æ–≤–ª–µ–Ω–∏–π –∑–≤—ñ—Ç –∑ –Ω–æ–≤–æ—é –ª–æ–≥—ñ–∫–æ—é
        jobReportingService.printUpdatedFinalReport(jobCards.size(), passedFunctionFilter, foundUrls, 
                                                   jobs.size(), savedWithCompanyPrefix, savedWithoutCompanyPrefix, jobFunctions);
        return jobs;
    }

    /**
     * –°—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç Job –∑ –∫–∞—Ä—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å—ñ—ó
     */
    public Job createJobFromCard(WebElement jobCard, String jobPageUrl, List<String> jobFunctions) {
        try {
            log.info("üîß Creating Job object from card for URL: {}", jobPageUrl);
            
            // –ï–∫—Å—Ç—Ä–∞–∫—Ü—ñ—è –¥–∞–Ω–∏—Ö –∑ –∫–∞—Ä—Ç–∫–∏
            String positionName = dataExtractionService.extractTitle(jobCard);
            String organizationTitle = dataExtractionService.extractCompanyName(jobCard);

            if (positionName == null || positionName.trim().isEmpty()) {
                log.warn("‚ö†Ô∏è Could not extract position name from card");
                return null;
            }

            if (organizationTitle == null || organizationTitle.trim().isEmpty()) {
                log.warn("‚ö†Ô∏è Could not extract company name from card");
                return null;
            }
            
            // –ï–∫—Å—Ç—Ä–∞–∫—Ü—ñ—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
            String logoUrl = dataExtractionService.extractLogoUrl(jobCard);
            String location = dataExtractionService.extractLocation(jobCard);
            List<String> tags = dataExtractionService.extractTags(jobCard);
            
            log.info("üìã Job extracted: '{}' at '{}' | Location: '{}' | Tags: {} | Logo: {}",
                positionName, organizationTitle, location, tags, logoUrl != null ? "Found" : "Not found");
            
            // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Job –æ–±'—î–∫—Ç–∞
            Job job = jobCreationService.createJobWithAllData(
                jobPageUrl, positionName, organizationTitle, logoUrl, location, tags, null, jobFunctions, null
            );
            
            return job;
                    
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Error creating Job object: {}", e.getMessage());
            return null;
        }
    }

    /**
     * –û–±—Ä–æ–±–ª—è—î –≤–∞–∫–∞–Ω—Å—ñ—ó –∑ –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
     */
    public List<Job> scrapeJobsFromMainPage(WebDriver driver, List<String> jobFunctions, String requiredPrefix) {
        log.info("üìã Scraping jobs from main page with new logic");
        return scrapeAllJobsWithImprovedLogic(driver, jobFunctions, requiredPrefix);
    }

    /**
     * –û–±—Ä–æ–±–ª—è—î –≤–∞–∫–∞–Ω—Å—ñ—ó –∑—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∫–æ–º–ø–∞–Ω—ñ—ó
     */
    public List<Job> scrapeJobsFromCompanyPage(WebDriver driver, List<String> jobFunctions, String requiredPrefix) {
        log.info("üè¢ Scraping jobs from company page with new logic");
        
        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–∞—Ä—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å—ñ–π –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –∫–æ–º–ø–∞–Ω—ñ—ó
        List<WebElement> jobCards = pageInteractionService.findJobCardsOnCompanyPage(driver);
        List<Job> jobs = new ArrayList<>();
        
        log.info("üìã Found {} job cards on company page", jobCards.size());
        
        if (jobCards.isEmpty()) {
            log.warn("‚ö†Ô∏è No job cards found on company page");
            return jobs;
        }
        
        int passedFunctionFilter = 0;
        int foundUrls = 0;
        int savedJobs = 0;
        
        for (int i = 0; i < jobCards.size(); i++) {
            try {
                WebElement card = jobCards.get(i);
                
                // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é –∑–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ - –æ–±—Ä–æ–±–ª—è—î–º–æ –≤—Å—ñ –∫–∞—Ä—Ç–∫–∏
                passedFunctionFilter++;
                
                // –ü–æ—à—É–∫ URL
                String jobPageUrl = pageInteractionService.findDirectJobUrl(card);
                if (jobPageUrl == null) {
                    continue;
                }
                foundUrls++;
                
                // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Job –æ–±'—î–∫—Ç–∞
                Job job = createJobFromCard(card, jobPageUrl, jobFunctions);
                if (job != null) {
                    jobs.add(job);
                    savedJobs++;
                }
                
                if (i % 10 == 0) {
                    log.info("üìä Processed {}/{} company page job cards", i + 1, jobCards.size());
                }
                
            } catch (Exception e) {
                log.warn("‚ö†Ô∏è Error processing company page job card {}: {}", i + 1, e.getMessage());
            }
        }
        
        log.info("‚úÖ Company page scraping completed: {} jobs saved from {} cards", savedJobs, jobCards.size());
        return jobs;
    }

    /**
     * –û–±—Ä–æ–±–ª—è—î –æ–¥–Ω—É –≤–∞–∫–∞–Ω—Å—ñ—é –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
     */
    public List<Job> scrapeSingleJobFromDetailPage(WebDriver driver, List<String> jobFunctions, String requiredPrefix) {
        List<Job> jobs = new ArrayList<>();
        
        try {
            String currentUrl = driver.getCurrentUrl();
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ URL –º—ñ—Å—Ç–∏—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –ø—Ä–µ—Ñ—ñ–∫—Å –∫–æ–º–ø–∞–Ω—ñ—ó
            if (currentUrl.startsWith(requiredPrefix)) {
                log.info("üîç Detail page: URL contains company prefix '{}', applying new logic", requiredPrefix);
                
                // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏
                if (jobFunctions != null && !jobFunctions.isEmpty()) {
                    String positionName = dataExtractionService.extractTitle(driver);
                    if (positionName == null || positionName.trim().isEmpty()) {
                        log.warn("‚ö†Ô∏è Could not extract position name from detail page");
                        return jobs;
                    }
                    
                    String positionText = positionName.toLowerCase();
                    boolean hasRequiredFunction = jobFunctions.stream()
                        .anyMatch(function -> positionText.contains(function.toLowerCase()));
                    
                    if (!hasRequiredFunction) {
                        log.info("üîç Detail page: Position '{}' does not match required functions: {}", positionName, jobFunctions);
                        return jobs;
                    }
                }
                
                // –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ
                log.info("üîç Detail page: All filters passed, saving job");
                
                String positionName = dataExtractionService.extractTitle(driver);
                String companyName = dataExtractionService.extractCompanyName(driver);
                List<String> tags = dataExtractionService.extractTags(driver);
                String location = dataExtractionService.extractLocation(driver);
                String logoUrl = null; // Logo URL –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –Ω–∞ –¥–µ—Ç–∞–ª—å–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
                String description = dataExtractionService.extractDescription(driver);
                
                if (positionName != null && companyName != null) {
                    Job job = jobCreationService.createJobWithAllData(
                        currentUrl, positionName, companyName, logoUrl, location, tags, null, jobFunctions, description
                    );
                    
                    if (job != null) {
                        jobs.add(job);
                        
                        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–ø–∏—Å –≤–∞–∫–∞–Ω—Å—ñ—ó
                        if (description != null && !description.trim().isEmpty() && 
                            !description.equals("Job scraped from Techstars")) {
                            try {
                                boolean descriptionSaved = descriptionIngestService.saveDescription(job, description);
                                if (descriptionSaved) {
                                    log.info("‚úÖ Successfully saved description for job ID: {}", job.getId());
                                } else {
                                    log.warn("‚ö†Ô∏è Failed to save description for job ID: {}", job.getId());
                                }
                            } catch (Exception e) {
                                log.error("‚ùå Error saving description for job ID: {}, error: {}", 
                                        job.getId(), e.getMessage(), e);
                            }
                        }
                    }
                }
            }
            
        } catch (Exception e) {
            log.error("‚ùå Error scraping single job from detail page: {}", e.getMessage(), e);
        }
        
        return jobs;
    }


}
