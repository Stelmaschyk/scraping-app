package com.scrapper.service.webdriver;

import lombok.extern.slf4j.Slf4j;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebDriverException;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.time.Duration;

/**
 * –°–µ—Ä–≤—ñ—Å –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –ø–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö —á–µ—Ä–µ–∑ WebDriver
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –ø–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ URL, –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –±–∞–∑–æ–≤—É –≤–∞–ª—ñ–¥–∞—Ü—ñ—é
 */
@Service
@Slf4j
public class WebDriverNavigationService {

    @Value("${scraping.selenium.timeout:30}")
    private long defaultTimeout;

    @Value("${scraping.selenium.page.load.delay:3000}")
    private long pageLoadDelay;

    /**
     * –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞ –≤–∫–∞–∑–∞–Ω–∏–π URL
     * @param driver WebDriver –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
     * @param url URL –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É
     * @return true —è–∫—â–æ –ø–µ—Ä–µ—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π
     */
    public boolean navigateToUrl(WebDriver driver, String url) {
        if (driver == null || url == null || url.trim().isEmpty()) {
            log.error("‚ùå Invalid parameters for navigation: driver={}, url={}", driver, url);
            return false;
        }

        try {
            log.info("üåê Navigating to URL: {}", url);

            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ URL
            driver.get(url);

            // –ß–µ–∫–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
            waitForPageLoad(driver);

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π URL
            String currentUrl = driver.getCurrentUrl();
            log.info("‚úÖ Navigation successful. Current URL: {}", currentUrl);

            return true;

        } catch (WebDriverException e) {
            log.error("‚ùå Navigation failed: {}", e.getMessage(), e);
            return false;
        } catch (Exception e) {
            log.error("‚ùå Unexpected error during navigation: {}", e.getMessage(), e);
            return false;
        }
    }

    /**
     * –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞ URL –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é —Ä–µ–¥–∏—Ä–µ–∫—Ç—É
     * @param driver WebDriver –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
     * @param url URL –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É
     * @param expectedUrl –æ—á—ñ–∫—É–≤–∞–Ω–∏–π URL –ø—ñ—Å–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç—É
     * @return true —è–∫—â–æ –ø–µ—Ä–µ—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π —Ç–∞ URL —Å–ø—ñ–≤–ø–∞–¥–∞—î
     */
    public boolean navigateToUrlWithRedirectCheck(WebDriver driver, String url, String expectedUrl) {
        if (!navigateToUrl(driver, url)) {
            return false;
        }

        try {
            // –ß–µ–∫–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π —á–∞—Å –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç—É
            Thread.sleep(2000);

            String currentUrl = driver.getCurrentUrl();
            boolean urlMatches = currentUrl.contains(expectedUrl) || currentUrl.equals(expectedUrl);

            if (urlMatches) {
                log.info("‚úÖ Redirect check passed. Expected: {}, Current: {}", expectedUrl, currentUrl);
                return true;
            } else {
                log.warn("‚ö†Ô∏è Redirect check failed. Expected: {}, Current: {}", expectedUrl, currentUrl);
                return false;
            }

        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            log.warn("‚ö†Ô∏è Navigation interrupted during redirect check");
            return false;
        }
    }

    /**
     * –û—á—ñ–∫—É—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
     * @param driver WebDriver –¥–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
     */
    public void waitForPageLoad(WebDriver driver) {
        try {
            log.debug("‚è≥ Waiting for page to load...");
            
            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(defaultTimeout));
            
            // –ß–µ–∫–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π —á–∞—Å –¥–ª—è JavaScript
            Thread.sleep(pageLoadDelay);
            
            log.debug("‚úÖ Page load wait completed");
            
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            log.warn("‚ö†Ô∏è Page load wait interrupted");
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Error during page load wait: {}", e.getMessage());
        }
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∞—Å—è –∫–æ—Ä–µ–∫—Ç–Ω–æ
     * @param driver WebDriver –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
     * @return true —è–∫—â–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∞—Å—è
     */
    public boolean isPageLoaded(WebDriver driver) {
        if (driver == null) {
            return false;
        }

        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–∫–∏
            String readyState = (String) ((org.openqa.selenium.JavascriptExecutor) driver)
                    .executeScript("return document.readyState");

            boolean isComplete = "complete".equals(readyState);

            if (isComplete) {
                log.debug("‚úÖ Page is fully loaded (readyState: {})", readyState);
            } else {
                log.debug("‚è≥ Page is still loading (readyState: {})", readyState);
            }

            return isComplete;

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Could not check page ready state: {}", e.getMessage());
            return false;
        }
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –º—ñ—Å—Ç–∏—Ç—å –æ—á—ñ–∫—É–≤–∞–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
     * @param driver WebDriver –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
     * @param expectedTitle –æ—á—ñ–∫—É–≤–∞–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
     * @return true —è–∫—â–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ø—ñ–≤–ø–∞–¥–∞—î
     */
    public boolean isPageContentValid(WebDriver driver, String expectedTitle) {
        if (driver == null || expectedTitle == null) {
            return false;
        }

        try {
            String actualTitle = driver.getTitle();
            boolean titleMatches = actualTitle != null &&
                                 (actualTitle.contains(expectedTitle) || expectedTitle.contains(actualTitle));

            if (titleMatches) {
                log.info("‚úÖ Page content validation passed. Expected: '{}', Actual: '{}'",
                        expectedTitle, actualTitle);
            } else {
                log.warn("‚ö†Ô∏è Page content validation failed. Expected: '{}', Actual: '{}'",
                        expectedTitle, actualTitle);
            }

            return titleMatches;

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Error during page content validation: {}", e.getMessage());
            return false;
        }
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –Ω–µ —î –ø–æ—Ä–æ–∂–Ω—å–æ—é
     * @param driver WebDriver –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
     * @return true —è–∫—â–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –º—ñ—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç
     */
    public boolean isPageNotEmpty(WebDriver driver) {
        if (driver == null) {
            return false;
        }

        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
            int elementCount = driver.findElements(org.openqa.selenium.By.cssSelector("*")).size();

            boolean hasContent = elementCount > 50; // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –≤–∞–ª—ñ–¥–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏

            if (hasContent) {
                log.debug("‚úÖ Page has content ({} elements)", elementCount);
            } else {
                log.warn("‚ö†Ô∏è Page seems empty ({} elements)", elementCount);
            }

            return hasContent;

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Error checking page content: {}", e.getMessage());
            return false;
        }
    }

    /**
     * –û–Ω–æ–≤–ª—é—î —Å—Ç–æ—Ä—ñ–Ω–∫—É
     * @param driver WebDriver –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
     * @return true —è–∫—â–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ
     */
    public boolean refreshPage(WebDriver driver) {
        if (driver == null) {
            return false;
        }

        try {
            log.info("üîÑ Refreshing page...");
            driver.navigate().refresh();

            // –ß–µ–∫–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            waitForPageLoad(driver);

            log.info("‚úÖ Page refreshed successfully");
            return true;

        } catch (Exception e) {
            log.error("‚ùå Failed to refresh page: {}", e.getMessage(), e);
            return false;
        }
    }

    /**
     * –ü–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—é —Å—Ç–æ—Ä—ñ–Ω–∫—É
     * @param driver WebDriver –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
     * @return true —è–∫—â–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ
     */
    public boolean goBack(WebDriver driver) {
        if (driver == null) {
            return false;
        }

        try {
            log.info("‚¨ÖÔ∏è Going back to previous page...");
            driver.navigate().back();

            // –ß–µ–∫–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            waitForPageLoad(driver);

            log.info("‚úÖ Successfully went back to previous page");
            return true;

        } catch (Exception e) {
            log.error("‚ùå Failed to go back: {}", e.getMessage(), e);
            return false;
        }
    }

    /**
     * –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É (—è–∫—â–æ –º–æ–∂–ª–∏–≤–æ)
     * @param driver WebDriver –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
     * @return true —è–∫—â–æ –ø–µ—Ä–µ—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π
     */
    public boolean goForward(WebDriver driver) {
        if (driver == null) {
            return false;
        }

        try {
            log.info("‚û°Ô∏è Going forward to next page...");
            driver.navigate().forward();

            // –ß–µ–∫–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            waitForPageLoad(driver);

            log.info("‚úÖ Successfully went forward to next page");
            return true;

        } catch (Exception e) {
            log.error("‚ùå Failed to go forward: {}", e.getMessage(), e);
            return false;
        }
    }

    /**
     * –û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω–∏–π URL —Å—Ç–æ—Ä—ñ–Ω–∫–∏
     * @param driver WebDriver –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è URL
     * @return –ø–æ—Ç–æ—á–Ω–∏–π URL –∞–±–æ null —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
     */
    public String getCurrentUrl(WebDriver driver) {
        if (driver == null) {
            return null;
        }

        try {
            String currentUrl = driver.getCurrentUrl();
            log.debug("üîç Current URL: {}", currentUrl);
            return currentUrl;

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Could not get current URL: {}", e.getMessage());
            return null;
        }
    }

    /**
     * –û—Ç—Ä–∏–º—É—î –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
     * @param driver WebDriver –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
     * @return –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∞–±–æ null —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
     */
    public String getPageTitle(WebDriver driver) {
        if (driver == null) {
            return null;
        }

        try {
            String title = driver.getTitle();
            log.debug("üìÑ Page title: {}", title);
            return title;

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Could not get page title: {}", e.getMessage());
            return null;
        }
    }
}
